/**
 * Narrative generators for <%= fhir.release %>/<%= fhir.version %>
 */

/* eslint-disable @typescript-eslint/no-explicit-any */
import { AnyDomainResource, Narrative } from "@bonfhir/fhirtypes/<%= fhir.release %>";
import { <% for (domainResource of fhir.domainResources) { %> <%= domainResource.type %>, <% } %> } from "@bonfhir/fhirtypes/<%= fhir.release %>";
import { DefaultFormatter, Formatter } from "./formatters";
import { startCase } from "./lang-utils";

/** Attribute name, FHIR Type */
export type NarrativeItemGenerator = [string, string];

export type NarrativeGenerator =
  | NarrativeItemGenerator[]
  | ((resource: any) => Narrative | string);

export interface NarrativeOptions {
  /** The formatter to use. Will use the `Formatter.default` if not provided. */
  formatter?: DefaultFormatter | null | undefined;
}

export const NARRATIVE_GENERATORS: Record<string, NarrativeGenerator> = {
  <% for (domainResource of fhir.domainResources) { -%>
    "<%= domainResource.type %>": [
      <% for (const element of domainResource.ownRootElementsWithChoices.filter(x => x.isSummary && x.type && x.type.length > 0)) {-%>["<%= element.name %>", "<%= element.compositionName ?? element.type.map((x) => x.code).join(" | ") %>"],<% } -%>
    ],
    <% for (const backboneElement of domainResource.compositions.filter(x => x.rootElement.isSummary)) { -%>
    "<%= backboneElement.rootElement.compositionName %>": [
      <% for (const element of backboneElement.ownRootElementsWithChoices.filter(x => x.isSummary && x.type && x.type.length > 0)) {-%>["<%= element.name %>", "<%= element.compositionName ?? element.type.map((x) => x.code).join(" | ") %>"],<% } -%>
    ],
    <% } -%>
  <% } -%>
};

export function narrative<TResource extends AnyDomainResource>(
  resource: TResource,
  options?: NarrativeOptions | null | undefined
): Narrative | undefined {
  const generator = NARRATIVE_GENERATORS?.[resource.resourceType];
  if (!generator) {
    return;
  }

  if (typeof generator === "function") {
    const result = generator(resource);
    if (typeof result === "string") {
      return {
        status: "generated",
        div: result,
      };
    }

    return result;
  }

  return {
    status: "generated",
    div: `<div xmlns="http://www.w3.org/1999/xhtml">${render(
      resource,
      generator,
      options
    )}</div>`,
  };
};

function render(
  item: object,
  components: Array<NarrativeItemGenerator>,
  options: NarrativeOptions | null | undefined
): string {
  return `<ul>${components
    .map((component) => {
      const [attribute, type] = component;

      const value = (item as any)[attribute];

      if (value == undefined) {
        return;
      }

      if (Array.isArray(value)) {
        if (value.length === 0) {
          return;
        }

        return `<li><span>${startCase(attribute)}: </span><ul>${value
          .map((i) => renderValue(i, type, options))
          .filter(Boolean)
          .map((r) => `<li>${r}</li>`)
          .join("")}</ul></li>`;
      }

      return `<li><span>${startCase(attribute).replaceAll(
        " Boolean",
        ""
      )}: </span>${renderValue(value, type, options)}</li>`;
    })
    .filter(Boolean)
    .join("")}</ul>`;
}

function renderValue(
  value: any,
  type: string,
  options: NarrativeOptions | null | undefined
): string | undefined {
  const formatter = options?.formatter ?? Formatter.default;
  const narrativeGenerator = NARRATIVE_GENERATORS?.[type];
  if (typeof narrativeGenerator === "function") {
    const generated = narrativeGenerator(value);
    return typeof generated === "string" ? generated : generated.div;
  } else if (typeof narrativeGenerator === "object") {
    return render(value, narrativeGenerator, options);
  } else if (formatter.canFormat(type)) {
    return htmlEncode(formatter.format(type, value as never));
  }
}

function htmlEncode(value: string): string {
  return value.replaceAll(
    /[&<>\u00A0-\u9999]/g,
    (i) => "&#" + i.codePointAt(0) + ";"
  );
}
