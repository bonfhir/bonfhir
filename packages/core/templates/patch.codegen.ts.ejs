/**
 * Typed patch builders for <%= fhir.release %>/<%= fhir.version %>
 */

 import {
  <% for (const valueSet of fhir.requiredBindingValueSets) { -%>
    <%= valueSet.safeName %>,
  <% } -%>
  <% for (const structureDef of fhir.structureDefinitions) { -%>
    <%= structureDef.type -%>,
    <% for (const composition of structureDef.compositions || []) { -%>
      <%= composition.rootElement.compositionName %>,
    <% } -%>
  <% } -%>
  AnyResourceType
} from "@bonfhir/fhirtypes/<%= fhir.release %>";
import { FhirJSONPatchBuilder, JSONPatchBody } from "./patch";

/**
 * Return a typed patch builder for a specific resource.
 */
export function fhirJSONPatch(resourceType?: null | undefined): FhirJSONPatchBuilder;
export function fhirJSONPatch<
  TResourceType extends AnyResourceType = AnyResourceType
>(resourceType: TResourceType): ExtractPatchBuilder<TResourceType>;
export function fhirJSONPatch<
  TResourceType extends AnyResourceType = AnyResourceType
>(
  resourceType?: TResourceType | null | undefined
): FhirJSONPatchBuilder | ExtractPatchBuilder<TResourceType>;
export function fhirJSONPatch<
  TResourceType extends AnyResourceType = AnyResourceType
>(
  resourceType?: TResourceType | null | undefined
): FhirJSONPatchBuilder | ExtractPatchBuilder<TResourceType> {
  if (!resourceType) {
    return new FhirJSONPatchBuilder();
  }

  return new FhirJSONPatchBuilder() as unknown as ExtractPatchBuilder<TResourceType>;
}


<% for (const resource of fhir.resources.sort((resource1, resource2) => {
  if ((resource1.base?.type === resource2.type) || (resource1.base?.base?.type === resource2.type)) {
    return 1;
  }

  if ((resource2.base?.type === resource1.type) || (resource2.base?.base?.type === resource1.type)) {
    return -1;
  }

  return 0;
})) { -%>
  export interface <%= resource.type %>JSONPatchBuilder<%= (!resource.base || resource.base.type === "Base") ? undefined : ` extends ${resource.base.type}JSONPatchBuilder` %> {
    <% if (!resource.abstract) { -%>
      resourceType: "<%= resource.type %>";
    <% } -%>

    <% for (const element of resource.ownRootElementsWithChoices.filter(x => !["id", "meta"].includes(x.name))) { -%>
      <% if (element.isArray) { -%>
        /**
         * [Adds](https://jsonpatch.com/#add) a value to an object or inserts it into an array.
         * In the case of an array, the value is inserted before the given index.
         * The - character can be used instead of an index to insert at the end of an array.
         *
         * <%= element.short %>
         */
        add(path: "/<%= element.name %>", value: <%= element.tsType.replace(" | undefined", "").replace("<TTargetResource>", "") %>): this;
        /**
         * [Adds](https://jsonpatch.com/#add) a value to an object or inserts it into an array.
         * In the case of an array, the value is inserted before the given index.
         * The - character can be used instead of an index to insert at the end of an array.
         *
         * <%= element.short %>
         */
        add(path: `/<%= element.name %>/${number | "-"}`, value: <%= element.tsType.replace(" | undefined", "").replace("<TTargetResource>", "").slice(6, -1) %>): this;
      <% } else {-%>
        /**
         * [Adds](https://jsonpatch.com/#add) a value to an object or inserts it into an array.
         * In the case of an array, the value is inserted before the given index.
         * The - character can be used instead of an index to insert at the end of an array.
         *
         * <%= element.short %>
         */
        add(path: "/<%= element.name %>", value: <%= element.tsType.replace(" | undefined", "").replace("<TTargetResource>", "") %>): this;
      <% } -%>
      /**
       * [Adds](https://jsonpatch.com/#add) a value to an object or inserts it into an array.
       * In the case of an array, the value is inserted before the given index.
       * The - character can be used instead of an index to insert at the end of an array.
       */
        add(path: string, value: unknown): this;
    <% } -%>

    <% for (const element of resource.ownRootElementsWithChoices.filter(x => !["id", "meta"].includes(x.name))) { -%>
      <% if (element.isArray) { -%>
        /**
         * [Removes](https://jsonpatch.com/#remove) a value from an object or array.
         * 
         * <%= element.short %>
         */
        remove(path: "/<%= element.name %>"): this;
        /**
         * [Removes](https://jsonpatch.com/#remove) a value from an object or array.
         * 
         * <%= element.short %>
         */
        remove(path: `/<%= element.name %>/${number}`): this;
      <% } else {-%>
        /**
         * [Removes](https://jsonpatch.com/#remove) a value from an object or array.
         * 
         * <%= element.short %>
         */
        remove(path: "/<%= element.name %>"): this;
      <% } -%>
      /**
       * [Removes](https://jsonpatch.com/#remove) a value from an object or array.
       */
        remove(path: string): this;
    <% } -%>

    <% for (const element of resource.ownRootElementsWithChoices.filter(x => !["id", "meta"].includes(x.name))) { -%>
      <% if (element.isArray) { -%>
        replace(path: "/<%= element.name %>", value: <%= element.tsType.replace(" | undefined", "").replace("<TTargetResource>", "") %>): this;
        /**
         * [Replaces](https://jsonpatch.com/#replace) a value. Equivalent to a “remove” followed by an “add”.
         * 
         * <%= element.short %>
         */
        replace(path: `/<%= element.name %>/${number | "-"}`, value: <%= element.tsType.replace(" | undefined", "").replace("<TTargetResource>", "").slice(6, -1) %>): this;
      <% } else {-%>
        /**
         * [Replaces](https://jsonpatch.com/#replace) a value. Equivalent to a “remove” followed by an “add”.
         * 
         * <%= element.short %>
         */
        replace(path: "/<%= element.name %>", value: <%= element.tsType.replace(" | undefined", "").replace("<TTargetResource>", "") %>): this;
      <% } -%>

      /**
       * [Replaces](https://jsonpatch.com/#replace) a value. Equivalent to a “remove” followed by an “add”.
       */
      replace(path: string, value: unknown): this;
    <% } -%>

    /**
     * The underlying {@link JSONPatchBody}, that can be used directly if needed.
     */
    patch: JSONPatchBody;
  }
<% } -%>

export type AnyFhirJSONPatchBuilder = 
  <% for (const resource of fhir.resources.filter(x => !x.abstract)) { -%>
  | <%= resource.type %>JSONPatchBuilder
  <% } -%>;

/**
 * Allow referencing a patch builder type from its string ResourceType representation.
 */
export type ExtractPatchBuilder<TResourceType extends AnyResourceType> =
  Extract<AnyFhirJSONPatchBuilder, { resourceType: TResourceType }>;
