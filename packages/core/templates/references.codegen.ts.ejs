/**
 * Reference decorators for <%= fhir.release %>/<%= fhir.version %>
 */
 /* eslint-disable @typescript-eslint/no-explicit-any */

import { AnyResource, CodeableConcept, Resource, Reference, Retrieved, WithRequired } from "@bonfhir/fhirtypes/<%= fhir.release %>";
import { Formatter, withValueFormatter } from "./formatters";
import { codeableConceptFormatter, humanNameFormatter } from "./value-formatters/index";
<% const domainResourcesThatCanBeDecorated = fhir.domainResources
    .filter(x => x.ownRootElementsWithChoices.some(x => x.name === "title" || (x.name === "code" && x.tsType.includes("CodeableConcept")) || (x.name === "name" && (x.tsType.includes("string") || x.tsType.includes("HumanName")))));
-%>
import { <% for (domainResource of domainResourcesThatCanBeDecorated) { %> <%= domainResource.type %>, <% } %> } from "@bonfhir/fhirtypes/<%= fhir.release %>";

export interface ReferenceOptions {
  versionSpecific?: boolean | null | undefined;
}

export const REFERENCE_DECORATORS: Record<string, (resource: Resource, reference: Reference) => Reference> = {
  <% for (domainResource of domainResourcesThatCanBeDecorated) { -%>
    "<%= domainResource.type %>": decorate,
  <% } -%>
};

/**
 * Build a reference from a resource.
 */
 export function reference<TTargetResource extends AnyResource = AnyResource>(
  resource: Retrieved<TTargetResource>,
  options?: ReferenceOptions | null | undefined,
): WithRequired<Reference<TTargetResource>, "reference">;
export function reference(
  resource: null | undefined,
  options?: ReferenceOptions | null | undefined,
): undefined;
export function reference<TTargetResource extends AnyResource = AnyResource>(
  resource: Retrieved<TTargetResource> | null | undefined,
  options?: ReferenceOptions | null | undefined,
): WithRequired<Reference<TTargetResource>, "reference"> | undefined;
export function reference<TTargetResource extends AnyResource = AnyResource>(
  resource: Retrieved<TTargetResource> | null | undefined,
  options?: ReferenceOptions | null | undefined,
): WithRequired<Reference<TTargetResource>, "reference"> | undefined {
  if (!resource) {
    return undefined;
  }

  let reference: WithRequired<Reference<TTargetResource>, "reference"> = {
    reference: options?.versionSpecific
      ? `${resource.resourceType}/${resource.id}/_history/${resource.meta.versionId}`
      : `${resource.resourceType}/${resource.id}`,
    type: resource.resourceType,
  };

  // We handle the case of temporary bundle references as well.
  if (resource.id?.startsWith("urn:uuid:")) {
    reference.reference = reference.reference?.split("/").slice(1).join("/");
  }

  const decorator = REFERENCE_DECORATORS?.[resource.resourceType];

  if (decorator) {
    reference = decorator(resource, reference) as WithRequired<Reference<TTargetResource>, "reference">;
  }

  return reference;
}

function decorate(resource: Resource, reference: Reference): Reference {
  const name = (resource as any).name;
  const title: string = (resource as any).title;
  const code: CodeableConcept = (resource as any).code;
  if (typeof name === "string" && name.length > 0) {
    reference.display = name.trim();
  } else if (typeof name === "object") {
    reference.display = withValueFormatter<typeof humanNameFormatter>(Formatter.default).format("HumanName", name, { max: 1 });
  } else if (title) {
    reference.display = title;
  } else if (code) {
    reference.display = withValueFormatter<typeof codeableConceptFormatter>(Formatter.default).format("CodeableConcept", code);
  }

  return reference;
}

/**
 * Extract the target resource type from a reference.
 */
export type ReferenceTarget<TReference> = TReference extends Reference<infer X> ? X : never;
