/**
 * Typed search builders for <%= fhir.release %>/<%= fhir.version %>
 */

import { AnyResourceType } from "@bonfhir/fhirtypes/<%= fhir.release %>";
import { FhirSearchBuilder, Prefix, StringModifier, TokenModifier } from "./search";
import { DropFirst } from "./lang-utils";

/**
 * Return a search query builder, whether for a specific resource or a generic one.
 * 
 * @example
 * > fhirSearch().addString("name", "John").href 
 * > "name=John"
 * 
 * > fhirSearch("Patient").name("John").active("true").href
 * > "name=John&active=true"
 */
export function fhirSearch(
  resourceType?: null | undefined
): FhirSearchBuilder;
export function fhirSearch<
TResourceType extends AnyResourceType = AnyResourceType
>(
  resourceType: TResourceType
): ExtractSearchBuilder<TResourceType>;
export function fhirSearch<
  TResourceType extends AnyResourceType = AnyResourceType
>(
  resourceType?: TResourceType | null | undefined
): FhirSearchBuilder | ExtractSearchBuilder<TResourceType>;
export function fhirSearch<
  TResourceType extends AnyResourceType = AnyResourceType
>(
  resourceType?: TResourceType | null | undefined
): FhirSearchBuilder | ExtractSearchBuilder<TResourceType> {
  if (!resourceType) {
    return new FhirSearchBuilder();
  }

  switch(resourceType) {
    <% for (const resource of fhir.resources.filter(x => !x.abstract)) { -%>
    case "<%= resource.type %>": { return new <%= resource.type %>FhirSearchBuilder() as ExtractSearchBuilder<TResourceType>; }
    <% } -%>
    default: { throw new Error(`Unsupported fhirSearch for resource type ${resourceType}`); }
  }
}

<% for (const resource of fhir.resources.sort((resource1, resource2) => {
  if ((resource1.base?.type === resource2.type) || (resource1.base?.base?.type === resource2.type)) {
    return 1;
  }

  if ((resource2.base?.type === resource1.type) || (resource2.base?.base?.type === resource1.type)) {
    return -1;
  }

  return 0;
})) { -%>

export type <%= resource.type %>SortOrder = <% if (resource.base?.type && resource.base?.type !== "Base") { -%><%= resource.base?.type %>SortOrder <% } -%>
  <% if (resource.allSearchParameters.filter(x => !x.experimental).length === 0) { -%>
    Record<string, never>
  <% } else { -%>
    <% for (const searchParameter of resource.ownSearchParameters.filter(x => !x.experimental)) { -%>
      | "<%= searchParameter.code %>" | "-<%= searchParameter.code %>"
      <% if (fhir.release >= "r5" && ["reference", "token"].includes(searchParameter.type)) { -%>
        | "<%= searchParameter.code %>:text" | "-<%= searchParameter.code %>:text"
      <% } -%>
    <% } -%>
    <% if (!resource.base?.type || resource.base?.type === "Base") { -%>
      | "_score"
    <% } -%>
  <% } -%>
;

export class <%= resource.type %>FhirSearchBuilder extends <%= resource.base?.type === "Base" ? undefined : resource.base?.type %>FhirSearchBuilder {
  <% if (!resource.abstract) { -%>
  readonly resourceType = "<%= resource.type %>";
  <% } -%>

  <% for (const searchParameter of resource.ownSearchParameters.filter(x => !x.experimental)) { -%>
  <%= searchParameter.jsDoc %>
  <%= searchParameter.safeName %>(...args: DropFirst<Parameters<FhirSearchBuilder["<%= searchParameter.type %>Param"]>>): this {
    return this.<%= searchParameter.type %>Param("<%= searchParameter.code %>", ...args);
  } 
  <% } -%>

  /**
   * Indicate the sort order.
   * 
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(parameters: <%= resource.type %>SortOrder | <%= resource.type %>SortOrder[] | null | undefined): this {
    return this.stringParam("_sort", parameters, undefined, parameters ? "replace" : "remove");
  }
}

<% } -%>

/**
 * Search parameters by their resource type..
 */
export type AllResourcesSearchParameters = {
  <% for (const resource of fhir.resources.filter(res => !res.abstract && res.allSearchParameters.some(x => !x.experimental))) { -%>
  <%= resource.type %>: {
    <% for (const searchParameter of resource.allSearchParameters.filter(x => !x.experimental)) { -%>
      "<%= searchParameter.code %>": "<%= searchParameter.type %>";
    <% } -%>
  }
  <% } -%>
};

export type AnyFhirSearchBuilder = 
  <% for (const resource of fhir.resources.filter(x => !x.abstract)) { -%>
  | <%= resource.type %>FhirSearchBuilder
  <% } -%>;

/**
 * Allow referencing a search builder type from its string ResourceType representation.
 */
export type ExtractSearchBuilder<TResourceType extends AnyResourceType> =
  Extract<AnyFhirSearchBuilder, { resourceType: TResourceType }>;
