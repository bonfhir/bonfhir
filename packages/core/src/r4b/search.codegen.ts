/**
 * Typed search builders for r4b/4.3.0
 */

import { AnyResourceType } from "@bonfhir/fhirtypes/r4b";
import { DropFirst } from "./lang-utils";
import { FhirSearchBuilder } from "./search";

/**
 * Return a search query builder, whether for a specific resource or a generic one.
 *
 * @example
 * > fhirSearch().addString("name", "John").href
 * > "name=John"
 *
 * > fhirSearch("Patient").name("John").active("true").href
 * > "name=John&active=true"
 */
export function fhirSearch(resourceType?: null | undefined): FhirSearchBuilder;
export function fhirSearch<
  TResourceType extends AnyResourceType = AnyResourceType,
>(resourceType: TResourceType): ExtractSearchBuilder<TResourceType>;
export function fhirSearch<
  TResourceType extends AnyResourceType = AnyResourceType,
>(
  resourceType?: TResourceType | null | undefined,
): FhirSearchBuilder | ExtractSearchBuilder<TResourceType>;
export function fhirSearch<
  TResourceType extends AnyResourceType = AnyResourceType,
>(
  resourceType?: TResourceType | null | undefined,
): FhirSearchBuilder | ExtractSearchBuilder<TResourceType> {
  if (!resourceType) {
    return new FhirSearchBuilder();
  }

  switch (resourceType) {
    case "Account": {
      return new AccountFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ActivityDefinition": {
      return new ActivityDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "AdministrableProductDefinition": {
      return new AdministrableProductDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "AdverseEvent": {
      return new AdverseEventFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "AllergyIntolerance": {
      return new AllergyIntoleranceFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Appointment": {
      return new AppointmentFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "AppointmentResponse": {
      return new AppointmentResponseFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "AuditEvent": {
      return new AuditEventFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Basic": {
      return new BasicFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Binary": {
      return new BinaryFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "BiologicallyDerivedProduct": {
      return new BiologicallyDerivedProductFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "BodyStructure": {
      return new BodyStructureFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Bundle": {
      return new BundleFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "CapabilityStatement": {
      return new CapabilityStatementFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "CarePlan": {
      return new CarePlanFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "CareTeam": {
      return new CareTeamFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "CatalogEntry": {
      return new CatalogEntryFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ChargeItem": {
      return new ChargeItemFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ChargeItemDefinition": {
      return new ChargeItemDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Citation": {
      return new CitationFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Claim": {
      return new ClaimFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ClaimResponse": {
      return new ClaimResponseFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ClinicalImpression": {
      return new ClinicalImpressionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ClinicalUseDefinition": {
      return new ClinicalUseDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "CodeSystem": {
      return new CodeSystemFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Communication": {
      return new CommunicationFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "CommunicationRequest": {
      return new CommunicationRequestFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "CompartmentDefinition": {
      return new CompartmentDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Composition": {
      return new CompositionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ConceptMap": {
      return new ConceptMapFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Condition": {
      return new ConditionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Consent": {
      return new ConsentFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Contract": {
      return new ContractFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Coverage": {
      return new CoverageFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "CoverageEligibilityRequest": {
      return new CoverageEligibilityRequestFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "CoverageEligibilityResponse": {
      return new CoverageEligibilityResponseFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "DetectedIssue": {
      return new DetectedIssueFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Device": {
      return new DeviceFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "DeviceDefinition": {
      return new DeviceDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "DeviceMetric": {
      return new DeviceMetricFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "DeviceRequest": {
      return new DeviceRequestFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "DeviceUseStatement": {
      return new DeviceUseStatementFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "DiagnosticReport": {
      return new DiagnosticReportFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "DocumentManifest": {
      return new DocumentManifestFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "DocumentReference": {
      return new DocumentReferenceFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Encounter": {
      return new EncounterFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Endpoint": {
      return new EndpointFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "EnrollmentRequest": {
      return new EnrollmentRequestFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "EnrollmentResponse": {
      return new EnrollmentResponseFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "EpisodeOfCare": {
      return new EpisodeOfCareFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "EventDefinition": {
      return new EventDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Evidence": {
      return new EvidenceFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "EvidenceReport": {
      return new EvidenceReportFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "EvidenceVariable": {
      return new EvidenceVariableFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ExampleScenario": {
      return new ExampleScenarioFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ExplanationOfBenefit": {
      return new ExplanationOfBenefitFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "FamilyMemberHistory": {
      return new FamilyMemberHistoryFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Flag": {
      return new FlagFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Goal": {
      return new GoalFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "GraphDefinition": {
      return new GraphDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Group": {
      return new GroupFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "GuidanceResponse": {
      return new GuidanceResponseFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "HealthcareService": {
      return new HealthcareServiceFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ImagingStudy": {
      return new ImagingStudyFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Immunization": {
      return new ImmunizationFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ImmunizationEvaluation": {
      return new ImmunizationEvaluationFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ImmunizationRecommendation": {
      return new ImmunizationRecommendationFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ImplementationGuide": {
      return new ImplementationGuideFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Ingredient": {
      return new IngredientFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "InsurancePlan": {
      return new InsurancePlanFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Invoice": {
      return new InvoiceFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Library": {
      return new LibraryFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Linkage": {
      return new LinkageFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "List": {
      return new ListFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Location": {
      return new LocationFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ManufacturedItemDefinition": {
      return new ManufacturedItemDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Measure": {
      return new MeasureFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "MeasureReport": {
      return new MeasureReportFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Media": {
      return new MediaFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Medication": {
      return new MedicationFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "MedicationAdministration": {
      return new MedicationAdministrationFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "MedicationDispense": {
      return new MedicationDispenseFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "MedicationKnowledge": {
      return new MedicationKnowledgeFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "MedicationRequest": {
      return new MedicationRequestFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "MedicationStatement": {
      return new MedicationStatementFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "MedicinalProductDefinition": {
      return new MedicinalProductDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "MessageDefinition": {
      return new MessageDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "MessageHeader": {
      return new MessageHeaderFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "MolecularSequence": {
      return new MolecularSequenceFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "NamingSystem": {
      return new NamingSystemFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "NutritionOrder": {
      return new NutritionOrderFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "NutritionProduct": {
      return new NutritionProductFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Observation": {
      return new ObservationFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ObservationDefinition": {
      return new ObservationDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "OperationDefinition": {
      return new OperationDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "OperationOutcome": {
      return new OperationOutcomeFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Organization": {
      return new OrganizationFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "OrganizationAffiliation": {
      return new OrganizationAffiliationFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "PackagedProductDefinition": {
      return new PackagedProductDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Parameters": {
      return new ParametersFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Patient": {
      return new PatientFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "PaymentNotice": {
      return new PaymentNoticeFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "PaymentReconciliation": {
      return new PaymentReconciliationFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Person": {
      return new PersonFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "PlanDefinition": {
      return new PlanDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Practitioner": {
      return new PractitionerFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "PractitionerRole": {
      return new PractitionerRoleFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Procedure": {
      return new ProcedureFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Provenance": {
      return new ProvenanceFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Questionnaire": {
      return new QuestionnaireFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "QuestionnaireResponse": {
      return new QuestionnaireResponseFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "RegulatedAuthorization": {
      return new RegulatedAuthorizationFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "RelatedPerson": {
      return new RelatedPersonFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "RequestGroup": {
      return new RequestGroupFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ResearchDefinition": {
      return new ResearchDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ResearchElementDefinition": {
      return new ResearchElementDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ResearchStudy": {
      return new ResearchStudyFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ResearchSubject": {
      return new ResearchSubjectFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "RiskAssessment": {
      return new RiskAssessmentFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Schedule": {
      return new ScheduleFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "SearchParameter": {
      return new SearchParameterFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ServiceRequest": {
      return new ServiceRequestFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Slot": {
      return new SlotFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Specimen": {
      return new SpecimenFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "SpecimenDefinition": {
      return new SpecimenDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "StructureDefinition": {
      return new StructureDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "StructureMap": {
      return new StructureMapFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Subscription": {
      return new SubscriptionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "SubscriptionStatus": {
      return new SubscriptionStatusFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "SubscriptionTopic": {
      return new SubscriptionTopicFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Substance": {
      return new SubstanceFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "SubstanceDefinition": {
      return new SubstanceDefinitionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "SupplyDelivery": {
      return new SupplyDeliveryFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "SupplyRequest": {
      return new SupplyRequestFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "Task": {
      return new TaskFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "TerminologyCapabilities": {
      return new TerminologyCapabilitiesFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "TestReport": {
      return new TestReportFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "TestScript": {
      return new TestScriptFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "ValueSet": {
      return new ValueSetFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "VerificationResult": {
      return new VerificationResultFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    case "VisionPrescription": {
      return new VisionPrescriptionFhirSearchBuilder() as ExtractSearchBuilder<TResourceType>;
    }
    default: {
      throw new Error(
        `Unsupported fhirSearch for resource type ${resourceType}`,
      );
    }
  }
}

export type ResourceSortOrder =
  | "_content"
  | "-_content"
  | "_filter"
  | "-_filter"
  | "_has"
  | "-_has"
  | "_id"
  | "-_id"
  | "_lastUpdated"
  | "-_lastUpdated"
  | "_list"
  | "-_list"
  | "_profile"
  | "-_profile"
  | "_query"
  | "-_query"
  | "_security"
  | "-_security"
  | "_source"
  | "-_source"
  | "_tag"
  | "-_tag"
  | "_text"
  | "-_text"
  | "_type"
  | "-_type"
  | "_filter"
  | "-_filter"
  | "_score";

export class ResourceFhirSearchBuilder extends FhirSearchBuilder {
  /**
   * Search on the entire content of the resource
   * @fhirSearchType `string`
   */
  _content(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("_content", ...args);
  }
  /**
   * Filter search parameter which supports a more sophisticated grammar for
   * searching. See [documentation](search_filter.html) for further details
   * @fhirSearchType `token`
   */
  _filter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("_filter", ...args);
  }
  /**
   * Provides limited support for reverse chaining - that is, selecting resources
   * based on the properties of resources that refer to them (instead of chaining
   * where resources can be selected based on the properties of resources that they
   * refer to). See the FHIR search page for further documentation
   * @fhirSearchType `string`
   */
  _has(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("_has", ...args);
  }
  /**
   * Logical id of this artifact
   * @fhirSearchType `token`
   * @fhirPath `Resource.id`
   */
  _id(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("_id", ...args);
  }
  /**
   * When the resource version last changed
   * @fhirSearchType `date`
   * @fhirPath `Resource.meta.lastUpdated`
   */
  _lastUpdated(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("_lastUpdated", ...args);
  }
  /**
   * All resources in nominated list (by id, Type/id, url or one of the magic List
   * types)
   * @fhirSearchType `string`
   */
  _list(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("_list", ...args);
  }
  /**
   * Profiles this resource claims to conform to
   * @fhirSearchType `uri`
   * @fhirPath `Resource.meta.profile`
   */
  _profile(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("_profile", ...args);
  }
  /**
   * A custom search profile that describes a specific defined query operation
   * @fhirSearchType `token`
   */
  _query(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("_query", ...args);
  }
  /**
   * Security Labels applied to this resource
   * @fhirSearchType `token`
   * @fhirPath `Resource.meta.security`
   */
  _security(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("_security", ...args);
  }
  /**
   * Identifies where the resource comes from
   * @fhirSearchType `uri`
   * @fhirPath `Resource.meta.source`
   */
  _source(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("_source", ...args);
  }
  /**
   * Tags applied to this resource
   * @fhirSearchType `token`
   * @fhirPath `Resource.meta.tag`
   */
  _tag(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("_tag", ...args);
  }
  /**
   * Search on the narrative text (html) of the resource
   * @fhirSearchType `string`
   */
  _text(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("_text", ...args);
  }
  /**
   * Used when a search is performed in a context which doesn't limit the search to
   * indicate which types are being searched. See the FHIR search page for further
   * discussion
   * @fhirSearchType `token`
   */
  _type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("_type", ...args);
  }
  /**
   * This is the formal declaration for the _filter parameter, documented at
   * [http://hl7.org/fhir/search_filter.html](http://hl7.org/fhir/search_filter.html)
   * @fhirSearchType `special`
   */
  filterSearchParameter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["specialParam"]>>
  ): this {
    return this.specialParam("_filter", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: ResourceSortOrder | ResourceSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type DomainResourceSortOrder = ResourceSortOrder | "_text" | "-_text";

export class DomainResourceFhirSearchBuilder extends ResourceFhirSearchBuilder {
  /**
   * Search on the narrative of the resource
   * @fhirSearchType `string`
   */
  _text(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("_text", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | DomainResourceSortOrder
      | DomainResourceSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type AccountSortOrder =
  | DomainResourceSortOrder
  | "identifier"
  | "-identifier"
  | "name"
  | "-name"
  | "owner"
  | "-owner"
  | "patient"
  | "-patient"
  | "period"
  | "-period"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "type"
  | "-type";

export class AccountFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Account";

  /**
   * Account number
   * @fhirSearchType `token`
   * @fhirPath `Account.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Human-readable label
   * @fhirSearchType `string`
   * @fhirPath `Account.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * Entity managing the Account
   * @fhirSearchType `reference`
   * @fhirPath `Account.owner`
   */
  owner(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("owner", ...args);
  }
  /**
   * The entity that caused the expenses
   * @fhirSearchType `reference`
   * @fhirPath `Account.subject.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * Transaction window
   * @fhirSearchType `date`
   * @fhirPath `Account.servicePeriod`
   */
  period(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("period", ...args);
  }
  /**
   * active | inactive | entered-in-error | on-hold | unknown
   * @fhirSearchType `token`
   * @fhirPath `Account.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The entity that caused the expenses
   * @fhirSearchType `reference`
   * @fhirPath `Account.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
   * E.g. patient, expense, depreciation
   * @fhirSearchType `token`
   * @fhirPath `Account.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: AccountSortOrder | AccountSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ActivityDefinitionSortOrder =
  | DomainResourceSortOrder
  | "composed-of"
  | "-composed-of"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "depends-on"
  | "-depends-on"
  | "derived-from"
  | "-derived-from"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "predecessor"
  | "-predecessor"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "successor"
  | "-successor"
  | "title"
  | "-title"
  | "topic"
  | "-topic"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class ActivityDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ActivityDefinition";

  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `ActivityDefinition.relatedArtifact.where(type='composed-of').resource`
   */
  composedOf(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("composed-of", ...args);
  }
  /**
   * A quantity- or range-valued use context assigned to the activity definition
   * @fhirSearchType `quantity`
   * @fhirPath `(ActivityDefinition.useContext.value as Quantity) | (ActivityDefinition.useContext.value as Range)`
   */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
   * A use context type and quantity- or range-based value assigned to the activity
   * definition
   * @fhirSearchType `composite`
   * @fhirPath `ActivityDefinition.useContext`
   */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
   * A use context type and value assigned to the activity definition
   * @fhirSearchType `composite`
   * @fhirPath `ActivityDefinition.useContext`
   */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
   * A type of use context assigned to the activity definition
   * @fhirSearchType `token`
   * @fhirPath `ActivityDefinition.useContext.code`
   */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
   * A use context assigned to the activity definition
   * @fhirSearchType `token`
   * @fhirPath `(ActivityDefinition.useContext.value as CodeableConcept)`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
   * The activity definition publication date
   * @fhirSearchType `date`
   * @fhirPath `ActivityDefinition.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `ActivityDefinition.relatedArtifact.where(type='depends-on').resource | ActivityDefinition.library`
   */
  dependsOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("depends-on", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `ActivityDefinition.relatedArtifact.where(type='derived-from').resource`
   */
  derivedFrom(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("derived-from", ...args);
  }
  /**
   * The description of the activity definition
   * @fhirSearchType `string`
   * @fhirPath `ActivityDefinition.description`
   */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
   * The time during which the activity definition is intended to be in use
   * @fhirSearchType `date`
   * @fhirPath `ActivityDefinition.effectivePeriod`
   */
  effective(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("effective", ...args);
  }
  /**
   * External identifier for the activity definition
   * @fhirSearchType `token`
   * @fhirPath `ActivityDefinition.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Intended jurisdiction for the activity definition
   * @fhirSearchType `token`
   * @fhirPath `ActivityDefinition.jurisdiction`
   */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
   * Computationally friendly name of the activity definition
   * @fhirSearchType `string`
   * @fhirPath `ActivityDefinition.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `ActivityDefinition.relatedArtifact.where(type='predecessor').resource`
   */
  predecessor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("predecessor", ...args);
  }
  /**
   * Name of the publisher of the activity definition
   * @fhirSearchType `string`
   * @fhirPath `ActivityDefinition.publisher`
   */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
   * The current status of the activity definition
   * @fhirSearchType `token`
   * @fhirPath `ActivityDefinition.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `ActivityDefinition.relatedArtifact.where(type='successor').resource`
   */
  successor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("successor", ...args);
  }
  /**
   * The human-friendly name of the activity definition
   * @fhirSearchType `string`
   * @fhirPath `ActivityDefinition.title`
   */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
   * Topics associated with the module
   * @fhirSearchType `token`
   * @fhirPath `ActivityDefinition.topic`
   */
  topic(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("topic", ...args);
  }
  /**
   * The uri that identifies the activity definition
   * @fhirSearchType `uri`
   * @fhirPath `ActivityDefinition.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
   * The business version of the activity definition
   * @fhirSearchType `token`
   * @fhirPath `ActivityDefinition.version`
   */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ActivityDefinitionSortOrder
      | ActivityDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type AdministrableProductDefinitionSortOrder =
  | DomainResourceSortOrder
  | "device"
  | "-device"
  | "dose-form"
  | "-dose-form"
  | "form-of"
  | "-form-of"
  | "identifier"
  | "-identifier"
  | "ingredient"
  | "-ingredient"
  | "manufactured-item"
  | "-manufactured-item"
  | "route"
  | "-route"
  | "target-species"
  | "-target-species";

export class AdministrableProductDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "AdministrableProductDefinition";

  /**
   * A device that is integral to the medicinal product, in effect being considered
   * as an "ingredient" of the medicinal product. This is not intended for devices
   * that are just co-packaged
   * @fhirSearchType `reference`
   * @fhirPath `AdministrableProductDefinition.device`
   */
  device(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("device", ...args);
  }
  /**
   * The administrable dose form, i.e. the dose form of the final product after
   * necessary reconstitution or processing
   * @fhirSearchType `token`
   * @fhirPath `AdministrableProductDefinition.administrableDoseForm`
   */
  doseForm(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("dose-form", ...args);
  }
  /**
   * The medicinal product that this is an administrable form of. This is not a
   * reference to the item(s) that make up this administrable form - it is the whole
   * product
   * @fhirSearchType `reference`
   * @fhirPath `AdministrableProductDefinition.formOf`
   */
  formOf(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("form-of", ...args);
  }
  /**
   * An identifier for the administrable product
   * @fhirSearchType `token`
   * @fhirPath `AdministrableProductDefinition.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The ingredients of this administrable medicinal product
   * @fhirSearchType `token`
   * @fhirPath `AdministrableProductDefinition.ingredient`
   */
  ingredient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("ingredient", ...args);
  }
  /**
   * The manufactured item(s) that this administrable product is produced from.
   * Either a single item, or several that are mixed before administration (e.g. a
   * power item and a solution item). Note that these are not raw ingredients
   * @fhirSearchType `reference`
   * @fhirPath `AdministrableProductDefinition.producedFrom`
   */
  manufacturedItem(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("manufactured-item", ...args);
  }
  /**
   * Coded expression for the route
   * @fhirSearchType `token`
   * @fhirPath `AdministrableProductDefinition.routeOfAdministration.code`
   */
  route(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("route", ...args);
  }
  /**
   * Coded expression for the species
   * @fhirSearchType `token`
   * @fhirPath `AdministrableProductDefinition.routeOfAdministration.targetSpecies.code`
   */
  targetSpecies(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("target-species", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | AdministrableProductDefinitionSortOrder
      | AdministrableProductDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type AdverseEventSortOrder =
  | DomainResourceSortOrder
  | "actuality"
  | "-actuality"
  | "category"
  | "-category"
  | "date"
  | "-date"
  | "event"
  | "-event"
  | "location"
  | "-location"
  | "recorder"
  | "-recorder"
  | "resultingcondition"
  | "-resultingcondition"
  | "seriousness"
  | "-seriousness"
  | "severity"
  | "-severity"
  | "study"
  | "-study"
  | "subject"
  | "-subject"
  | "substance"
  | "-substance";

export class AdverseEventFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "AdverseEvent";

  /**
   * actual | potential
   * @fhirSearchType `token`
   * @fhirPath `AdverseEvent.actuality`
   */
  actuality(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("actuality", ...args);
  }
  /**
   * product-problem | product-quality | product-use-error | wrong-dose |
   * incorrect-prescribing-information | wrong-technique |
   * wrong-route-of-administration | wrong-rate | wrong-duration | wrong-time |
   * expired-drug | medical-device-use-error | problem-different-manufacturer |
   * unsafe-physical-environment
   * @fhirSearchType `token`
   * @fhirPath `AdverseEvent.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * When the event occurred
   * @fhirSearchType `date`
   * @fhirPath `AdverseEvent.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * Type of the event itself in relation to the subject
   * @fhirSearchType `token`
   * @fhirPath `AdverseEvent.event`
   */
  event(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("event", ...args);
  }
  /**
   * Location where adverse event occurred
   * @fhirSearchType `reference`
   * @fhirPath `AdverseEvent.location`
   */
  location(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("location", ...args);
  }
  /**
   * Who recorded the adverse event
   * @fhirSearchType `reference`
   * @fhirPath `AdverseEvent.recorder`
   */
  recorder(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("recorder", ...args);
  }
  /**
   * Effect on the subject due to this event
   * @fhirSearchType `reference`
   * @fhirPath `AdverseEvent.resultingCondition`
   */
  resultingcondition(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("resultingcondition", ...args);
  }
  /**
   * Seriousness of the event
   * @fhirSearchType `token`
   * @fhirPath `AdverseEvent.seriousness`
   */
  seriousness(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("seriousness", ...args);
  }
  /**
   * mild | moderate | severe
   * @fhirSearchType `token`
   * @fhirPath `AdverseEvent.severity`
   */
  severity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("severity", ...args);
  }
  /**
   * AdverseEvent.study
   * @fhirSearchType `reference`
   * @fhirPath `AdverseEvent.study`
   */
  study(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("study", ...args);
  }
  /**
   * Subject impacted by event
   * @fhirSearchType `reference`
   * @fhirPath `AdverseEvent.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
   * Refers to the specific entity that caused the adverse event
   * @fhirSearchType `reference`
   * @fhirPath `AdverseEvent.suspectEntity.instance`
   */
  substance(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("substance", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | AdverseEventSortOrder
      | AdverseEventSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type AllergyIntoleranceSortOrder =
  | DomainResourceSortOrder
  | "asserter"
  | "-asserter"
  | "category"
  | "-category"
  | "clinical-status"
  | "-clinical-status"
  | "criticality"
  | "-criticality"
  | "last-date"
  | "-last-date"
  | "manifestation"
  | "-manifestation"
  | "onset"
  | "-onset"
  | "recorder"
  | "-recorder"
  | "route"
  | "-route"
  | "severity"
  | "-severity"
  | "verification-status"
  | "-verification-status"
  | "code"
  | "-code"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "type"
  | "-type";

export class AllergyIntoleranceFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "AllergyIntolerance";

  /**
   * Source of the information about the allergy
   * @fhirSearchType `reference`
   * @fhirPath `AllergyIntolerance.asserter`
   */
  asserter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("asserter", ...args);
  }
  /**
   * food | medication | environment | biologic
   * @fhirSearchType `token`
   * @fhirPath `AllergyIntolerance.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * active | inactive | resolved
   * @fhirSearchType `token`
   * @fhirPath `AllergyIntolerance.clinicalStatus`
   */
  clinicalStatus(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("clinical-status", ...args);
  }
  /**
   * low | high | unable-to-assess
   * @fhirSearchType `token`
   * @fhirPath `AllergyIntolerance.criticality`
   */
  criticality(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("criticality", ...args);
  }
  /**
   * Date(/time) of last known occurrence of a reaction
   * @fhirSearchType `date`
   * @fhirPath `AllergyIntolerance.lastOccurrence`
   */
  lastDate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("last-date", ...args);
  }
  /**
   * Clinical symptoms/signs associated with the Event
   * @fhirSearchType `token`
   * @fhirPath `AllergyIntolerance.reaction.manifestation`
   */
  manifestation(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("manifestation", ...args);
  }
  /**
   * Date(/time) when manifestations showed
   * @fhirSearchType `date`
   * @fhirPath `AllergyIntolerance.reaction.onset`
   */
  onset(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("onset", ...args);
  }
  /**
   * Who recorded the sensitivity
   * @fhirSearchType `reference`
   * @fhirPath `AllergyIntolerance.recorder`
   */
  recorder(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("recorder", ...args);
  }
  /**
   * How the subject was exposed to the substance
   * @fhirSearchType `token`
   * @fhirPath `AllergyIntolerance.reaction.exposureRoute`
   */
  route(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("route", ...args);
  }
  /**
   * mild | moderate | severe (of event as a whole)
   * @fhirSearchType `token`
   * @fhirPath `AllergyIntolerance.reaction.severity`
   */
  severity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("severity", ...args);
  }
  /**
   * unconfirmed | confirmed | refuted | entered-in-error
   * @fhirSearchType `token`
   * @fhirPath `AllergyIntolerance.verificationStatus`
   */
  verificationStatus(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("verification-status", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code
 * that identifies the allergy or intolerance
* [Condition](condition.html): Code
 * for the condition
* [DeviceRequest](devicerequest.html): Code for what is being
 * requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the
 * report, as opposed to codes for the atomic results, which are the names on the
 * observation resource referred to from the result
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
*
 * [List](list.html): What the purpose of this list is
*
 * [Medication](medication.html): Returns medications for a specific code
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication code
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine code
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions of this medication code
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication code
* [Observation](observation.html): The code of the observation
 * type
* [Procedure](procedure.html): A code to identify a  procedure
*
 * [ServiceRequest](servicerequest.html): What is being requested/ordered
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.code | AllergyIntolerance.reaction.substance | Condition.code | (DeviceRequest.code as CodeableConcept) | DiagnosticReport.code | FamilyMemberHistory.condition.code | List.code | Medication.code | (MedicationAdministration.medication as CodeableConcept) | (MedicationDispense.medication as CodeableConcept) | (MedicationRequest.medication as CodeableConcept) | (MedicationStatement.medication as CodeableConcept) | Observation.code | Procedure.code | ServiceRequest.code`
 */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date
 * first version of the resource instance was recorded
*
 * [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html):
 * Time period team covers
* [ClinicalImpression](clinicalimpression.html): When
 * the assessment was documented
* [Composition](composition.html): Composition
 * editing time
* [Consent](consent.html): When this Consent was created or
 * indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant
 * time of the report
* [Encounter](encounter.html): A date within the period the
 * Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date
 * search value falls within the episode of care's period
*
 * [FamilyMemberHistory](familymemberhistory.html): When history was recorded or
 * last updated
* [Flag](flag.html): Time period when flag is active
*
 * [Immunization](immunization.html): Vaccination  (non)-Administration Date
*
 * [List](list.html): When the list was prepared
*
 * [Observation](observation.html): Obtained date/time. If the obtained element is
 * a period, a date that falls in the period
* [Procedure](procedure.html): When
 * the procedure was performed
* [RiskAssessment](riskassessment.html): When was
 * assessment made?
* [SupplyRequest](supplyrequest.html): When the request was
 * made
 * @fhirSearchType `date`
 * @fhirPath `AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): allergy
 * | intolerance - Underlying mechanism (if known)
*
 * [Composition](composition.html): Kind of composition (LOINC if possible)
*
 * [DocumentManifest](documentmanifest.html): Kind of document set
*
 * [DocumentReference](documentreference.html): Kind of document (LOINC if
 * possible)
* [Encounter](encounter.html): Specific type of encounter
*
 * [EpisodeOfCare](episodeofcare.html): Type/class  - e.g. specialist referral,
 * disease management
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.type | Composition.type | DocumentManifest.type | DocumentReference.type | Encounter.type | EpisodeOfCare.type`
 */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | AllergyIntoleranceSortOrder
      | AllergyIntoleranceSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type AppointmentSortOrder =
  | DomainResourceSortOrder
  | "actor"
  | "-actor"
  | "appointment-type"
  | "-appointment-type"
  | "based-on"
  | "-based-on"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "location"
  | "-location"
  | "part-status"
  | "-part-status"
  | "patient"
  | "-patient"
  | "practitioner"
  | "-practitioner"
  | "reason-code"
  | "-reason-code"
  | "reason-reference"
  | "-reason-reference"
  | "service-category"
  | "-service-category"
  | "service-type"
  | "-service-type"
  | "slot"
  | "-slot"
  | "specialty"
  | "-specialty"
  | "status"
  | "-status"
  | "supporting-info"
  | "-supporting-info";

export class AppointmentFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Appointment";

  /**
   * Any one of the individuals participating in the appointment
   * @fhirSearchType `reference`
   * @fhirPath `Appointment.participant.actor`
   */
  actor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("actor", ...args);
  }
  /**
   * The style of appointment or patient that has been booked in the slot (not
   * service type)
   * @fhirSearchType `token`
   * @fhirPath `Appointment.appointmentType`
   */
  appointmentType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("appointment-type", ...args);
  }
  /**
   * The service request this appointment is allocated to assess
   * @fhirSearchType `reference`
   * @fhirPath `Appointment.basedOn`
   */
  basedOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("based-on", ...args);
  }
  /**
   * Appointment date/time.
   * @fhirSearchType `date`
   * @fhirPath `Appointment.start`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * An Identifier of the Appointment
   * @fhirSearchType `token`
   * @fhirPath `Appointment.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * This location is listed in the participants of the appointment
   * @fhirSearchType `reference`
   * @fhirPath `Appointment.participant.actor.where(resolve() is Location)`
   */
  location(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("location", ...args);
  }
  /**
   * The Participation status of the subject, or other participant on the
   * appointment. Can be used to locate participants that have not responded to
   * meeting requests.
   * @fhirSearchType `token`
   * @fhirPath `Appointment.participant.status`
   */
  partStatus(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("part-status", ...args);
  }
  /**
   * One of the individuals of the appointment is this patient
   * @fhirSearchType `reference`
   * @fhirPath `Appointment.participant.actor.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * One of the individuals of the appointment is this practitioner
   * @fhirSearchType `reference`
   * @fhirPath `Appointment.participant.actor.where(resolve() is Practitioner)`
   */
  practitioner(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("practitioner", ...args);
  }
  /**
   * Coded reason this appointment is scheduled
   * @fhirSearchType `token`
   * @fhirPath `Appointment.reasonCode`
   */
  reasonCode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("reason-code", ...args);
  }
  /**
   * Reason the appointment is to take place (resource)
   * @fhirSearchType `reference`
   * @fhirPath `Appointment.reasonReference`
   */
  reasonReference(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("reason-reference", ...args);
  }
  /**
   * A broad categorization of the service that is to be performed during this
   * appointment
   * @fhirSearchType `token`
   * @fhirPath `Appointment.serviceCategory`
   */
  serviceCategory(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("service-category", ...args);
  }
  /**
   * The specific service that is to be performed during this appointment
   * @fhirSearchType `token`
   * @fhirPath `Appointment.serviceType`
   */
  serviceType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("service-type", ...args);
  }
  /**
   * The slots that this appointment is filling
   * @fhirSearchType `reference`
   * @fhirPath `Appointment.slot`
   */
  slot(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("slot", ...args);
  }
  /**
   * The specialty of a practitioner that would be required to perform the service
   * requested in this appointment
   * @fhirSearchType `token`
   * @fhirPath `Appointment.specialty`
   */
  specialty(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("specialty", ...args);
  }
  /**
   * The overall status of the appointment
   * @fhirSearchType `token`
   * @fhirPath `Appointment.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Additional information to support the appointment
   * @fhirSearchType `reference`
   * @fhirPath `Appointment.supportingInformation`
   */
  supportingInfo(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("supporting-info", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | AppointmentSortOrder
      | AppointmentSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type AppointmentResponseSortOrder =
  | DomainResourceSortOrder
  | "actor"
  | "-actor"
  | "appointment"
  | "-appointment"
  | "identifier"
  | "-identifier"
  | "location"
  | "-location"
  | "part-status"
  | "-part-status"
  | "patient"
  | "-patient"
  | "practitioner"
  | "-practitioner";

export class AppointmentResponseFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "AppointmentResponse";

  /**
   * The Person, Location/HealthcareService or Device that this appointment response
   * replies for
   * @fhirSearchType `reference`
   * @fhirPath `AppointmentResponse.actor`
   */
  actor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("actor", ...args);
  }
  /**
   * The appointment that the response is attached to
   * @fhirSearchType `reference`
   * @fhirPath `AppointmentResponse.appointment`
   */
  appointment(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("appointment", ...args);
  }
  /**
   * An Identifier in this appointment response
   * @fhirSearchType `token`
   * @fhirPath `AppointmentResponse.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * This Response is for this Location
   * @fhirSearchType `reference`
   * @fhirPath `AppointmentResponse.actor.where(resolve() is Location)`
   */
  location(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("location", ...args);
  }
  /**
   * The participants acceptance status for this appointment
   * @fhirSearchType `token`
   * @fhirPath `AppointmentResponse.participantStatus`
   */
  partStatus(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("part-status", ...args);
  }
  /**
   * This Response is for this Patient
   * @fhirSearchType `reference`
   * @fhirPath `AppointmentResponse.actor.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * This Response is for this Practitioner
   * @fhirSearchType `reference`
   * @fhirPath `AppointmentResponse.actor.where(resolve() is Practitioner)`
   */
  practitioner(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("practitioner", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | AppointmentResponseSortOrder
      | AppointmentResponseSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type AuditEventSortOrder =
  | DomainResourceSortOrder
  | "action"
  | "-action"
  | "address"
  | "-address"
  | "agent-name"
  | "-agent-name"
  | "agent-role"
  | "-agent-role"
  | "agent"
  | "-agent"
  | "altid"
  | "-altid"
  | "date"
  | "-date"
  | "entity-name"
  | "-entity-name"
  | "entity-role"
  | "-entity-role"
  | "entity-type"
  | "-entity-type"
  | "entity"
  | "-entity"
  | "outcome"
  | "-outcome"
  | "patient"
  | "-patient"
  | "policy"
  | "-policy"
  | "site"
  | "-site"
  | "source"
  | "-source"
  | "subtype"
  | "-subtype"
  | "type"
  | "-type";

export class AuditEventFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "AuditEvent";

  /**
   * Type of action performed during the event
   * @fhirSearchType `token`
   * @fhirPath `AuditEvent.action`
   */
  action(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("action", ...args);
  }
  /**
   * Identifier for the network access point of the user device
   * @fhirSearchType `string`
   * @fhirPath `AuditEvent.agent.network.address`
   */
  address(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address", ...args);
  }
  /**
   * Human friendly name for the agent
   * @fhirSearchType `string`
   * @fhirPath `AuditEvent.agent.name`
   */
  agentName(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("agent-name", ...args);
  }
  /**
   * Agent role in the event
   * @fhirSearchType `token`
   * @fhirPath `AuditEvent.agent.role`
   */
  agentRole(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("agent-role", ...args);
  }
  /**
   * Identifier of who
   * @fhirSearchType `reference`
   * @fhirPath `AuditEvent.agent.who`
   */
  agent(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("agent", ...args);
  }
  /**
   * Alternative User identity
   * @fhirSearchType `token`
   * @fhirPath `AuditEvent.agent.altId`
   */
  altid(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("altid", ...args);
  }
  /**
   * Time when the event was recorded
   * @fhirSearchType `date`
   * @fhirPath `AuditEvent.recorded`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * Descriptor for entity
   * @fhirSearchType `string`
   * @fhirPath `AuditEvent.entity.name`
   */
  entityName(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("entity-name", ...args);
  }
  /**
   * What role the entity played
   * @fhirSearchType `token`
   * @fhirPath `AuditEvent.entity.role`
   */
  entityRole(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("entity-role", ...args);
  }
  /**
   * Type of entity involved
   * @fhirSearchType `token`
   * @fhirPath `AuditEvent.entity.type`
   */
  entityType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("entity-type", ...args);
  }
  /**
   * Specific instance of resource
   * @fhirSearchType `reference`
   * @fhirPath `AuditEvent.entity.what`
   */
  entity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("entity", ...args);
  }
  /**
   * Whether the event succeeded or failed
   * @fhirSearchType `token`
   * @fhirPath `AuditEvent.outcome`
   */
  outcome(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("outcome", ...args);
  }
  /**
   * Identifier of who
   * @fhirSearchType `reference`
   * @fhirPath `AuditEvent.agent.who.where(resolve() is Patient) | AuditEvent.entity.what.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * Policy that authorized event
   * @fhirSearchType `uri`
   * @fhirPath `AuditEvent.agent.policy`
   */
  policy(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("policy", ...args);
  }
  /**
   * Logical source location within the enterprise
   * @fhirSearchType `token`
   * @fhirPath `AuditEvent.source.site`
   */
  site(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("site", ...args);
  }
  /**
   * The identity of source detecting the event
   * @fhirSearchType `reference`
   * @fhirPath `AuditEvent.source.observer`
   */
  source(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("source", ...args);
  }
  /**
   * More specific type/id for the event
   * @fhirSearchType `token`
   * @fhirPath `AuditEvent.subtype`
   */
  subtype(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("subtype", ...args);
  }
  /**
   * Type/identifier of event
   * @fhirSearchType `token`
   * @fhirPath `AuditEvent.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: AuditEventSortOrder | AuditEventSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type BasicSortOrder =
  | DomainResourceSortOrder
  | "author"
  | "-author"
  | "code"
  | "-code"
  | "created"
  | "-created"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "subject"
  | "-subject";

export class BasicFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Basic";

  /**
   * Who created
   * @fhirSearchType `reference`
   * @fhirPath `Basic.author`
   */
  author(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("author", ...args);
  }
  /**
   * Kind of Resource
   * @fhirSearchType `token`
   * @fhirPath `Basic.code`
   */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
   * When created
   * @fhirSearchType `date`
   * @fhirPath `Basic.created`
   */
  created(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("created", ...args);
  }
  /**
   * Business identifier
   * @fhirSearchType `token`
   * @fhirPath `Basic.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Identifies the focus of this resource
   * @fhirSearchType `reference`
   * @fhirPath `Basic.subject.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * Identifies the focus of this resource
   * @fhirSearchType `reference`
   * @fhirPath `Basic.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: BasicSortOrder | BasicSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type BinarySortOrder = ResourceSortOrder;

export class BinaryFhirSearchBuilder extends ResourceFhirSearchBuilder {
  readonly resourceType = "Binary";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: BinarySortOrder | BinarySortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type BiologicallyDerivedProductSortOrder = DomainResourceSortOrder;

export class BiologicallyDerivedProductFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "BiologicallyDerivedProduct";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | BiologicallyDerivedProductSortOrder
      | BiologicallyDerivedProductSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type BodyStructureSortOrder =
  | DomainResourceSortOrder
  | "identifier"
  | "-identifier"
  | "location"
  | "-location"
  | "morphology"
  | "-morphology"
  | "patient"
  | "-patient";

export class BodyStructureFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "BodyStructure";

  /**
   * Bodystructure identifier
   * @fhirSearchType `token`
   * @fhirPath `BodyStructure.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Body site
   * @fhirSearchType `token`
   * @fhirPath `BodyStructure.location`
   */
  location(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("location", ...args);
  }
  /**
   * Kind of Structure
   * @fhirSearchType `token`
   * @fhirPath `BodyStructure.morphology`
   */
  morphology(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("morphology", ...args);
  }
  /**
   * Who this is about
   * @fhirSearchType `reference`
   * @fhirPath `BodyStructure.patient`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | BodyStructureSortOrder
      | BodyStructureSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type BundleSortOrder =
  | ResourceSortOrder
  | "composition"
  | "-composition"
  | "identifier"
  | "-identifier"
  | "message"
  | "-message"
  | "timestamp"
  | "-timestamp"
  | "type"
  | "-type";

export class BundleFhirSearchBuilder extends ResourceFhirSearchBuilder {
  readonly resourceType = "Bundle";

  /**
   * The first resource in the bundle, if the bundle type is "document" - this is a
   * composition, and this parameter provides access to search its contents
   * @fhirSearchType `reference`
   * @fhirPath `Bundle.entry[0].resource`
   */
  composition(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("composition", ...args);
  }
  /**
   * Persistent identifier for the bundle
   * @fhirSearchType `token`
   * @fhirPath `Bundle.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The first resource in the bundle, if the bundle type is "message" - this is a
   * message header, and this parameter provides access to search its contents
   * @fhirSearchType `reference`
   * @fhirPath `Bundle.entry[0].resource`
   */
  message(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("message", ...args);
  }
  /**
   * When the bundle was assembled
   * @fhirSearchType `date`
   * @fhirPath `Bundle.timestamp`
   */
  timestamp(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("timestamp", ...args);
  }
  /**
   * document | message | transaction | transaction-response | batch | batch-response
   * | history | searchset | collection
   * @fhirSearchType `token`
   * @fhirPath `Bundle.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: BundleSortOrder | BundleSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type CapabilityStatementSortOrder =
  | DomainResourceSortOrder
  | "fhirversion"
  | "-fhirversion"
  | "format"
  | "-format"
  | "guide"
  | "-guide"
  | "mode"
  | "-mode"
  | "resource-profile"
  | "-resource-profile"
  | "resource"
  | "-resource"
  | "security-service"
  | "-security-service"
  | "software"
  | "-software"
  | "supported-profile"
  | "-supported-profile"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class CapabilityStatementFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "CapabilityStatement";

  /**
   * The version of FHIR
   * @fhirSearchType `token`
   * @fhirPath `CapabilityStatement.version`
   */
  fhirversion(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("fhirversion", ...args);
  }
  /**
   * formats supported (xml | json | ttl | mime type)
   * @fhirSearchType `token`
   * @fhirPath `CapabilityStatement.format`
   */
  format(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("format", ...args);
  }
  /**
   * Implementation guides supported
   * @fhirSearchType `reference`
   * @fhirPath `CapabilityStatement.implementationGuide`
   */
  guide(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("guide", ...args);
  }
  /**
   * Mode - restful (server/client) or messaging (sender/receiver)
   * @fhirSearchType `token`
   * @fhirPath `CapabilityStatement.rest.mode`
   */
  mode(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("mode", ...args);
  }
  /**
   * A profile id invoked in a capability statement
   * @fhirSearchType `reference`
   * @fhirPath `CapabilityStatement.rest.resource.profile`
   */
  resourceProfile(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("resource-profile", ...args);
  }
  /**
   * Name of a resource mentioned in a capability statement
   * @fhirSearchType `token`
   * @fhirPath `CapabilityStatement.rest.resource.type`
   */
  resource(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("resource", ...args);
  }
  /**
   * OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates
   * @fhirSearchType `token`
   * @fhirPath `CapabilityStatement.rest.security.service`
   */
  securityService(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("security-service", ...args);
  }
  /**
   * Part of the name of a software application
   * @fhirSearchType `string`
   * @fhirPath `CapabilityStatement.software.name`
   */
  software(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("software", ...args);
  }
  /**
   * Profiles for use cases supported
   * @fhirSearchType `reference`
   * @fhirPath `CapabilityStatement.rest.resource.supportedProfile`
   */
  supportedProfile(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("supported-profile", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * quantity- or range-valued use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned
 * to the code system
* [CompartmentDefinition](compartmentdefinition.html): A
 * quantity- or range-valued use context assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned
 * to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or
 * range-valued use context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use
 * context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A quantity- or range-valued use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use
 * context assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A quantity- or range-valued use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use
 * context assigned to the structure definition
*
 * [StructureMap](structuremap.html): A quantity- or range-valued use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or
 * range-valued use context assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to
 * the value set
 * @fhirSearchType `quantity`
 * @fhirPath `(CapabilityStatement.useContext.value as Quantity) | (CapabilityStatement.useContext.value as Range) | (CodeSystem.useContext.value as Quantity) | (CodeSystem.useContext.value as Range) | (CompartmentDefinition.useContext.value as Quantity) | (CompartmentDefinition.useContext.value as Range) | (ConceptMap.useContext.value as Quantity) | (ConceptMap.useContext.value as Range) | (GraphDefinition.useContext.value as Quantity) | (GraphDefinition.useContext.value as Range) | (ImplementationGuide.useContext.value as Quantity) | (ImplementationGuide.useContext.value as Range) | (MessageDefinition.useContext.value as Quantity) | (MessageDefinition.useContext.value as Range) | (NamingSystem.useContext.value as Quantity) | (NamingSystem.useContext.value as Range) | (OperationDefinition.useContext.value as Quantity) | (OperationDefinition.useContext.value as Range) | (SearchParameter.useContext.value as Quantity) | (SearchParameter.useContext.value as Range) | (StructureDefinition.useContext.value as Quantity) | (StructureDefinition.useContext.value as Range) | (StructureMap.useContext.value as Quantity) | (StructureMap.useContext.value as Range) | (TerminologyCapabilities.useContext.value as Quantity) | (TerminologyCapabilities.useContext.value as Range) | (ValueSet.useContext.value as Quantity) | (ValueSet.useContext.value as Range)`
 */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and quantity- or range-based value assigned to the capability
 * statement
* [CodeSystem](codesystem.html): A use context type and quantity- or
 * range-based value assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context type and
 * quantity- or range-based value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based
 * value assigned to the concept map
* [GraphDefinition](graphdefinition.html): A
 * use context type and quantity- or range-based value assigned to the graph
 * definition
* [ImplementationGuide](implementationguide.html): A use context
 * type and quantity- or range-based value assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and quantity- or
 * range-based value assigned to the message definition
*
 * [NamingSystem](namingsystem.html): A use context type and quantity- or
 * range-based value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and
 * quantity- or range-based value assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A use context type and quantity- or
 * range-based value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and
 * quantity- or range-based value assigned to the structure definition
*
 * [StructureMap](structuremap.html): A use context type and quantity- or
 * range-based value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * quantity- or range-based value assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A use context type and quantity- or range-based value
 * assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and value assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A use context type and value assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A use context
 * type and value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and value assigned to the
 * concept map
* [GraphDefinition](graphdefinition.html): A use context type and
 * value assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context type and value
 * assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and value
 * assigned to the message definition
* [NamingSystem](namingsystem.html): A use
 * context type and value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and value
 * assigned to the operation definition
* [SearchParameter](searchparameter.html):
 * A use context type and value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and value
 * assigned to the structure definition
* [StructureMap](structuremap.html): A use
 * context type and value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * value assigned to the terminology capabilities
* [ValueSet](valueset.html): A
 * use context type and value assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * type of use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A type of use context assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A type of use
 * context assigned to the compartment definition
* [ConceptMap](conceptmap.html):
 * A type of use context assigned to the concept map
*
 * [GraphDefinition](graphdefinition.html): A type of use context assigned to the
 * graph definition
* [ImplementationGuide](implementationguide.html): A type of
 * use context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A type of use context assigned to
 * the message definition
* [NamingSystem](namingsystem.html): A type of use
 * context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A type of use context assigned
 * to the operation definition
* [SearchParameter](searchparameter.html): A type
 * of use context assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A type of use context assigned
 * to the structure definition
* [StructureMap](structuremap.html): A type of use
 * context assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A type of use context
 * assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of
 * use context assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.useContext.code | CodeSystem.useContext.code | CompartmentDefinition.useContext.code | ConceptMap.useContext.code | GraphDefinition.useContext.code | ImplementationGuide.useContext.code | MessageDefinition.useContext.code | NamingSystem.useContext.code | OperationDefinition.useContext.code | SearchParameter.useContext.code | StructureDefinition.useContext.code | StructureMap.useContext.code | TerminologyCapabilities.useContext.code | ValueSet.useContext.code`
 */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context assigned to the capability statement
* [CodeSystem](codesystem.html): A
 * use context assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to
 * the compartment definition
* [ConceptMap](conceptmap.html): A use context
 * assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use
 * context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context assigned to the
 * implementation guide
* [MessageDefinition](messagedefinition.html): A use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context assigned to the
 * operation definition
* [SearchParameter](searchparameter.html): A use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context assigned to the
 * structure definition
* [StructureMap](structuremap.html): A use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned
 * to the terminology capabilities
* [ValueSet](valueset.html): A use context
 * assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `(CapabilityStatement.useContext.value as CodeableConcept) | (CodeSystem.useContext.value as CodeableConcept) | (CompartmentDefinition.useContext.value as CodeableConcept) | (ConceptMap.useContext.value as CodeableConcept) | (GraphDefinition.useContext.value as CodeableConcept) | (ImplementationGuide.useContext.value as CodeableConcept) | (MessageDefinition.useContext.value as CodeableConcept) | (NamingSystem.useContext.value as CodeableConcept) | (OperationDefinition.useContext.value as CodeableConcept) | (SearchParameter.useContext.value as CodeableConcept) | (StructureDefinition.useContext.value as CodeableConcept) | (StructureMap.useContext.value as CodeableConcept) | (TerminologyCapabilities.useContext.value as CodeableConcept) | (ValueSet.useContext.value as CodeableConcept)`
 */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * capability statement publication date
* [CodeSystem](codesystem.html): The code
 * system publication date
* [CompartmentDefinition](compartmentdefinition.html):
 * The compartment definition publication date
* [ConceptMap](conceptmap.html):
 * The concept map publication date
* [GraphDefinition](graphdefinition.html): The
 * graph definition publication date
*
 * [ImplementationGuide](implementationguide.html): The implementation guide
 * publication date
* [MessageDefinition](messagedefinition.html): The message
 * definition publication date
* [NamingSystem](namingsystem.html): The naming
 * system publication date
* [OperationDefinition](operationdefinition.html): The
 * operation definition publication date
*
 * [SearchParameter](searchparameter.html): The search parameter publication
 * date
* [StructureDefinition](structuredefinition.html): The structure
 * definition publication date
* [StructureMap](structuremap.html): The structure
 * map publication date
* [TerminologyCapabilities](terminologycapabilities.html):
 * The terminology capabilities publication date
* [ValueSet](valueset.html): The
 * value set publication date
 * @fhirSearchType `date`
 * @fhirPath `CapabilityStatement.date | CodeSystem.date | CompartmentDefinition.date | ConceptMap.date | GraphDefinition.date | ImplementationGuide.date | MessageDefinition.date | NamingSystem.date | OperationDefinition.date | SearchParameter.date | StructureDefinition.date | StructureMap.date | TerminologyCapabilities.date | ValueSet.date`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * description of the capability statement
* [CodeSystem](codesystem.html): The
 * description of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The description of the
 * compartment definition
* [ConceptMap](conceptmap.html): The description of the
 * concept map
* [GraphDefinition](graphdefinition.html): The description of the
 * graph definition
* [ImplementationGuide](implementationguide.html): The
 * description of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The description of the message
 * definition
* [NamingSystem](namingsystem.html): The description of the naming
 * system
* [OperationDefinition](operationdefinition.html): The description of
 * the operation definition
* [SearchParameter](searchparameter.html): The
 * description of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The description of the
 * structure definition
* [StructureMap](structuremap.html): The description of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The description of the terminology capabilities
* [ValueSet](valueset.html):
 * The description of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.description | CodeSystem.description | CompartmentDefinition.description | ConceptMap.description | GraphDefinition.description | ImplementationGuide.description | MessageDefinition.description | NamingSystem.description | OperationDefinition.description | SearchParameter.description | StructureDefinition.description | StructureMap.description | TerminologyCapabilities.description | ValueSet.description`
 */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Intended jurisdiction for the capability statement
*
 * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
*
 * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
*
 * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph
 * definition
* [ImplementationGuide](implementationguide.html): Intended
 * jurisdiction for the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the
 * message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction
 * for the naming system
* [OperationDefinition](operationdefinition.html):
 * Intended jurisdiction for the operation definition
*
 * [SearchParameter](searchparameter.html): Intended jurisdiction for the search
 * parameter
* [StructureDefinition](structuredefinition.html): Intended
 * jurisdiction for the structure definition
* [StructureMap](structuremap.html):
 * Intended jurisdiction for the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction
 * for the terminology capabilities
* [ValueSet](valueset.html): Intended
 * jurisdiction for the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.jurisdiction | CodeSystem.jurisdiction | ConceptMap.jurisdiction | GraphDefinition.jurisdiction | ImplementationGuide.jurisdiction | MessageDefinition.jurisdiction | NamingSystem.jurisdiction | OperationDefinition.jurisdiction | SearchParameter.jurisdiction | StructureDefinition.jurisdiction | StructureMap.jurisdiction | TerminologyCapabilities.jurisdiction | ValueSet.jurisdiction`
 */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Computationally friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): Computationally friendly name of the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): Computationally
 * friendly name of the compartment definition
* [ConceptMap](conceptmap.html):
 * Computationally friendly name of the concept map
*
 * [GraphDefinition](graphdefinition.html): Computationally friendly name of the
 * graph definition
* [ImplementationGuide](implementationguide.html):
 * Computationally friendly name of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Computationally friendly name of
 * the message definition
* [NamingSystem](namingsystem.html): Computationally
 * friendly name of the naming system
*
 * [OperationDefinition](operationdefinition.html): Computationally friendly name
 * of the operation definition
* [SearchParameter](searchparameter.html):
 * Computationally friendly name of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Computationally friendly name
 * of the structure definition
* [StructureMap](structuremap.html):
 * Computationally friendly name of the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Computationally
 * friendly name of the terminology capabilities
* [ValueSet](valueset.html):
 * Computationally friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.name | CodeSystem.name | CompartmentDefinition.name | ConceptMap.name | GraphDefinition.name | ImplementationGuide.name | MessageDefinition.name | NamingSystem.name | OperationDefinition.name | SearchParameter.name | StructureDefinition.name | StructureMap.name | TerminologyCapabilities.name | ValueSet.name`
 */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name
 * of the publisher of the capability statement
* [CodeSystem](codesystem.html):
 * Name of the publisher of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of
 * the compartment definition
* [ConceptMap](conceptmap.html): Name of the
 * publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of
 * the publisher of the graph definition
*
 * [ImplementationGuide](implementationguide.html): Name of the publisher of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): Name of the
 * publisher of the message definition
* [NamingSystem](namingsystem.html): Name
 * of the publisher of the naming system
*
 * [OperationDefinition](operationdefinition.html): Name of the publisher of the
 * operation definition
* [SearchParameter](searchparameter.html): Name of the
 * publisher of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Name of the publisher of the
 * structure definition
* [StructureMap](structuremap.html): Name of the publisher
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * Name of the publisher of the terminology capabilities
*
 * [ValueSet](valueset.html): Name of the publisher of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.publisher | CodeSystem.publisher | CompartmentDefinition.publisher | ConceptMap.publisher | GraphDefinition.publisher | ImplementationGuide.publisher | MessageDefinition.publisher | NamingSystem.publisher | OperationDefinition.publisher | SearchParameter.publisher | StructureDefinition.publisher | StructureMap.publisher | TerminologyCapabilities.publisher | ValueSet.publisher`
 */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * current status of the capability statement
* [CodeSystem](codesystem.html): The
 * current status of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The current status of the
 * compartment definition
* [ConceptMap](conceptmap.html): The current status of
 * the concept map
* [GraphDefinition](graphdefinition.html): The current status
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * current status of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The current status of the message
 * definition
* [NamingSystem](namingsystem.html): The current status of the
 * naming system
* [OperationDefinition](operationdefinition.html): The current
 * status of the operation definition
* [SearchParameter](searchparameter.html):
 * The current status of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The current status of the
 * structure definition
* [StructureMap](structuremap.html): The current status of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The current status of the terminology capabilities
* [ValueSet](valueset.html):
 * The current status of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.status | CodeSystem.status | CompartmentDefinition.status | ConceptMap.status | GraphDefinition.status | ImplementationGuide.status | MessageDefinition.status | NamingSystem.status | OperationDefinition.status | SearchParameter.status | StructureDefinition.status | StructureMap.status | TerminologyCapabilities.status | ValueSet.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * human-friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): The human-friendly name of the code system
*
 * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
*
 * [ImplementationGuide](implementationguide.html): The human-friendly name of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The
 * human-friendly name of the message definition
*
 * [OperationDefinition](operationdefinition.html): The human-friendly name of the
 * operation definition
* [StructureDefinition](structuredefinition.html): The
 * human-friendly name of the structure definition
*
 * [StructureMap](structuremap.html): The human-friendly name of the structure
 * map
* [TerminologyCapabilities](terminologycapabilities.html): The
 * human-friendly name of the terminology capabilities
*
 * [ValueSet](valueset.html): The human-friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.title | CodeSystem.title | ConceptMap.title | ImplementationGuide.title | MessageDefinition.title | OperationDefinition.title | StructureDefinition.title | StructureMap.title | TerminologyCapabilities.title | ValueSet.title`
 */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * uri that identifies the capability statement
* [CodeSystem](codesystem.html):
 * The uri that identifies the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the
 * compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies
 * the concept map
* [GraphDefinition](graphdefinition.html): The uri that
 * identifies the graph definition
*
 * [ImplementationGuide](implementationguide.html): The uri that identifies the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The uri
 * that identifies the message definition
*
 * [OperationDefinition](operationdefinition.html): The uri that identifies the
 * operation definition
* [SearchParameter](searchparameter.html): The uri that
 * identifies the search parameter
*
 * [StructureDefinition](structuredefinition.html): The uri that identifies the
 * structure definition
* [StructureMap](structuremap.html): The uri that
 * identifies the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies
 * the terminology capabilities
* [ValueSet](valueset.html): The uri that
 * identifies the value set
 * @fhirSearchType `uri`
 * @fhirPath `CapabilityStatement.url | CodeSystem.url | CompartmentDefinition.url | ConceptMap.url | GraphDefinition.url | ImplementationGuide.url | MessageDefinition.url | OperationDefinition.url | SearchParameter.url | StructureDefinition.url | StructureMap.url | TerminologyCapabilities.url | ValueSet.url`
 */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * business version of the capability statement
* [CodeSystem](codesystem.html):
 * The business version of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The business version of the
 * compartment definition
* [ConceptMap](conceptmap.html): The business version of
 * the concept map
* [GraphDefinition](graphdefinition.html): The business version
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * business version of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The business version of the message
 * definition
* [OperationDefinition](operationdefinition.html): The business
 * version of the operation definition
* [SearchParameter](searchparameter.html):
 * The business version of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The business version of the
 * structure definition
* [StructureMap](structuremap.html): The business version
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The business version of the terminology capabilities
*
 * [ValueSet](valueset.html): The business version of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.version | CodeSystem.version | CompartmentDefinition.version | ConceptMap.version | GraphDefinition.version | ImplementationGuide.version | MessageDefinition.version | OperationDefinition.version | SearchParameter.version | StructureDefinition.version | StructureMap.version | TerminologyCapabilities.version | ValueSet.version`
 */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | CapabilityStatementSortOrder
      | CapabilityStatementSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type CarePlanSortOrder =
  | DomainResourceSortOrder
  | "activity-code"
  | "-activity-code"
  | "activity-date"
  | "-activity-date"
  | "activity-reference"
  | "-activity-reference"
  | "based-on"
  | "-based-on"
  | "care-team"
  | "-care-team"
  | "category"
  | "-category"
  | "condition"
  | "-condition"
  | "encounter"
  | "-encounter"
  | "goal"
  | "-goal"
  | "instantiates-canonical"
  | "-instantiates-canonical"
  | "instantiates-uri"
  | "-instantiates-uri"
  | "intent"
  | "-intent"
  | "part-of"
  | "-part-of"
  | "performer"
  | "-performer"
  | "replaces"
  | "-replaces"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class CarePlanFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "CarePlan";

  /**
   * Detail type of activity
   * @fhirSearchType `token`
   * @fhirPath `CarePlan.activity.detail.code`
   */
  activityCode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("activity-code", ...args);
  }
  /**
   * Specified date occurs within period specified by
   * CarePlan.activity.detail.scheduled[x]
   * @fhirSearchType `date`
   * @fhirPath `CarePlan.activity.detail.scheduled`
   */
  activityDate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("activity-date", ...args);
  }
  /**
   * Activity details defined in specific resource
   * @fhirSearchType `reference`
   * @fhirPath `CarePlan.activity.reference`
   */
  activityReference(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("activity-reference", ...args);
  }
  /**
   * Fulfills CarePlan
   * @fhirSearchType `reference`
   * @fhirPath `CarePlan.basedOn`
   */
  basedOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("based-on", ...args);
  }
  /**
   * Who's involved in plan?
   * @fhirSearchType `reference`
   * @fhirPath `CarePlan.careTeam`
   */
  careTeam(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("care-team", ...args);
  }
  /**
   * Type of plan
   * @fhirSearchType `token`
   * @fhirPath `CarePlan.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * Health issues this plan addresses
   * @fhirSearchType `reference`
   * @fhirPath `CarePlan.addresses`
   */
  condition(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("condition", ...args);
  }
  /**
   * Encounter created as part of
   * @fhirSearchType `reference`
   * @fhirPath `CarePlan.encounter`
   */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
   * Desired outcome of plan
   * @fhirSearchType `reference`
   * @fhirPath `CarePlan.goal`
   */
  goal(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("goal", ...args);
  }
  /**
   * Instantiates FHIR protocol or definition
   * @fhirSearchType `reference`
   * @fhirPath `CarePlan.instantiatesCanonical`
   */
  instantiatesCanonical(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("instantiates-canonical", ...args);
  }
  /**
   * Instantiates external protocol or definition
   * @fhirSearchType `uri`
   * @fhirPath `CarePlan.instantiatesUri`
   */
  instantiatesUri(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("instantiates-uri", ...args);
  }
  /**
   * proposal | plan | order | option
   * @fhirSearchType `token`
   * @fhirPath `CarePlan.intent`
   */
  intent(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("intent", ...args);
  }
  /**
   * Part of referenced CarePlan
   * @fhirSearchType `reference`
   * @fhirPath `CarePlan.partOf`
   */
  partOf(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("part-of", ...args);
  }
  /**
   * Matches if the practitioner is listed as a performer in any of the "simple"
   * activities.  (For performers of the detailed activities, chain through the
   * activitydetail search parameter.)
   * @fhirSearchType `reference`
   * @fhirPath `CarePlan.activity.detail.performer`
   */
  performer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("performer", ...args);
  }
  /**
   * CarePlan replaced by this CarePlan
   * @fhirSearchType `reference`
   * @fhirPath `CarePlan.replaces`
   */
  replaces(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("replaces", ...args);
  }
  /**
   * draft | active | on-hold | revoked | completed | entered-in-error | unknown
   * @fhirSearchType `token`
   * @fhirPath `CarePlan.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Who the care plan is for
   * @fhirSearchType `reference`
   * @fhirPath `CarePlan.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date
 * first version of the resource instance was recorded
*
 * [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html):
 * Time period team covers
* [ClinicalImpression](clinicalimpression.html): When
 * the assessment was documented
* [Composition](composition.html): Composition
 * editing time
* [Consent](consent.html): When this Consent was created or
 * indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant
 * time of the report
* [Encounter](encounter.html): A date within the period the
 * Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date
 * search value falls within the episode of care's period
*
 * [FamilyMemberHistory](familymemberhistory.html): When history was recorded or
 * last updated
* [Flag](flag.html): Time period when flag is active
*
 * [Immunization](immunization.html): Vaccination  (non)-Administration Date
*
 * [List](list.html): When the list was prepared
*
 * [Observation](observation.html): Obtained date/time. If the obtained element is
 * a period, a date that falls in the period
* [Procedure](procedure.html): When
 * the procedure was performed
* [RiskAssessment](riskassessment.html): When was
 * assessment made?
* [SupplyRequest](supplyrequest.html): When the request was
 * made
 * @fhirSearchType `date`
 * @fhirPath `AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: CarePlanSortOrder | CarePlanSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type CareTeamSortOrder =
  | DomainResourceSortOrder
  | "category"
  | "-category"
  | "encounter"
  | "-encounter"
  | "participant"
  | "-participant"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class CareTeamFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "CareTeam";

  /**
   * Type of team
   * @fhirSearchType `token`
   * @fhirPath `CareTeam.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * Encounter created as part of
   * @fhirSearchType `reference`
   * @fhirPath `CareTeam.encounter`
   */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
   * Who is involved
   * @fhirSearchType `reference`
   * @fhirPath `CareTeam.participant.member`
   */
  participant(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("participant", ...args);
  }
  /**
   * proposed | active | suspended | inactive | entered-in-error
   * @fhirSearchType `token`
   * @fhirPath `CareTeam.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Who care team is for
   * @fhirSearchType `reference`
   * @fhirPath `CareTeam.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date
 * first version of the resource instance was recorded
*
 * [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html):
 * Time period team covers
* [ClinicalImpression](clinicalimpression.html): When
 * the assessment was documented
* [Composition](composition.html): Composition
 * editing time
* [Consent](consent.html): When this Consent was created or
 * indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant
 * time of the report
* [Encounter](encounter.html): A date within the period the
 * Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date
 * search value falls within the episode of care's period
*
 * [FamilyMemberHistory](familymemberhistory.html): When history was recorded or
 * last updated
* [Flag](flag.html): Time period when flag is active
*
 * [Immunization](immunization.html): Vaccination  (non)-Administration Date
*
 * [List](list.html): When the list was prepared
*
 * [Observation](observation.html): Obtained date/time. If the obtained element is
 * a period, a date that falls in the period
* [Procedure](procedure.html): When
 * the procedure was performed
* [RiskAssessment](riskassessment.html): When was
 * assessment made?
* [SupplyRequest](supplyrequest.html): When the request was
 * made
 * @fhirSearchType `date`
 * @fhirPath `AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: CareTeamSortOrder | CareTeamSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type CatalogEntrySortOrder = DomainResourceSortOrder;

export class CatalogEntryFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "CatalogEntry";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | CatalogEntrySortOrder
      | CatalogEntrySortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ChargeItemSortOrder =
  | DomainResourceSortOrder
  | "account"
  | "-account"
  | "code"
  | "-code"
  | "context"
  | "-context"
  | "entered-date"
  | "-entered-date"
  | "enterer"
  | "-enterer"
  | "factor-override"
  | "-factor-override"
  | "identifier"
  | "-identifier"
  | "occurrence"
  | "-occurrence"
  | "patient"
  | "-patient"
  | "performer-actor"
  | "-performer-actor"
  | "performer-function"
  | "-performer-function"
  | "performing-organization"
  | "-performing-organization"
  | "price-override"
  | "-price-override"
  | "quantity"
  | "-quantity"
  | "requesting-organization"
  | "-requesting-organization"
  | "service"
  | "-service"
  | "subject"
  | "-subject";

export class ChargeItemFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ChargeItem";

  /**
   * Account to place this charge
   * @fhirSearchType `reference`
   * @fhirPath `ChargeItem.account`
   */
  account(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("account", ...args);
  }
  /**
   * A code that identifies the charge, like a billing code
   * @fhirSearchType `token`
   * @fhirPath `ChargeItem.code`
   */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
   * Encounter / Episode associated with event
   * @fhirSearchType `reference`
   * @fhirPath `ChargeItem.context`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("context", ...args);
  }
  /**
   * Date the charge item was entered
   * @fhirSearchType `date`
   * @fhirPath `ChargeItem.enteredDate`
   */
  enteredDate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("entered-date", ...args);
  }
  /**
   * Individual who was entering
   * @fhirSearchType `reference`
   * @fhirPath `ChargeItem.enterer`
   */
  enterer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("enterer", ...args);
  }
  /**
   * Factor overriding the associated rules
   * @fhirSearchType `number`
   * @fhirPath `ChargeItem.factorOverride`
   */
  factorOverride(
    ...args: DropFirst<Parameters<FhirSearchBuilder["numberParam"]>>
  ): this {
    return this.numberParam("factor-override", ...args);
  }
  /**
   * Business Identifier for item
   * @fhirSearchType `token`
   * @fhirPath `ChargeItem.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * When the charged service was applied
   * @fhirSearchType `date`
   * @fhirPath `ChargeItem.occurrence`
   */
  occurrence(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("occurrence", ...args);
  }
  /**
   * Individual service was done for/to
   * @fhirSearchType `reference`
   * @fhirPath `ChargeItem.subject.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * Individual who was performing
   * @fhirSearchType `reference`
   * @fhirPath `ChargeItem.performer.actor`
   */
  performerActor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("performer-actor", ...args);
  }
  /**
   * What type of performance was done
   * @fhirSearchType `token`
   * @fhirPath `ChargeItem.performer.function`
   */
  performerFunction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("performer-function", ...args);
  }
  /**
   * Organization providing the charged service
   * @fhirSearchType `reference`
   * @fhirPath `ChargeItem.performingOrganization`
   */
  performingOrganization(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("performing-organization", ...args);
  }
  /**
   * Price overriding the associated rules
   * @fhirSearchType `quantity`
   * @fhirPath `ChargeItem.priceOverride`
   */
  priceOverride(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("price-override", ...args);
  }
  /**
   * Quantity of which the charge item has been serviced
   * @fhirSearchType `quantity`
   * @fhirPath `ChargeItem.quantity`
   */
  quantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("quantity", ...args);
  }
  /**
   * Organization requesting the charged service
   * @fhirSearchType `reference`
   * @fhirPath `ChargeItem.requestingOrganization`
   */
  requestingOrganization(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("requesting-organization", ...args);
  }
  /**
   * Which rendered service is being charged?
   * @fhirSearchType `reference`
   * @fhirPath `ChargeItem.service`
   */
  service(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("service", ...args);
  }
  /**
   * Individual service was done for/to
   * @fhirSearchType `reference`
   * @fhirPath `ChargeItem.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: ChargeItemSortOrder | ChargeItemSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ChargeItemDefinitionSortOrder =
  | DomainResourceSortOrder
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class ChargeItemDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ChargeItemDefinition";

  /**
   * A quantity- or range-valued use context assigned to the charge item definition
   * @fhirSearchType `quantity`
   * @fhirPath `(ChargeItemDefinition.useContext.value as Quantity) | (ChargeItemDefinition.useContext.value as Range)`
   */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
   * A use context type and quantity- or range-based value assigned to the charge
   * item definition
   * @fhirSearchType `composite`
   * @fhirPath `ChargeItemDefinition.useContext`
   */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
   * A use context type and value assigned to the charge item definition
   * @fhirSearchType `composite`
   * @fhirPath `ChargeItemDefinition.useContext`
   */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
   * A type of use context assigned to the charge item definition
   * @fhirSearchType `token`
   * @fhirPath `ChargeItemDefinition.useContext.code`
   */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
   * A use context assigned to the charge item definition
   * @fhirSearchType `token`
   * @fhirPath `(ChargeItemDefinition.useContext.value as CodeableConcept)`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
   * The charge item definition publication date
   * @fhirSearchType `date`
   * @fhirPath `ChargeItemDefinition.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * The description of the charge item definition
   * @fhirSearchType `string`
   * @fhirPath `ChargeItemDefinition.description`
   */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
   * The time during which the charge item definition is intended to be in use
   * @fhirSearchType `date`
   * @fhirPath `ChargeItemDefinition.effectivePeriod`
   */
  effective(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("effective", ...args);
  }
  /**
   * External identifier for the charge item definition
   * @fhirSearchType `token`
   * @fhirPath `ChargeItemDefinition.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Intended jurisdiction for the charge item definition
   * @fhirSearchType `token`
   * @fhirPath `ChargeItemDefinition.jurisdiction`
   */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
   * Name of the publisher of the charge item definition
   * @fhirSearchType `string`
   * @fhirPath `ChargeItemDefinition.publisher`
   */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
   * The current status of the charge item definition
   * @fhirSearchType `token`
   * @fhirPath `ChargeItemDefinition.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The human-friendly name of the charge item definition
   * @fhirSearchType `string`
   * @fhirPath `ChargeItemDefinition.title`
   */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
   * The uri that identifies the charge item definition
   * @fhirSearchType `uri`
   * @fhirPath `ChargeItemDefinition.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
   * The business version of the charge item definition
   * @fhirSearchType `token`
   * @fhirPath `ChargeItemDefinition.version`
   */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ChargeItemDefinitionSortOrder
      | ChargeItemDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type CitationSortOrder =
  | DomainResourceSortOrder
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class CitationFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Citation";

  /**
   * A quantity- or range-valued use context assigned to the citation
   * @fhirSearchType `quantity`
   * @fhirPath `(Citation.useContext.value as Quantity) | (Citation.useContext.value as Range)`
   */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
   * A use context type and quantity- or range-based value assigned to the citation
   * @fhirSearchType `composite`
   * @fhirPath `Citation.useContext`
   */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
   * A use context type and value assigned to the citation
   * @fhirSearchType `composite`
   * @fhirPath `Citation.useContext`
   */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
   * A type of use context assigned to the citation
   * @fhirSearchType `token`
   * @fhirPath `Citation.useContext.code`
   */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
   * A use context assigned to the citation
   * @fhirSearchType `token`
   * @fhirPath `(Citation.useContext.value as CodeableConcept)`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
   * The citation publication date
   * @fhirSearchType `date`
   * @fhirPath `Citation.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * The description of the citation
   * @fhirSearchType `string`
   * @fhirPath `Citation.description`
   */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
   * The time during which the citation is intended to be in use
   * @fhirSearchType `date`
   * @fhirPath `Citation.effectivePeriod`
   */
  effective(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("effective", ...args);
  }
  /**
   * External identifier for the citation
   * @fhirSearchType `token`
   * @fhirPath `Citation.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Intended jurisdiction for the citation
   * @fhirSearchType `token`
   * @fhirPath `Citation.jurisdiction`
   */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
   * Computationally friendly name of the citation
   * @fhirSearchType `string`
   * @fhirPath `Citation.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * Name of the publisher of the citation
   * @fhirSearchType `string`
   * @fhirPath `Citation.publisher`
   */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
   * The current status of the citation
   * @fhirSearchType `token`
   * @fhirPath `Citation.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The human-friendly name of the citation
   * @fhirSearchType `string`
   * @fhirPath `Citation.title`
   */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
   * The uri that identifies the citation
   * @fhirSearchType `uri`
   * @fhirPath `Citation.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
   * The business version of the citation
   * @fhirSearchType `token`
   * @fhirPath `Citation.version`
   */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: CitationSortOrder | CitationSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ClaimSortOrder =
  | DomainResourceSortOrder
  | "care-team"
  | "-care-team"
  | "created"
  | "-created"
  | "detail-udi"
  | "-detail-udi"
  | "encounter"
  | "-encounter"
  | "enterer"
  | "-enterer"
  | "facility"
  | "-facility"
  | "identifier"
  | "-identifier"
  | "insurer"
  | "-insurer"
  | "item-udi"
  | "-item-udi"
  | "patient"
  | "-patient"
  | "payee"
  | "-payee"
  | "priority"
  | "-priority"
  | "procedure-udi"
  | "-procedure-udi"
  | "provider"
  | "-provider"
  | "status"
  | "-status"
  | "subdetail-udi"
  | "-subdetail-udi"
  | "use"
  | "-use";

export class ClaimFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Claim";

  /**
   * Member of the CareTeam
   * @fhirSearchType `reference`
   * @fhirPath `Claim.careTeam.provider`
   */
  careTeam(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("care-team", ...args);
  }
  /**
   * The creation date for the Claim
   * @fhirSearchType `date`
   * @fhirPath `Claim.created`
   */
  created(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("created", ...args);
  }
  /**
   * UDI associated with a line item, detail product or service
   * @fhirSearchType `reference`
   * @fhirPath `Claim.item.detail.udi`
   */
  detailUdi(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("detail-udi", ...args);
  }
  /**
   * Encounters associated with a billed line item
   * @fhirSearchType `reference`
   * @fhirPath `Claim.item.encounter`
   */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
   * The party responsible for the entry of the Claim
   * @fhirSearchType `reference`
   * @fhirPath `Claim.enterer`
   */
  enterer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("enterer", ...args);
  }
  /**
   * Facility where the products or services have been or will be provided
   * @fhirSearchType `reference`
   * @fhirPath `Claim.facility`
   */
  facility(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("facility", ...args);
  }
  /**
   * The primary identifier of the financial resource
   * @fhirSearchType `token`
   * @fhirPath `Claim.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The target payor/insurer for the Claim
   * @fhirSearchType `reference`
   * @fhirPath `Claim.insurer`
   */
  insurer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("insurer", ...args);
  }
  /**
   * UDI associated with a line item product or service
   * @fhirSearchType `reference`
   * @fhirPath `Claim.item.udi`
   */
  itemUdi(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("item-udi", ...args);
  }
  /**
   * Patient receiving the products or services
   * @fhirSearchType `reference`
   * @fhirPath `Claim.patient`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * The party receiving any payment for the Claim
   * @fhirSearchType `reference`
   * @fhirPath `Claim.payee.party`
   */
  payee(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("payee", ...args);
  }
  /**
   * Processing priority requested
   * @fhirSearchType `token`
   * @fhirPath `Claim.priority`
   */
  priority(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("priority", ...args);
  }
  /**
   * UDI associated with a procedure
   * @fhirSearchType `reference`
   * @fhirPath `Claim.procedure.udi`
   */
  procedureUdi(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("procedure-udi", ...args);
  }
  /**
   * Provider responsible for the Claim
   * @fhirSearchType `reference`
   * @fhirPath `Claim.provider`
   */
  provider(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("provider", ...args);
  }
  /**
   * The status of the Claim instance.
   * @fhirSearchType `token`
   * @fhirPath `Claim.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * UDI associated with a line item, detail, subdetail product or service
   * @fhirSearchType `reference`
   * @fhirPath `Claim.item.detail.subDetail.udi`
   */
  subdetailUdi(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subdetail-udi", ...args);
  }
  /**
   * The kind of financial resource
   * @fhirSearchType `token`
   * @fhirPath `Claim.use`
   */
  use(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("use", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: ClaimSortOrder | ClaimSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ClaimResponseSortOrder =
  | DomainResourceSortOrder
  | "created"
  | "-created"
  | "disposition"
  | "-disposition"
  | "identifier"
  | "-identifier"
  | "insurer"
  | "-insurer"
  | "outcome"
  | "-outcome"
  | "patient"
  | "-patient"
  | "payment-date"
  | "-payment-date"
  | "request"
  | "-request"
  | "requestor"
  | "-requestor"
  | "status"
  | "-status"
  | "use"
  | "-use";

export class ClaimResponseFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ClaimResponse";

  /**
   * The creation date
   * @fhirSearchType `date`
   * @fhirPath `ClaimResponse.created`
   */
  created(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("created", ...args);
  }
  /**
   * The contents of the disposition message
   * @fhirSearchType `string`
   * @fhirPath `ClaimResponse.disposition`
   */
  disposition(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("disposition", ...args);
  }
  /**
   * The identity of the ClaimResponse
   * @fhirSearchType `token`
   * @fhirPath `ClaimResponse.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The organization which generated this resource
   * @fhirSearchType `reference`
   * @fhirPath `ClaimResponse.insurer`
   */
  insurer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("insurer", ...args);
  }
  /**
   * The processing outcome
   * @fhirSearchType `token`
   * @fhirPath `ClaimResponse.outcome`
   */
  outcome(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("outcome", ...args);
  }
  /**
   * The subject of care
   * @fhirSearchType `reference`
   * @fhirPath `ClaimResponse.patient`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * The expected payment date
   * @fhirSearchType `date`
   * @fhirPath `ClaimResponse.payment.date`
   */
  paymentDate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("payment-date", ...args);
  }
  /**
   * The claim reference
   * @fhirSearchType `reference`
   * @fhirPath `ClaimResponse.request`
   */
  request(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("request", ...args);
  }
  /**
   * The Provider of the claim
   * @fhirSearchType `reference`
   * @fhirPath `ClaimResponse.requestor`
   */
  requestor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("requestor", ...args);
  }
  /**
   * The status of the ClaimResponse
   * @fhirSearchType `token`
   * @fhirPath `ClaimResponse.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The type of claim
   * @fhirSearchType `token`
   * @fhirPath `ClaimResponse.use`
   */
  use(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("use", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ClaimResponseSortOrder
      | ClaimResponseSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ClinicalImpressionSortOrder =
  | DomainResourceSortOrder
  | "assessor"
  | "-assessor"
  | "encounter"
  | "-encounter"
  | "finding-code"
  | "-finding-code"
  | "finding-ref"
  | "-finding-ref"
  | "identifier"
  | "-identifier"
  | "investigation"
  | "-investigation"
  | "previous"
  | "-previous"
  | "problem"
  | "-problem"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "supporting-info"
  | "-supporting-info"
  | "date"
  | "-date"
  | "patient"
  | "-patient";

export class ClinicalImpressionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ClinicalImpression";

  /**
   * The clinician performing the assessment
   * @fhirSearchType `reference`
   * @fhirPath `ClinicalImpression.assessor`
   */
  assessor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("assessor", ...args);
  }
  /**
   * Encounter created as part of
   * @fhirSearchType `reference`
   * @fhirPath `ClinicalImpression.encounter`
   */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
   * What was found
   * @fhirSearchType `token`
   * @fhirPath `ClinicalImpression.finding.itemCodeableConcept`
   */
  findingCode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("finding-code", ...args);
  }
  /**
   * What was found
   * @fhirSearchType `reference`
   * @fhirPath `ClinicalImpression.finding.itemReference`
   */
  findingRef(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("finding-ref", ...args);
  }
  /**
   * Business identifier
   * @fhirSearchType `token`
   * @fhirPath `ClinicalImpression.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Record of a specific investigation
   * @fhirSearchType `reference`
   * @fhirPath `ClinicalImpression.investigation.item`
   */
  investigation(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("investigation", ...args);
  }
  /**
   * Reference to last assessment
   * @fhirSearchType `reference`
   * @fhirPath `ClinicalImpression.previous`
   */
  previous(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("previous", ...args);
  }
  /**
   * Relevant impressions of patient state
   * @fhirSearchType `reference`
   * @fhirPath `ClinicalImpression.problem`
   */
  problem(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("problem", ...args);
  }
  /**
   * in-progress | completed | entered-in-error
   * @fhirSearchType `token`
   * @fhirPath `ClinicalImpression.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Patient or group assessed
   * @fhirSearchType `reference`
   * @fhirPath `ClinicalImpression.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
   * Information supporting the clinical impression
   * @fhirSearchType `reference`
   * @fhirPath `ClinicalImpression.supportingInfo`
   */
  supportingInfo(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("supporting-info", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date
 * first version of the resource instance was recorded
*
 * [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html):
 * Time period team covers
* [ClinicalImpression](clinicalimpression.html): When
 * the assessment was documented
* [Composition](composition.html): Composition
 * editing time
* [Consent](consent.html): When this Consent was created or
 * indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant
 * time of the report
* [Encounter](encounter.html): A date within the period the
 * Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date
 * search value falls within the episode of care's period
*
 * [FamilyMemberHistory](familymemberhistory.html): When history was recorded or
 * last updated
* [Flag](flag.html): Time period when flag is active
*
 * [Immunization](immunization.html): Vaccination  (non)-Administration Date
*
 * [List](list.html): When the list was prepared
*
 * [Observation](observation.html): Obtained date/time. If the obtained element is
 * a period, a date that falls in the period
* [Procedure](procedure.html): When
 * the procedure was performed
* [RiskAssessment](riskassessment.html): When was
 * assessment made?
* [SupplyRequest](supplyrequest.html): When the request was
 * made
 * @fhirSearchType `date`
 * @fhirPath `AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ClinicalImpressionSortOrder
      | ClinicalImpressionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ClinicalUseDefinitionSortOrder =
  | DomainResourceSortOrder
  | "contraindication-reference"
  | "-contraindication-reference"
  | "contraindication"
  | "-contraindication"
  | "effect-reference"
  | "-effect-reference"
  | "effect"
  | "-effect"
  | "identifier"
  | "-identifier"
  | "indication-reference"
  | "-indication-reference"
  | "indication"
  | "-indication"
  | "interaction"
  | "-interaction"
  | "product"
  | "-product"
  | "subject"
  | "-subject"
  | "type"
  | "-type";

export class ClinicalUseDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ClinicalUseDefinition";

  /**
   * The situation that is being documented as contraindicating against this item, as
   * a reference
   * @fhirSearchType `reference`
   * @fhirPath `ClinicalUseDefinition.contraindication.diseaseSymptomProcedure`
   */
  contraindicationReference(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("contraindication-reference", ...args);
  }
  /**
   * The situation that is being documented as contraindicating against this item, as
   * a code
   * @fhirSearchType `token`
   * @fhirPath `ClinicalUseDefinition.contraindication.diseaseSymptomProcedure`
   */
  contraindication(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("contraindication", ...args);
  }
  /**
   * The situation in which the undesirable effect may manifest, as a reference
   * @fhirSearchType `reference`
   * @fhirPath `ClinicalUseDefinition.undesirableEffect.symptomConditionEffect`
   */
  effectReference(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("effect-reference", ...args);
  }
  /**
   * The situation in which the undesirable effect may manifest, as a code
   * @fhirSearchType `token`
   * @fhirPath `ClinicalUseDefinition.undesirableEffect.symptomConditionEffect`
   */
  effect(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("effect", ...args);
  }
  /**
   * Business identifier for this issue
   * @fhirSearchType `token`
   * @fhirPath `ClinicalUseDefinition.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The situation that is being documented as an indicaton for this item, as a
   * reference
   * @fhirSearchType `reference`
   * @fhirPath `ClinicalUseDefinition.indication.diseaseSymptomProcedure`
   */
  indicationReference(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("indication-reference", ...args);
  }
  /**
   * The situation that is being documented as an indicaton for this item, as a code
   * @fhirSearchType `token`
   * @fhirPath `ClinicalUseDefinition.indication.diseaseSymptomProcedure`
   */
  indication(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("indication", ...args);
  }
  /**
   * The type of the interaction e.g. drug-drug interaction, drug-food interaction,
   * drug-lab test interaction
   * @fhirSearchType `token`
   * @fhirPath `ClinicalUseDefinition.interaction.type`
   */
  interaction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("interaction", ...args);
  }
  /**
   * The medicinal product for which this is a clinical usage issue
   * @fhirSearchType `reference`
   * @fhirPath `ClinicalUseDefinition.subject.where(resolve() is MedicinalProductDefinition)`
   */
  product(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("product", ...args);
  }
  /**
   * The resource for which this is a clinical usage issue
   * @fhirSearchType `reference`
   * @fhirPath `ClinicalUseDefinition.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
   * indication | contraindication | interaction | undesirable-effect | warning
   * @fhirSearchType `token`
   * @fhirPath `ClinicalUseDefinition.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ClinicalUseDefinitionSortOrder
      | ClinicalUseDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type CodeSystemSortOrder =
  | DomainResourceSortOrder
  | "code"
  | "-code"
  | "content-mode"
  | "-content-mode"
  | "language"
  | "-language"
  | "supplements"
  | "-supplements"
  | "system"
  | "-system"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class CodeSystemFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "CodeSystem";

  /**
   * A code defined in the code system
   * @fhirSearchType `token`
   * @fhirPath `CodeSystem.concept.code`
   */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
   * not-present | example | fragment | complete | supplement
   * @fhirSearchType `token`
   * @fhirPath `CodeSystem.content`
   */
  contentMode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("content-mode", ...args);
  }
  /**
   * A language in which a designation is provided
   * @fhirSearchType `token`
   * @fhirPath `CodeSystem.concept.designation.language`
   */
  language(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("language", ...args);
  }
  /**
   * Find code system supplements for the referenced code system
   * @fhirSearchType `reference`
   * @fhirPath `CodeSystem.supplements`
   */
  supplements(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("supplements", ...args);
  }
  /**
   * The system for any codes defined by this code system (same as 'url')
   * @fhirSearchType `uri`
   * @fhirPath `CodeSystem.url`
   */
  system(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("system", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * quantity- or range-valued use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned
 * to the code system
* [CompartmentDefinition](compartmentdefinition.html): A
 * quantity- or range-valued use context assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned
 * to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or
 * range-valued use context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use
 * context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A quantity- or range-valued use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use
 * context assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A quantity- or range-valued use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use
 * context assigned to the structure definition
*
 * [StructureMap](structuremap.html): A quantity- or range-valued use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or
 * range-valued use context assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to
 * the value set
 * @fhirSearchType `quantity`
 * @fhirPath `(CapabilityStatement.useContext.value as Quantity) | (CapabilityStatement.useContext.value as Range) | (CodeSystem.useContext.value as Quantity) | (CodeSystem.useContext.value as Range) | (CompartmentDefinition.useContext.value as Quantity) | (CompartmentDefinition.useContext.value as Range) | (ConceptMap.useContext.value as Quantity) | (ConceptMap.useContext.value as Range) | (GraphDefinition.useContext.value as Quantity) | (GraphDefinition.useContext.value as Range) | (ImplementationGuide.useContext.value as Quantity) | (ImplementationGuide.useContext.value as Range) | (MessageDefinition.useContext.value as Quantity) | (MessageDefinition.useContext.value as Range) | (NamingSystem.useContext.value as Quantity) | (NamingSystem.useContext.value as Range) | (OperationDefinition.useContext.value as Quantity) | (OperationDefinition.useContext.value as Range) | (SearchParameter.useContext.value as Quantity) | (SearchParameter.useContext.value as Range) | (StructureDefinition.useContext.value as Quantity) | (StructureDefinition.useContext.value as Range) | (StructureMap.useContext.value as Quantity) | (StructureMap.useContext.value as Range) | (TerminologyCapabilities.useContext.value as Quantity) | (TerminologyCapabilities.useContext.value as Range) | (ValueSet.useContext.value as Quantity) | (ValueSet.useContext.value as Range)`
 */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and quantity- or range-based value assigned to the capability
 * statement
* [CodeSystem](codesystem.html): A use context type and quantity- or
 * range-based value assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context type and
 * quantity- or range-based value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based
 * value assigned to the concept map
* [GraphDefinition](graphdefinition.html): A
 * use context type and quantity- or range-based value assigned to the graph
 * definition
* [ImplementationGuide](implementationguide.html): A use context
 * type and quantity- or range-based value assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and quantity- or
 * range-based value assigned to the message definition
*
 * [NamingSystem](namingsystem.html): A use context type and quantity- or
 * range-based value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and
 * quantity- or range-based value assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A use context type and quantity- or
 * range-based value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and
 * quantity- or range-based value assigned to the structure definition
*
 * [StructureMap](structuremap.html): A use context type and quantity- or
 * range-based value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * quantity- or range-based value assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A use context type and quantity- or range-based value
 * assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and value assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A use context type and value assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A use context
 * type and value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and value assigned to the
 * concept map
* [GraphDefinition](graphdefinition.html): A use context type and
 * value assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context type and value
 * assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and value
 * assigned to the message definition
* [NamingSystem](namingsystem.html): A use
 * context type and value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and value
 * assigned to the operation definition
* [SearchParameter](searchparameter.html):
 * A use context type and value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and value
 * assigned to the structure definition
* [StructureMap](structuremap.html): A use
 * context type and value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * value assigned to the terminology capabilities
* [ValueSet](valueset.html): A
 * use context type and value assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * type of use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A type of use context assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A type of use
 * context assigned to the compartment definition
* [ConceptMap](conceptmap.html):
 * A type of use context assigned to the concept map
*
 * [GraphDefinition](graphdefinition.html): A type of use context assigned to the
 * graph definition
* [ImplementationGuide](implementationguide.html): A type of
 * use context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A type of use context assigned to
 * the message definition
* [NamingSystem](namingsystem.html): A type of use
 * context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A type of use context assigned
 * to the operation definition
* [SearchParameter](searchparameter.html): A type
 * of use context assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A type of use context assigned
 * to the structure definition
* [StructureMap](structuremap.html): A type of use
 * context assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A type of use context
 * assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of
 * use context assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.useContext.code | CodeSystem.useContext.code | CompartmentDefinition.useContext.code | ConceptMap.useContext.code | GraphDefinition.useContext.code | ImplementationGuide.useContext.code | MessageDefinition.useContext.code | NamingSystem.useContext.code | OperationDefinition.useContext.code | SearchParameter.useContext.code | StructureDefinition.useContext.code | StructureMap.useContext.code | TerminologyCapabilities.useContext.code | ValueSet.useContext.code`
 */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context assigned to the capability statement
* [CodeSystem](codesystem.html): A
 * use context assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to
 * the compartment definition
* [ConceptMap](conceptmap.html): A use context
 * assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use
 * context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context assigned to the
 * implementation guide
* [MessageDefinition](messagedefinition.html): A use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context assigned to the
 * operation definition
* [SearchParameter](searchparameter.html): A use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context assigned to the
 * structure definition
* [StructureMap](structuremap.html): A use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned
 * to the terminology capabilities
* [ValueSet](valueset.html): A use context
 * assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `(CapabilityStatement.useContext.value as CodeableConcept) | (CodeSystem.useContext.value as CodeableConcept) | (CompartmentDefinition.useContext.value as CodeableConcept) | (ConceptMap.useContext.value as CodeableConcept) | (GraphDefinition.useContext.value as CodeableConcept) | (ImplementationGuide.useContext.value as CodeableConcept) | (MessageDefinition.useContext.value as CodeableConcept) | (NamingSystem.useContext.value as CodeableConcept) | (OperationDefinition.useContext.value as CodeableConcept) | (SearchParameter.useContext.value as CodeableConcept) | (StructureDefinition.useContext.value as CodeableConcept) | (StructureMap.useContext.value as CodeableConcept) | (TerminologyCapabilities.useContext.value as CodeableConcept) | (ValueSet.useContext.value as CodeableConcept)`
 */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * capability statement publication date
* [CodeSystem](codesystem.html): The code
 * system publication date
* [CompartmentDefinition](compartmentdefinition.html):
 * The compartment definition publication date
* [ConceptMap](conceptmap.html):
 * The concept map publication date
* [GraphDefinition](graphdefinition.html): The
 * graph definition publication date
*
 * [ImplementationGuide](implementationguide.html): The implementation guide
 * publication date
* [MessageDefinition](messagedefinition.html): The message
 * definition publication date
* [NamingSystem](namingsystem.html): The naming
 * system publication date
* [OperationDefinition](operationdefinition.html): The
 * operation definition publication date
*
 * [SearchParameter](searchparameter.html): The search parameter publication
 * date
* [StructureDefinition](structuredefinition.html): The structure
 * definition publication date
* [StructureMap](structuremap.html): The structure
 * map publication date
* [TerminologyCapabilities](terminologycapabilities.html):
 * The terminology capabilities publication date
* [ValueSet](valueset.html): The
 * value set publication date
 * @fhirSearchType `date`
 * @fhirPath `CapabilityStatement.date | CodeSystem.date | CompartmentDefinition.date | ConceptMap.date | GraphDefinition.date | ImplementationGuide.date | MessageDefinition.date | NamingSystem.date | OperationDefinition.date | SearchParameter.date | StructureDefinition.date | StructureMap.date | TerminologyCapabilities.date | ValueSet.date`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * description of the capability statement
* [CodeSystem](codesystem.html): The
 * description of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The description of the
 * compartment definition
* [ConceptMap](conceptmap.html): The description of the
 * concept map
* [GraphDefinition](graphdefinition.html): The description of the
 * graph definition
* [ImplementationGuide](implementationguide.html): The
 * description of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The description of the message
 * definition
* [NamingSystem](namingsystem.html): The description of the naming
 * system
* [OperationDefinition](operationdefinition.html): The description of
 * the operation definition
* [SearchParameter](searchparameter.html): The
 * description of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The description of the
 * structure definition
* [StructureMap](structuremap.html): The description of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The description of the terminology capabilities
* [ValueSet](valueset.html):
 * The description of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.description | CodeSystem.description | CompartmentDefinition.description | ConceptMap.description | GraphDefinition.description | ImplementationGuide.description | MessageDefinition.description | NamingSystem.description | OperationDefinition.description | SearchParameter.description | StructureDefinition.description | StructureMap.description | TerminologyCapabilities.description | ValueSet.description`
 */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
 * Multiple Resources: 

* [CodeSystem](codesystem.html): External identifier for
 * the code system
* [ConceptMap](conceptmap.html): External identifier for the
 * concept map
* [MessageDefinition](messagedefinition.html): External identifier
 * for the message definition
* [StructureDefinition](structuredefinition.html):
 * External identifier for the structure definition
*
 * [StructureMap](structuremap.html): External identifier for the structure map
*
 * [ValueSet](valueset.html): External identifier for the value set
 * @fhirSearchType `token`
 * @fhirPath `CodeSystem.identifier | ConceptMap.identifier | MessageDefinition.identifier | StructureDefinition.identifier | StructureMap.identifier | ValueSet.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Intended jurisdiction for the capability statement
*
 * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
*
 * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
*
 * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph
 * definition
* [ImplementationGuide](implementationguide.html): Intended
 * jurisdiction for the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the
 * message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction
 * for the naming system
* [OperationDefinition](operationdefinition.html):
 * Intended jurisdiction for the operation definition
*
 * [SearchParameter](searchparameter.html): Intended jurisdiction for the search
 * parameter
* [StructureDefinition](structuredefinition.html): Intended
 * jurisdiction for the structure definition
* [StructureMap](structuremap.html):
 * Intended jurisdiction for the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction
 * for the terminology capabilities
* [ValueSet](valueset.html): Intended
 * jurisdiction for the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.jurisdiction | CodeSystem.jurisdiction | ConceptMap.jurisdiction | GraphDefinition.jurisdiction | ImplementationGuide.jurisdiction | MessageDefinition.jurisdiction | NamingSystem.jurisdiction | OperationDefinition.jurisdiction | SearchParameter.jurisdiction | StructureDefinition.jurisdiction | StructureMap.jurisdiction | TerminologyCapabilities.jurisdiction | ValueSet.jurisdiction`
 */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Computationally friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): Computationally friendly name of the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): Computationally
 * friendly name of the compartment definition
* [ConceptMap](conceptmap.html):
 * Computationally friendly name of the concept map
*
 * [GraphDefinition](graphdefinition.html): Computationally friendly name of the
 * graph definition
* [ImplementationGuide](implementationguide.html):
 * Computationally friendly name of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Computationally friendly name of
 * the message definition
* [NamingSystem](namingsystem.html): Computationally
 * friendly name of the naming system
*
 * [OperationDefinition](operationdefinition.html): Computationally friendly name
 * of the operation definition
* [SearchParameter](searchparameter.html):
 * Computationally friendly name of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Computationally friendly name
 * of the structure definition
* [StructureMap](structuremap.html):
 * Computationally friendly name of the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Computationally
 * friendly name of the terminology capabilities
* [ValueSet](valueset.html):
 * Computationally friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.name | CodeSystem.name | CompartmentDefinition.name | ConceptMap.name | GraphDefinition.name | ImplementationGuide.name | MessageDefinition.name | NamingSystem.name | OperationDefinition.name | SearchParameter.name | StructureDefinition.name | StructureMap.name | TerminologyCapabilities.name | ValueSet.name`
 */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name
 * of the publisher of the capability statement
* [CodeSystem](codesystem.html):
 * Name of the publisher of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of
 * the compartment definition
* [ConceptMap](conceptmap.html): Name of the
 * publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of
 * the publisher of the graph definition
*
 * [ImplementationGuide](implementationguide.html): Name of the publisher of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): Name of the
 * publisher of the message definition
* [NamingSystem](namingsystem.html): Name
 * of the publisher of the naming system
*
 * [OperationDefinition](operationdefinition.html): Name of the publisher of the
 * operation definition
* [SearchParameter](searchparameter.html): Name of the
 * publisher of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Name of the publisher of the
 * structure definition
* [StructureMap](structuremap.html): Name of the publisher
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * Name of the publisher of the terminology capabilities
*
 * [ValueSet](valueset.html): Name of the publisher of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.publisher | CodeSystem.publisher | CompartmentDefinition.publisher | ConceptMap.publisher | GraphDefinition.publisher | ImplementationGuide.publisher | MessageDefinition.publisher | NamingSystem.publisher | OperationDefinition.publisher | SearchParameter.publisher | StructureDefinition.publisher | StructureMap.publisher | TerminologyCapabilities.publisher | ValueSet.publisher`
 */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * current status of the capability statement
* [CodeSystem](codesystem.html): The
 * current status of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The current status of the
 * compartment definition
* [ConceptMap](conceptmap.html): The current status of
 * the concept map
* [GraphDefinition](graphdefinition.html): The current status
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * current status of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The current status of the message
 * definition
* [NamingSystem](namingsystem.html): The current status of the
 * naming system
* [OperationDefinition](operationdefinition.html): The current
 * status of the operation definition
* [SearchParameter](searchparameter.html):
 * The current status of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The current status of the
 * structure definition
* [StructureMap](structuremap.html): The current status of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The current status of the terminology capabilities
* [ValueSet](valueset.html):
 * The current status of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.status | CodeSystem.status | CompartmentDefinition.status | ConceptMap.status | GraphDefinition.status | ImplementationGuide.status | MessageDefinition.status | NamingSystem.status | OperationDefinition.status | SearchParameter.status | StructureDefinition.status | StructureMap.status | TerminologyCapabilities.status | ValueSet.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * human-friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): The human-friendly name of the code system
*
 * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
*
 * [ImplementationGuide](implementationguide.html): The human-friendly name of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The
 * human-friendly name of the message definition
*
 * [OperationDefinition](operationdefinition.html): The human-friendly name of the
 * operation definition
* [StructureDefinition](structuredefinition.html): The
 * human-friendly name of the structure definition
*
 * [StructureMap](structuremap.html): The human-friendly name of the structure
 * map
* [TerminologyCapabilities](terminologycapabilities.html): The
 * human-friendly name of the terminology capabilities
*
 * [ValueSet](valueset.html): The human-friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.title | CodeSystem.title | ConceptMap.title | ImplementationGuide.title | MessageDefinition.title | OperationDefinition.title | StructureDefinition.title | StructureMap.title | TerminologyCapabilities.title | ValueSet.title`
 */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * uri that identifies the capability statement
* [CodeSystem](codesystem.html):
 * The uri that identifies the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the
 * compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies
 * the concept map
* [GraphDefinition](graphdefinition.html): The uri that
 * identifies the graph definition
*
 * [ImplementationGuide](implementationguide.html): The uri that identifies the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The uri
 * that identifies the message definition
*
 * [OperationDefinition](operationdefinition.html): The uri that identifies the
 * operation definition
* [SearchParameter](searchparameter.html): The uri that
 * identifies the search parameter
*
 * [StructureDefinition](structuredefinition.html): The uri that identifies the
 * structure definition
* [StructureMap](structuremap.html): The uri that
 * identifies the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies
 * the terminology capabilities
* [ValueSet](valueset.html): The uri that
 * identifies the value set
 * @fhirSearchType `uri`
 * @fhirPath `CapabilityStatement.url | CodeSystem.url | CompartmentDefinition.url | ConceptMap.url | GraphDefinition.url | ImplementationGuide.url | MessageDefinition.url | OperationDefinition.url | SearchParameter.url | StructureDefinition.url | StructureMap.url | TerminologyCapabilities.url | ValueSet.url`
 */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * business version of the capability statement
* [CodeSystem](codesystem.html):
 * The business version of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The business version of the
 * compartment definition
* [ConceptMap](conceptmap.html): The business version of
 * the concept map
* [GraphDefinition](graphdefinition.html): The business version
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * business version of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The business version of the message
 * definition
* [OperationDefinition](operationdefinition.html): The business
 * version of the operation definition
* [SearchParameter](searchparameter.html):
 * The business version of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The business version of the
 * structure definition
* [StructureMap](structuremap.html): The business version
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The business version of the terminology capabilities
*
 * [ValueSet](valueset.html): The business version of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.version | CodeSystem.version | CompartmentDefinition.version | ConceptMap.version | GraphDefinition.version | ImplementationGuide.version | MessageDefinition.version | OperationDefinition.version | SearchParameter.version | StructureDefinition.version | StructureMap.version | TerminologyCapabilities.version | ValueSet.version`
 */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: CodeSystemSortOrder | CodeSystemSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type CommunicationSortOrder =
  | DomainResourceSortOrder
  | "based-on"
  | "-based-on"
  | "category"
  | "-category"
  | "encounter"
  | "-encounter"
  | "identifier"
  | "-identifier"
  | "instantiates-canonical"
  | "-instantiates-canonical"
  | "instantiates-uri"
  | "-instantiates-uri"
  | "medium"
  | "-medium"
  | "part-of"
  | "-part-of"
  | "patient"
  | "-patient"
  | "received"
  | "-received"
  | "recipient"
  | "-recipient"
  | "sender"
  | "-sender"
  | "sent"
  | "-sent"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

export class CommunicationFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Communication";

  /**
   * Request fulfilled by this communication
   * @fhirSearchType `reference`
   * @fhirPath `Communication.basedOn`
   */
  basedOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("based-on", ...args);
  }
  /**
   * Message category
   * @fhirSearchType `token`
   * @fhirPath `Communication.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * Encounter created as part of
   * @fhirSearchType `reference`
   * @fhirPath `Communication.encounter`
   */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
   * Unique identifier
   * @fhirSearchType `token`
   * @fhirPath `Communication.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Instantiates FHIR protocol or definition
   * @fhirSearchType `reference`
   * @fhirPath `Communication.instantiatesCanonical`
   */
  instantiatesCanonical(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("instantiates-canonical", ...args);
  }
  /**
   * Instantiates external protocol or definition
   * @fhirSearchType `uri`
   * @fhirPath `Communication.instantiatesUri`
   */
  instantiatesUri(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("instantiates-uri", ...args);
  }
  /**
   * A channel of communication
   * @fhirSearchType `token`
   * @fhirPath `Communication.medium`
   */
  medium(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("medium", ...args);
  }
  /**
   * Part of this action
   * @fhirSearchType `reference`
   * @fhirPath `Communication.partOf`
   */
  partOf(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("part-of", ...args);
  }
  /**
   * Focus of message
   * @fhirSearchType `reference`
   * @fhirPath `Communication.subject.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * When received
   * @fhirSearchType `date`
   * @fhirPath `Communication.received`
   */
  received(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("received", ...args);
  }
  /**
   * Message recipient
   * @fhirSearchType `reference`
   * @fhirPath `Communication.recipient`
   */
  recipient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("recipient", ...args);
  }
  /**
   * Message sender
   * @fhirSearchType `reference`
   * @fhirPath `Communication.sender`
   */
  sender(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("sender", ...args);
  }
  /**
   * When sent
   * @fhirSearchType `date`
   * @fhirPath `Communication.sent`
   */
  sent(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("sent", ...args);
  }
  /**
   * preparation | in-progress | not-done | on-hold | stopped | completed |
   * entered-in-error | unknown
   * @fhirSearchType `token`
   * @fhirPath `Communication.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Focus of message
   * @fhirSearchType `reference`
   * @fhirPath `Communication.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | CommunicationSortOrder
      | CommunicationSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type CommunicationRequestSortOrder =
  | DomainResourceSortOrder
  | "authored"
  | "-authored"
  | "based-on"
  | "-based-on"
  | "category"
  | "-category"
  | "encounter"
  | "-encounter"
  | "group-identifier"
  | "-group-identifier"
  | "identifier"
  | "-identifier"
  | "medium"
  | "-medium"
  | "occurrence"
  | "-occurrence"
  | "patient"
  | "-patient"
  | "priority"
  | "-priority"
  | "recipient"
  | "-recipient"
  | "replaces"
  | "-replaces"
  | "requester"
  | "-requester"
  | "sender"
  | "-sender"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

export class CommunicationRequestFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "CommunicationRequest";

  /**
   * When request transitioned to being actionable
   * @fhirSearchType `date`
   * @fhirPath `CommunicationRequest.authoredOn`
   */
  authored(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("authored", ...args);
  }
  /**
   * Fulfills plan or proposal
   * @fhirSearchType `reference`
   * @fhirPath `CommunicationRequest.basedOn`
   */
  basedOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("based-on", ...args);
  }
  /**
   * Message category
   * @fhirSearchType `token`
   * @fhirPath `CommunicationRequest.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * Encounter created as part of
   * @fhirSearchType `reference`
   * @fhirPath `CommunicationRequest.encounter`
   */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
   * Composite request this is part of
   * @fhirSearchType `token`
   * @fhirPath `CommunicationRequest.groupIdentifier`
   */
  groupIdentifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("group-identifier", ...args);
  }
  /**
   * Unique identifier
   * @fhirSearchType `token`
   * @fhirPath `CommunicationRequest.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * A channel of communication
   * @fhirSearchType `token`
   * @fhirPath `CommunicationRequest.medium`
   */
  medium(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("medium", ...args);
  }
  /**
   * When scheduled
   * @fhirSearchType `date`
   * @fhirPath `(CommunicationRequest.occurrence as dateTime)`
   */
  occurrence(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("occurrence", ...args);
  }
  /**
   * Focus of message
   * @fhirSearchType `reference`
   * @fhirPath `CommunicationRequest.subject.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * routine | urgent | asap | stat
   * @fhirSearchType `token`
   * @fhirPath `CommunicationRequest.priority`
   */
  priority(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("priority", ...args);
  }
  /**
   * Message recipient
   * @fhirSearchType `reference`
   * @fhirPath `CommunicationRequest.recipient`
   */
  recipient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("recipient", ...args);
  }
  /**
   * Request(s) replaced by this request
   * @fhirSearchType `reference`
   * @fhirPath `CommunicationRequest.replaces`
   */
  replaces(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("replaces", ...args);
  }
  /**
   * Who/what is requesting service
   * @fhirSearchType `reference`
   * @fhirPath `CommunicationRequest.requester`
   */
  requester(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("requester", ...args);
  }
  /**
   * Message sender
   * @fhirSearchType `reference`
   * @fhirPath `CommunicationRequest.sender`
   */
  sender(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("sender", ...args);
  }
  /**
   * draft | active | on-hold | revoked | completed | entered-in-error | unknown
   * @fhirSearchType `token`
   * @fhirPath `CommunicationRequest.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Focus of message
   * @fhirSearchType `reference`
   * @fhirPath `CommunicationRequest.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | CommunicationRequestSortOrder
      | CommunicationRequestSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type CompartmentDefinitionSortOrder =
  | DomainResourceSortOrder
  | "code"
  | "-code"
  | "resource"
  | "-resource"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class CompartmentDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "CompartmentDefinition";

  /**
   * Patient | Encounter | RelatedPerson | Practitioner | Device
   * @fhirSearchType `token`
   * @fhirPath `CompartmentDefinition.code`
   */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
   * Name of resource type
   * @fhirSearchType `token`
   * @fhirPath `CompartmentDefinition.resource.code`
   */
  resource(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("resource", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * quantity- or range-valued use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned
 * to the code system
* [CompartmentDefinition](compartmentdefinition.html): A
 * quantity- or range-valued use context assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned
 * to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or
 * range-valued use context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use
 * context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A quantity- or range-valued use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use
 * context assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A quantity- or range-valued use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use
 * context assigned to the structure definition
*
 * [StructureMap](structuremap.html): A quantity- or range-valued use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or
 * range-valued use context assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to
 * the value set
 * @fhirSearchType `quantity`
 * @fhirPath `(CapabilityStatement.useContext.value as Quantity) | (CapabilityStatement.useContext.value as Range) | (CodeSystem.useContext.value as Quantity) | (CodeSystem.useContext.value as Range) | (CompartmentDefinition.useContext.value as Quantity) | (CompartmentDefinition.useContext.value as Range) | (ConceptMap.useContext.value as Quantity) | (ConceptMap.useContext.value as Range) | (GraphDefinition.useContext.value as Quantity) | (GraphDefinition.useContext.value as Range) | (ImplementationGuide.useContext.value as Quantity) | (ImplementationGuide.useContext.value as Range) | (MessageDefinition.useContext.value as Quantity) | (MessageDefinition.useContext.value as Range) | (NamingSystem.useContext.value as Quantity) | (NamingSystem.useContext.value as Range) | (OperationDefinition.useContext.value as Quantity) | (OperationDefinition.useContext.value as Range) | (SearchParameter.useContext.value as Quantity) | (SearchParameter.useContext.value as Range) | (StructureDefinition.useContext.value as Quantity) | (StructureDefinition.useContext.value as Range) | (StructureMap.useContext.value as Quantity) | (StructureMap.useContext.value as Range) | (TerminologyCapabilities.useContext.value as Quantity) | (TerminologyCapabilities.useContext.value as Range) | (ValueSet.useContext.value as Quantity) | (ValueSet.useContext.value as Range)`
 */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and quantity- or range-based value assigned to the capability
 * statement
* [CodeSystem](codesystem.html): A use context type and quantity- or
 * range-based value assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context type and
 * quantity- or range-based value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based
 * value assigned to the concept map
* [GraphDefinition](graphdefinition.html): A
 * use context type and quantity- or range-based value assigned to the graph
 * definition
* [ImplementationGuide](implementationguide.html): A use context
 * type and quantity- or range-based value assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and quantity- or
 * range-based value assigned to the message definition
*
 * [NamingSystem](namingsystem.html): A use context type and quantity- or
 * range-based value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and
 * quantity- or range-based value assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A use context type and quantity- or
 * range-based value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and
 * quantity- or range-based value assigned to the structure definition
*
 * [StructureMap](structuremap.html): A use context type and quantity- or
 * range-based value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * quantity- or range-based value assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A use context type and quantity- or range-based value
 * assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and value assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A use context type and value assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A use context
 * type and value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and value assigned to the
 * concept map
* [GraphDefinition](graphdefinition.html): A use context type and
 * value assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context type and value
 * assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and value
 * assigned to the message definition
* [NamingSystem](namingsystem.html): A use
 * context type and value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and value
 * assigned to the operation definition
* [SearchParameter](searchparameter.html):
 * A use context type and value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and value
 * assigned to the structure definition
* [StructureMap](structuremap.html): A use
 * context type and value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * value assigned to the terminology capabilities
* [ValueSet](valueset.html): A
 * use context type and value assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * type of use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A type of use context assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A type of use
 * context assigned to the compartment definition
* [ConceptMap](conceptmap.html):
 * A type of use context assigned to the concept map
*
 * [GraphDefinition](graphdefinition.html): A type of use context assigned to the
 * graph definition
* [ImplementationGuide](implementationguide.html): A type of
 * use context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A type of use context assigned to
 * the message definition
* [NamingSystem](namingsystem.html): A type of use
 * context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A type of use context assigned
 * to the operation definition
* [SearchParameter](searchparameter.html): A type
 * of use context assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A type of use context assigned
 * to the structure definition
* [StructureMap](structuremap.html): A type of use
 * context assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A type of use context
 * assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of
 * use context assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.useContext.code | CodeSystem.useContext.code | CompartmentDefinition.useContext.code | ConceptMap.useContext.code | GraphDefinition.useContext.code | ImplementationGuide.useContext.code | MessageDefinition.useContext.code | NamingSystem.useContext.code | OperationDefinition.useContext.code | SearchParameter.useContext.code | StructureDefinition.useContext.code | StructureMap.useContext.code | TerminologyCapabilities.useContext.code | ValueSet.useContext.code`
 */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context assigned to the capability statement
* [CodeSystem](codesystem.html): A
 * use context assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to
 * the compartment definition
* [ConceptMap](conceptmap.html): A use context
 * assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use
 * context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context assigned to the
 * implementation guide
* [MessageDefinition](messagedefinition.html): A use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context assigned to the
 * operation definition
* [SearchParameter](searchparameter.html): A use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context assigned to the
 * structure definition
* [StructureMap](structuremap.html): A use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned
 * to the terminology capabilities
* [ValueSet](valueset.html): A use context
 * assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `(CapabilityStatement.useContext.value as CodeableConcept) | (CodeSystem.useContext.value as CodeableConcept) | (CompartmentDefinition.useContext.value as CodeableConcept) | (ConceptMap.useContext.value as CodeableConcept) | (GraphDefinition.useContext.value as CodeableConcept) | (ImplementationGuide.useContext.value as CodeableConcept) | (MessageDefinition.useContext.value as CodeableConcept) | (NamingSystem.useContext.value as CodeableConcept) | (OperationDefinition.useContext.value as CodeableConcept) | (SearchParameter.useContext.value as CodeableConcept) | (StructureDefinition.useContext.value as CodeableConcept) | (StructureMap.useContext.value as CodeableConcept) | (TerminologyCapabilities.useContext.value as CodeableConcept) | (ValueSet.useContext.value as CodeableConcept)`
 */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * capability statement publication date
* [CodeSystem](codesystem.html): The code
 * system publication date
* [CompartmentDefinition](compartmentdefinition.html):
 * The compartment definition publication date
* [ConceptMap](conceptmap.html):
 * The concept map publication date
* [GraphDefinition](graphdefinition.html): The
 * graph definition publication date
*
 * [ImplementationGuide](implementationguide.html): The implementation guide
 * publication date
* [MessageDefinition](messagedefinition.html): The message
 * definition publication date
* [NamingSystem](namingsystem.html): The naming
 * system publication date
* [OperationDefinition](operationdefinition.html): The
 * operation definition publication date
*
 * [SearchParameter](searchparameter.html): The search parameter publication
 * date
* [StructureDefinition](structuredefinition.html): The structure
 * definition publication date
* [StructureMap](structuremap.html): The structure
 * map publication date
* [TerminologyCapabilities](terminologycapabilities.html):
 * The terminology capabilities publication date
* [ValueSet](valueset.html): The
 * value set publication date
 * @fhirSearchType `date`
 * @fhirPath `CapabilityStatement.date | CodeSystem.date | CompartmentDefinition.date | ConceptMap.date | GraphDefinition.date | ImplementationGuide.date | MessageDefinition.date | NamingSystem.date | OperationDefinition.date | SearchParameter.date | StructureDefinition.date | StructureMap.date | TerminologyCapabilities.date | ValueSet.date`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * description of the capability statement
* [CodeSystem](codesystem.html): The
 * description of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The description of the
 * compartment definition
* [ConceptMap](conceptmap.html): The description of the
 * concept map
* [GraphDefinition](graphdefinition.html): The description of the
 * graph definition
* [ImplementationGuide](implementationguide.html): The
 * description of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The description of the message
 * definition
* [NamingSystem](namingsystem.html): The description of the naming
 * system
* [OperationDefinition](operationdefinition.html): The description of
 * the operation definition
* [SearchParameter](searchparameter.html): The
 * description of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The description of the
 * structure definition
* [StructureMap](structuremap.html): The description of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The description of the terminology capabilities
* [ValueSet](valueset.html):
 * The description of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.description | CodeSystem.description | CompartmentDefinition.description | ConceptMap.description | GraphDefinition.description | ImplementationGuide.description | MessageDefinition.description | NamingSystem.description | OperationDefinition.description | SearchParameter.description | StructureDefinition.description | StructureMap.description | TerminologyCapabilities.description | ValueSet.description`
 */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Computationally friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): Computationally friendly name of the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): Computationally
 * friendly name of the compartment definition
* [ConceptMap](conceptmap.html):
 * Computationally friendly name of the concept map
*
 * [GraphDefinition](graphdefinition.html): Computationally friendly name of the
 * graph definition
* [ImplementationGuide](implementationguide.html):
 * Computationally friendly name of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Computationally friendly name of
 * the message definition
* [NamingSystem](namingsystem.html): Computationally
 * friendly name of the naming system
*
 * [OperationDefinition](operationdefinition.html): Computationally friendly name
 * of the operation definition
* [SearchParameter](searchparameter.html):
 * Computationally friendly name of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Computationally friendly name
 * of the structure definition
* [StructureMap](structuremap.html):
 * Computationally friendly name of the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Computationally
 * friendly name of the terminology capabilities
* [ValueSet](valueset.html):
 * Computationally friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.name | CodeSystem.name | CompartmentDefinition.name | ConceptMap.name | GraphDefinition.name | ImplementationGuide.name | MessageDefinition.name | NamingSystem.name | OperationDefinition.name | SearchParameter.name | StructureDefinition.name | StructureMap.name | TerminologyCapabilities.name | ValueSet.name`
 */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name
 * of the publisher of the capability statement
* [CodeSystem](codesystem.html):
 * Name of the publisher of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of
 * the compartment definition
* [ConceptMap](conceptmap.html): Name of the
 * publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of
 * the publisher of the graph definition
*
 * [ImplementationGuide](implementationguide.html): Name of the publisher of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): Name of the
 * publisher of the message definition
* [NamingSystem](namingsystem.html): Name
 * of the publisher of the naming system
*
 * [OperationDefinition](operationdefinition.html): Name of the publisher of the
 * operation definition
* [SearchParameter](searchparameter.html): Name of the
 * publisher of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Name of the publisher of the
 * structure definition
* [StructureMap](structuremap.html): Name of the publisher
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * Name of the publisher of the terminology capabilities
*
 * [ValueSet](valueset.html): Name of the publisher of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.publisher | CodeSystem.publisher | CompartmentDefinition.publisher | ConceptMap.publisher | GraphDefinition.publisher | ImplementationGuide.publisher | MessageDefinition.publisher | NamingSystem.publisher | OperationDefinition.publisher | SearchParameter.publisher | StructureDefinition.publisher | StructureMap.publisher | TerminologyCapabilities.publisher | ValueSet.publisher`
 */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * current status of the capability statement
* [CodeSystem](codesystem.html): The
 * current status of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The current status of the
 * compartment definition
* [ConceptMap](conceptmap.html): The current status of
 * the concept map
* [GraphDefinition](graphdefinition.html): The current status
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * current status of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The current status of the message
 * definition
* [NamingSystem](namingsystem.html): The current status of the
 * naming system
* [OperationDefinition](operationdefinition.html): The current
 * status of the operation definition
* [SearchParameter](searchparameter.html):
 * The current status of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The current status of the
 * structure definition
* [StructureMap](structuremap.html): The current status of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The current status of the terminology capabilities
* [ValueSet](valueset.html):
 * The current status of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.status | CodeSystem.status | CompartmentDefinition.status | ConceptMap.status | GraphDefinition.status | ImplementationGuide.status | MessageDefinition.status | NamingSystem.status | OperationDefinition.status | SearchParameter.status | StructureDefinition.status | StructureMap.status | TerminologyCapabilities.status | ValueSet.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * uri that identifies the capability statement
* [CodeSystem](codesystem.html):
 * The uri that identifies the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the
 * compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies
 * the concept map
* [GraphDefinition](graphdefinition.html): The uri that
 * identifies the graph definition
*
 * [ImplementationGuide](implementationguide.html): The uri that identifies the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The uri
 * that identifies the message definition
*
 * [OperationDefinition](operationdefinition.html): The uri that identifies the
 * operation definition
* [SearchParameter](searchparameter.html): The uri that
 * identifies the search parameter
*
 * [StructureDefinition](structuredefinition.html): The uri that identifies the
 * structure definition
* [StructureMap](structuremap.html): The uri that
 * identifies the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies
 * the terminology capabilities
* [ValueSet](valueset.html): The uri that
 * identifies the value set
 * @fhirSearchType `uri`
 * @fhirPath `CapabilityStatement.url | CodeSystem.url | CompartmentDefinition.url | ConceptMap.url | GraphDefinition.url | ImplementationGuide.url | MessageDefinition.url | OperationDefinition.url | SearchParameter.url | StructureDefinition.url | StructureMap.url | TerminologyCapabilities.url | ValueSet.url`
 */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * business version of the capability statement
* [CodeSystem](codesystem.html):
 * The business version of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The business version of the
 * compartment definition
* [ConceptMap](conceptmap.html): The business version of
 * the concept map
* [GraphDefinition](graphdefinition.html): The business version
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * business version of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The business version of the message
 * definition
* [OperationDefinition](operationdefinition.html): The business
 * version of the operation definition
* [SearchParameter](searchparameter.html):
 * The business version of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The business version of the
 * structure definition
* [StructureMap](structuremap.html): The business version
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The business version of the terminology capabilities
*
 * [ValueSet](valueset.html): The business version of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.version | CodeSystem.version | CompartmentDefinition.version | ConceptMap.version | GraphDefinition.version | ImplementationGuide.version | MessageDefinition.version | OperationDefinition.version | SearchParameter.version | StructureDefinition.version | StructureMap.version | TerminologyCapabilities.version | ValueSet.version`
 */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | CompartmentDefinitionSortOrder
      | CompartmentDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type CompositionSortOrder =
  | DomainResourceSortOrder
  | "attester"
  | "-attester"
  | "author"
  | "-author"
  | "category"
  | "-category"
  | "confidentiality"
  | "-confidentiality"
  | "context"
  | "-context"
  | "entry"
  | "-entry"
  | "period"
  | "-period"
  | "related-id"
  | "-related-id"
  | "related-ref"
  | "-related-ref"
  | "section"
  | "-section"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "title"
  | "-title"
  | "date"
  | "-date"
  | "encounter"
  | "-encounter"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "type"
  | "-type";

export class CompositionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Composition";

  /**
   * Who attested the composition
   * @fhirSearchType `reference`
   * @fhirPath `Composition.attester.party`
   */
  attester(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("attester", ...args);
  }
  /**
   * Who and/or what authored the composition
   * @fhirSearchType `reference`
   * @fhirPath `Composition.author`
   */
  author(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("author", ...args);
  }
  /**
   * Categorization of Composition
   * @fhirSearchType `token`
   * @fhirPath `Composition.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * As defined by affinity domain
   * @fhirSearchType `token`
   * @fhirPath `Composition.confidentiality`
   */
  confidentiality(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("confidentiality", ...args);
  }
  /**
   * Code(s) that apply to the event being documented
   * @fhirSearchType `token`
   * @fhirPath `Composition.event.code`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
   * A reference to data that supports this section
   * @fhirSearchType `reference`
   * @fhirPath `Composition.section.entry`
   */
  entry(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("entry", ...args);
  }
  /**
   * The period covered by the documentation
   * @fhirSearchType `date`
   * @fhirPath `Composition.event.period`
   */
  period(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("period", ...args);
  }
  /**
   * Target of the relationship
   * @fhirSearchType `token`
   * @fhirPath `(Composition.relatesTo.target as Identifier)`
   */
  relatedId(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("related-id", ...args);
  }
  /**
   * Target of the relationship
   * @fhirSearchType `reference`
   * @fhirPath `(Composition.relatesTo.target as Reference)`
   */
  relatedRef(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("related-ref", ...args);
  }
  /**
   * Classification of section (recommended)
   * @fhirSearchType `token`
   * @fhirPath `Composition.section.code`
   */
  section(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("section", ...args);
  }
  /**
   * preliminary | final | amended | entered-in-error
   * @fhirSearchType `token`
   * @fhirPath `Composition.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Who and/or what the composition is about
   * @fhirSearchType `reference`
   * @fhirPath `Composition.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
   * Human Readable name/title
   * @fhirSearchType `string`
   * @fhirPath `Composition.title`
   */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date
 * first version of the resource instance was recorded
*
 * [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html):
 * Time period team covers
* [ClinicalImpression](clinicalimpression.html): When
 * the assessment was documented
* [Composition](composition.html): Composition
 * editing time
* [Consent](consent.html): When this Consent was created or
 * indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant
 * time of the report
* [Encounter](encounter.html): A date within the period the
 * Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date
 * search value falls within the episode of care's period
*
 * [FamilyMemberHistory](familymemberhistory.html): When history was recorded or
 * last updated
* [Flag](flag.html): Time period when flag is active
*
 * [Immunization](immunization.html): Vaccination  (non)-Administration Date
*
 * [List](list.html): When the list was prepared
*
 * [Observation](observation.html): Obtained date/time. If the obtained element is
 * a period, a date that falls in the period
* [Procedure](procedure.html): When
 * the procedure was performed
* [RiskAssessment](riskassessment.html): When was
 * assessment made?
* [SupplyRequest](supplyrequest.html): When the request was
 * made
 * @fhirSearchType `date`
 * @fhirPath `AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [Composition](composition.html): Context of the
 * Composition
* [DeviceRequest](devicerequest.html): Encounter during which
 * request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter
 * when the order was made
* [DocumentReference](documentreference.html): Context
 * of the document  content
* [Flag](flag.html): Alert relevant during
 * encounter
* [List](list.html): Context in which list created
*
 * [NutritionOrder](nutritionorder.html): Return nutrition orders with this
 * encounter identifier
* [Observation](observation.html): Encounter related to
 * the observation
* [Procedure](procedure.html): Encounter created as part of
*
 * [RiskAssessment](riskassessment.html): Where was assessment performed?
*
 * [ServiceRequest](servicerequest.html): An encounter in which this request is
 * made
* [VisionPrescription](visionprescription.html): Return prescriptions with
 * this encounter identifier
 * @fhirSearchType `reference`
 * @fhirPath `Composition.encounter | DeviceRequest.encounter | DiagnosticReport.encounter | DocumentReference.context.encounter.where(resolve() is Encounter) | Flag.encounter | List.encounter | NutritionOrder.encounter | Observation.encounter | Procedure.encounter | RiskAssessment.encounter | ServiceRequest.encounter | VisionPrescription.encounter`
 */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): allergy
 * | intolerance - Underlying mechanism (if known)
*
 * [Composition](composition.html): Kind of composition (LOINC if possible)
*
 * [DocumentManifest](documentmanifest.html): Kind of document set
*
 * [DocumentReference](documentreference.html): Kind of document (LOINC if
 * possible)
* [Encounter](encounter.html): Specific type of encounter
*
 * [EpisodeOfCare](episodeofcare.html): Type/class  - e.g. specialist referral,
 * disease management
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.type | Composition.type | DocumentManifest.type | DocumentReference.type | Encounter.type | EpisodeOfCare.type`
 */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | CompositionSortOrder
      | CompositionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ConceptMapSortOrder =
  | DomainResourceSortOrder
  | "dependson"
  | "-dependson"
  | "other"
  | "-other"
  | "product"
  | "-product"
  | "source-code"
  | "-source-code"
  | "source-system"
  | "-source-system"
  | "source-uri"
  | "-source-uri"
  | "source"
  | "-source"
  | "target-code"
  | "-target-code"
  | "target-system"
  | "-target-system"
  | "target-uri"
  | "-target-uri"
  | "target"
  | "-target"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class ConceptMapFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ConceptMap";

  /**
   * Reference to property mapping depends on
   * @fhirSearchType `uri`
   * @fhirPath `ConceptMap.group.element.target.dependsOn.property`
   */
  dependson(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("dependson", ...args);
  }
  /**
   * canonical reference to an additional ConceptMap to use for mapping if the source
   * concept is unmapped
   * @fhirSearchType `reference`
   * @fhirPath `ConceptMap.group.unmapped.url`
   */
  other(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("other", ...args);
  }
  /**
   * Reference to property mapping depends on
   * @fhirSearchType `uri`
   * @fhirPath `ConceptMap.group.element.target.product.property`
   */
  product(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("product", ...args);
  }
  /**
   * Identifies element being mapped
   * @fhirSearchType `token`
   * @fhirPath `ConceptMap.group.element.code`
   */
  sourceCode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("source-code", ...args);
  }
  /**
   * Source system where concepts to be mapped are defined
   * @fhirSearchType `uri`
   * @fhirPath `ConceptMap.group.source`
   */
  sourceSystem(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("source-system", ...args);
  }
  /**
   * The source value set that contains the concepts that are being mapped
   * @fhirSearchType `reference`
   * @fhirPath `(ConceptMap.source as uri)`
   */
  sourceUri(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("source-uri", ...args);
  }
  /**
   * The source value set that contains the concepts that are being mapped
   * @fhirSearchType `reference`
   * @fhirPath `(ConceptMap.source as canonical)`
   */
  source(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("source", ...args);
  }
  /**
   * Code that identifies the target element
   * @fhirSearchType `token`
   * @fhirPath `ConceptMap.group.element.target.code`
   */
  targetCode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("target-code", ...args);
  }
  /**
   * Target system that the concepts are to be mapped to
   * @fhirSearchType `uri`
   * @fhirPath `ConceptMap.group.target`
   */
  targetSystem(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("target-system", ...args);
  }
  /**
   * The target value set which provides context for the mappings
   * @fhirSearchType `reference`
   * @fhirPath `(ConceptMap.target as uri)`
   */
  targetUri(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("target-uri", ...args);
  }
  /**
   * The target value set which provides context for the mappings
   * @fhirSearchType `reference`
   * @fhirPath `(ConceptMap.target as canonical)`
   */
  target(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("target", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * quantity- or range-valued use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned
 * to the code system
* [CompartmentDefinition](compartmentdefinition.html): A
 * quantity- or range-valued use context assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned
 * to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or
 * range-valued use context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use
 * context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A quantity- or range-valued use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use
 * context assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A quantity- or range-valued use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use
 * context assigned to the structure definition
*
 * [StructureMap](structuremap.html): A quantity- or range-valued use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or
 * range-valued use context assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to
 * the value set
 * @fhirSearchType `quantity`
 * @fhirPath `(CapabilityStatement.useContext.value as Quantity) | (CapabilityStatement.useContext.value as Range) | (CodeSystem.useContext.value as Quantity) | (CodeSystem.useContext.value as Range) | (CompartmentDefinition.useContext.value as Quantity) | (CompartmentDefinition.useContext.value as Range) | (ConceptMap.useContext.value as Quantity) | (ConceptMap.useContext.value as Range) | (GraphDefinition.useContext.value as Quantity) | (GraphDefinition.useContext.value as Range) | (ImplementationGuide.useContext.value as Quantity) | (ImplementationGuide.useContext.value as Range) | (MessageDefinition.useContext.value as Quantity) | (MessageDefinition.useContext.value as Range) | (NamingSystem.useContext.value as Quantity) | (NamingSystem.useContext.value as Range) | (OperationDefinition.useContext.value as Quantity) | (OperationDefinition.useContext.value as Range) | (SearchParameter.useContext.value as Quantity) | (SearchParameter.useContext.value as Range) | (StructureDefinition.useContext.value as Quantity) | (StructureDefinition.useContext.value as Range) | (StructureMap.useContext.value as Quantity) | (StructureMap.useContext.value as Range) | (TerminologyCapabilities.useContext.value as Quantity) | (TerminologyCapabilities.useContext.value as Range) | (ValueSet.useContext.value as Quantity) | (ValueSet.useContext.value as Range)`
 */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and quantity- or range-based value assigned to the capability
 * statement
* [CodeSystem](codesystem.html): A use context type and quantity- or
 * range-based value assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context type and
 * quantity- or range-based value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based
 * value assigned to the concept map
* [GraphDefinition](graphdefinition.html): A
 * use context type and quantity- or range-based value assigned to the graph
 * definition
* [ImplementationGuide](implementationguide.html): A use context
 * type and quantity- or range-based value assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and quantity- or
 * range-based value assigned to the message definition
*
 * [NamingSystem](namingsystem.html): A use context type and quantity- or
 * range-based value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and
 * quantity- or range-based value assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A use context type and quantity- or
 * range-based value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and
 * quantity- or range-based value assigned to the structure definition
*
 * [StructureMap](structuremap.html): A use context type and quantity- or
 * range-based value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * quantity- or range-based value assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A use context type and quantity- or range-based value
 * assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and value assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A use context type and value assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A use context
 * type and value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and value assigned to the
 * concept map
* [GraphDefinition](graphdefinition.html): A use context type and
 * value assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context type and value
 * assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and value
 * assigned to the message definition
* [NamingSystem](namingsystem.html): A use
 * context type and value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and value
 * assigned to the operation definition
* [SearchParameter](searchparameter.html):
 * A use context type and value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and value
 * assigned to the structure definition
* [StructureMap](structuremap.html): A use
 * context type and value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * value assigned to the terminology capabilities
* [ValueSet](valueset.html): A
 * use context type and value assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * type of use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A type of use context assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A type of use
 * context assigned to the compartment definition
* [ConceptMap](conceptmap.html):
 * A type of use context assigned to the concept map
*
 * [GraphDefinition](graphdefinition.html): A type of use context assigned to the
 * graph definition
* [ImplementationGuide](implementationguide.html): A type of
 * use context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A type of use context assigned to
 * the message definition
* [NamingSystem](namingsystem.html): A type of use
 * context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A type of use context assigned
 * to the operation definition
* [SearchParameter](searchparameter.html): A type
 * of use context assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A type of use context assigned
 * to the structure definition
* [StructureMap](structuremap.html): A type of use
 * context assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A type of use context
 * assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of
 * use context assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.useContext.code | CodeSystem.useContext.code | CompartmentDefinition.useContext.code | ConceptMap.useContext.code | GraphDefinition.useContext.code | ImplementationGuide.useContext.code | MessageDefinition.useContext.code | NamingSystem.useContext.code | OperationDefinition.useContext.code | SearchParameter.useContext.code | StructureDefinition.useContext.code | StructureMap.useContext.code | TerminologyCapabilities.useContext.code | ValueSet.useContext.code`
 */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context assigned to the capability statement
* [CodeSystem](codesystem.html): A
 * use context assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to
 * the compartment definition
* [ConceptMap](conceptmap.html): A use context
 * assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use
 * context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context assigned to the
 * implementation guide
* [MessageDefinition](messagedefinition.html): A use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context assigned to the
 * operation definition
* [SearchParameter](searchparameter.html): A use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context assigned to the
 * structure definition
* [StructureMap](structuremap.html): A use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned
 * to the terminology capabilities
* [ValueSet](valueset.html): A use context
 * assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `(CapabilityStatement.useContext.value as CodeableConcept) | (CodeSystem.useContext.value as CodeableConcept) | (CompartmentDefinition.useContext.value as CodeableConcept) | (ConceptMap.useContext.value as CodeableConcept) | (GraphDefinition.useContext.value as CodeableConcept) | (ImplementationGuide.useContext.value as CodeableConcept) | (MessageDefinition.useContext.value as CodeableConcept) | (NamingSystem.useContext.value as CodeableConcept) | (OperationDefinition.useContext.value as CodeableConcept) | (SearchParameter.useContext.value as CodeableConcept) | (StructureDefinition.useContext.value as CodeableConcept) | (StructureMap.useContext.value as CodeableConcept) | (TerminologyCapabilities.useContext.value as CodeableConcept) | (ValueSet.useContext.value as CodeableConcept)`
 */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * capability statement publication date
* [CodeSystem](codesystem.html): The code
 * system publication date
* [CompartmentDefinition](compartmentdefinition.html):
 * The compartment definition publication date
* [ConceptMap](conceptmap.html):
 * The concept map publication date
* [GraphDefinition](graphdefinition.html): The
 * graph definition publication date
*
 * [ImplementationGuide](implementationguide.html): The implementation guide
 * publication date
* [MessageDefinition](messagedefinition.html): The message
 * definition publication date
* [NamingSystem](namingsystem.html): The naming
 * system publication date
* [OperationDefinition](operationdefinition.html): The
 * operation definition publication date
*
 * [SearchParameter](searchparameter.html): The search parameter publication
 * date
* [StructureDefinition](structuredefinition.html): The structure
 * definition publication date
* [StructureMap](structuremap.html): The structure
 * map publication date
* [TerminologyCapabilities](terminologycapabilities.html):
 * The terminology capabilities publication date
* [ValueSet](valueset.html): The
 * value set publication date
 * @fhirSearchType `date`
 * @fhirPath `CapabilityStatement.date | CodeSystem.date | CompartmentDefinition.date | ConceptMap.date | GraphDefinition.date | ImplementationGuide.date | MessageDefinition.date | NamingSystem.date | OperationDefinition.date | SearchParameter.date | StructureDefinition.date | StructureMap.date | TerminologyCapabilities.date | ValueSet.date`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * description of the capability statement
* [CodeSystem](codesystem.html): The
 * description of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The description of the
 * compartment definition
* [ConceptMap](conceptmap.html): The description of the
 * concept map
* [GraphDefinition](graphdefinition.html): The description of the
 * graph definition
* [ImplementationGuide](implementationguide.html): The
 * description of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The description of the message
 * definition
* [NamingSystem](namingsystem.html): The description of the naming
 * system
* [OperationDefinition](operationdefinition.html): The description of
 * the operation definition
* [SearchParameter](searchparameter.html): The
 * description of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The description of the
 * structure definition
* [StructureMap](structuremap.html): The description of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The description of the terminology capabilities
* [ValueSet](valueset.html):
 * The description of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.description | CodeSystem.description | CompartmentDefinition.description | ConceptMap.description | GraphDefinition.description | ImplementationGuide.description | MessageDefinition.description | NamingSystem.description | OperationDefinition.description | SearchParameter.description | StructureDefinition.description | StructureMap.description | TerminologyCapabilities.description | ValueSet.description`
 */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
 * Multiple Resources: 

* [CodeSystem](codesystem.html): External identifier for
 * the code system
* [ConceptMap](conceptmap.html): External identifier for the
 * concept map
* [MessageDefinition](messagedefinition.html): External identifier
 * for the message definition
* [StructureDefinition](structuredefinition.html):
 * External identifier for the structure definition
*
 * [StructureMap](structuremap.html): External identifier for the structure map
*
 * [ValueSet](valueset.html): External identifier for the value set
 * @fhirSearchType `token`
 * @fhirPath `CodeSystem.identifier | ConceptMap.identifier | MessageDefinition.identifier | StructureDefinition.identifier | StructureMap.identifier | ValueSet.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Intended jurisdiction for the capability statement
*
 * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
*
 * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
*
 * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph
 * definition
* [ImplementationGuide](implementationguide.html): Intended
 * jurisdiction for the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the
 * message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction
 * for the naming system
* [OperationDefinition](operationdefinition.html):
 * Intended jurisdiction for the operation definition
*
 * [SearchParameter](searchparameter.html): Intended jurisdiction for the search
 * parameter
* [StructureDefinition](structuredefinition.html): Intended
 * jurisdiction for the structure definition
* [StructureMap](structuremap.html):
 * Intended jurisdiction for the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction
 * for the terminology capabilities
* [ValueSet](valueset.html): Intended
 * jurisdiction for the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.jurisdiction | CodeSystem.jurisdiction | ConceptMap.jurisdiction | GraphDefinition.jurisdiction | ImplementationGuide.jurisdiction | MessageDefinition.jurisdiction | NamingSystem.jurisdiction | OperationDefinition.jurisdiction | SearchParameter.jurisdiction | StructureDefinition.jurisdiction | StructureMap.jurisdiction | TerminologyCapabilities.jurisdiction | ValueSet.jurisdiction`
 */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Computationally friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): Computationally friendly name of the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): Computationally
 * friendly name of the compartment definition
* [ConceptMap](conceptmap.html):
 * Computationally friendly name of the concept map
*
 * [GraphDefinition](graphdefinition.html): Computationally friendly name of the
 * graph definition
* [ImplementationGuide](implementationguide.html):
 * Computationally friendly name of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Computationally friendly name of
 * the message definition
* [NamingSystem](namingsystem.html): Computationally
 * friendly name of the naming system
*
 * [OperationDefinition](operationdefinition.html): Computationally friendly name
 * of the operation definition
* [SearchParameter](searchparameter.html):
 * Computationally friendly name of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Computationally friendly name
 * of the structure definition
* [StructureMap](structuremap.html):
 * Computationally friendly name of the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Computationally
 * friendly name of the terminology capabilities
* [ValueSet](valueset.html):
 * Computationally friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.name | CodeSystem.name | CompartmentDefinition.name | ConceptMap.name | GraphDefinition.name | ImplementationGuide.name | MessageDefinition.name | NamingSystem.name | OperationDefinition.name | SearchParameter.name | StructureDefinition.name | StructureMap.name | TerminologyCapabilities.name | ValueSet.name`
 */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name
 * of the publisher of the capability statement
* [CodeSystem](codesystem.html):
 * Name of the publisher of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of
 * the compartment definition
* [ConceptMap](conceptmap.html): Name of the
 * publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of
 * the publisher of the graph definition
*
 * [ImplementationGuide](implementationguide.html): Name of the publisher of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): Name of the
 * publisher of the message definition
* [NamingSystem](namingsystem.html): Name
 * of the publisher of the naming system
*
 * [OperationDefinition](operationdefinition.html): Name of the publisher of the
 * operation definition
* [SearchParameter](searchparameter.html): Name of the
 * publisher of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Name of the publisher of the
 * structure definition
* [StructureMap](structuremap.html): Name of the publisher
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * Name of the publisher of the terminology capabilities
*
 * [ValueSet](valueset.html): Name of the publisher of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.publisher | CodeSystem.publisher | CompartmentDefinition.publisher | ConceptMap.publisher | GraphDefinition.publisher | ImplementationGuide.publisher | MessageDefinition.publisher | NamingSystem.publisher | OperationDefinition.publisher | SearchParameter.publisher | StructureDefinition.publisher | StructureMap.publisher | TerminologyCapabilities.publisher | ValueSet.publisher`
 */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * current status of the capability statement
* [CodeSystem](codesystem.html): The
 * current status of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The current status of the
 * compartment definition
* [ConceptMap](conceptmap.html): The current status of
 * the concept map
* [GraphDefinition](graphdefinition.html): The current status
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * current status of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The current status of the message
 * definition
* [NamingSystem](namingsystem.html): The current status of the
 * naming system
* [OperationDefinition](operationdefinition.html): The current
 * status of the operation definition
* [SearchParameter](searchparameter.html):
 * The current status of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The current status of the
 * structure definition
* [StructureMap](structuremap.html): The current status of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The current status of the terminology capabilities
* [ValueSet](valueset.html):
 * The current status of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.status | CodeSystem.status | CompartmentDefinition.status | ConceptMap.status | GraphDefinition.status | ImplementationGuide.status | MessageDefinition.status | NamingSystem.status | OperationDefinition.status | SearchParameter.status | StructureDefinition.status | StructureMap.status | TerminologyCapabilities.status | ValueSet.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * human-friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): The human-friendly name of the code system
*
 * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
*
 * [ImplementationGuide](implementationguide.html): The human-friendly name of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The
 * human-friendly name of the message definition
*
 * [OperationDefinition](operationdefinition.html): The human-friendly name of the
 * operation definition
* [StructureDefinition](structuredefinition.html): The
 * human-friendly name of the structure definition
*
 * [StructureMap](structuremap.html): The human-friendly name of the structure
 * map
* [TerminologyCapabilities](terminologycapabilities.html): The
 * human-friendly name of the terminology capabilities
*
 * [ValueSet](valueset.html): The human-friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.title | CodeSystem.title | ConceptMap.title | ImplementationGuide.title | MessageDefinition.title | OperationDefinition.title | StructureDefinition.title | StructureMap.title | TerminologyCapabilities.title | ValueSet.title`
 */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * uri that identifies the capability statement
* [CodeSystem](codesystem.html):
 * The uri that identifies the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the
 * compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies
 * the concept map
* [GraphDefinition](graphdefinition.html): The uri that
 * identifies the graph definition
*
 * [ImplementationGuide](implementationguide.html): The uri that identifies the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The uri
 * that identifies the message definition
*
 * [OperationDefinition](operationdefinition.html): The uri that identifies the
 * operation definition
* [SearchParameter](searchparameter.html): The uri that
 * identifies the search parameter
*
 * [StructureDefinition](structuredefinition.html): The uri that identifies the
 * structure definition
* [StructureMap](structuremap.html): The uri that
 * identifies the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies
 * the terminology capabilities
* [ValueSet](valueset.html): The uri that
 * identifies the value set
 * @fhirSearchType `uri`
 * @fhirPath `CapabilityStatement.url | CodeSystem.url | CompartmentDefinition.url | ConceptMap.url | GraphDefinition.url | ImplementationGuide.url | MessageDefinition.url | OperationDefinition.url | SearchParameter.url | StructureDefinition.url | StructureMap.url | TerminologyCapabilities.url | ValueSet.url`
 */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * business version of the capability statement
* [CodeSystem](codesystem.html):
 * The business version of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The business version of the
 * compartment definition
* [ConceptMap](conceptmap.html): The business version of
 * the concept map
* [GraphDefinition](graphdefinition.html): The business version
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * business version of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The business version of the message
 * definition
* [OperationDefinition](operationdefinition.html): The business
 * version of the operation definition
* [SearchParameter](searchparameter.html):
 * The business version of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The business version of the
 * structure definition
* [StructureMap](structuremap.html): The business version
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The business version of the terminology capabilities
*
 * [ValueSet](valueset.html): The business version of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.version | CodeSystem.version | CompartmentDefinition.version | ConceptMap.version | GraphDefinition.version | ImplementationGuide.version | MessageDefinition.version | OperationDefinition.version | SearchParameter.version | StructureDefinition.version | StructureMap.version | TerminologyCapabilities.version | ValueSet.version`
 */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: ConceptMapSortOrder | ConceptMapSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ConditionSortOrder =
  | DomainResourceSortOrder
  | "abatement-age"
  | "-abatement-age"
  | "abatement-date"
  | "-abatement-date"
  | "abatement-string"
  | "-abatement-string"
  | "asserter"
  | "-asserter"
  | "body-site"
  | "-body-site"
  | "category"
  | "-category"
  | "clinical-status"
  | "-clinical-status"
  | "encounter"
  | "-encounter"
  | "evidence-detail"
  | "-evidence-detail"
  | "evidence"
  | "-evidence"
  | "onset-age"
  | "-onset-age"
  | "onset-date"
  | "-onset-date"
  | "onset-info"
  | "-onset-info"
  | "recorded-date"
  | "-recorded-date"
  | "severity"
  | "-severity"
  | "stage"
  | "-stage"
  | "subject"
  | "-subject"
  | "verification-status"
  | "-verification-status"
  | "code"
  | "-code"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class ConditionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Condition";

  /**
   * Abatement as age or age range
   * @fhirSearchType `quantity`
   * @fhirPath `Condition.abatement.as(Age) | Condition.abatement.as(Range)`
   */
  abatementAge(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("abatement-age", ...args);
  }
  /**
   * Date-related abatements (dateTime and period)
   * @fhirSearchType `date`
   * @fhirPath `Condition.abatement.as(dateTime) | Condition.abatement.as(Period)`
   */
  abatementDate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("abatement-date", ...args);
  }
  /**
   * Abatement as a string
   * @fhirSearchType `string`
   * @fhirPath `Condition.abatement.as(string)`
   */
  abatementString(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("abatement-string", ...args);
  }
  /**
   * Person who asserts this condition
   * @fhirSearchType `reference`
   * @fhirPath `Condition.asserter`
   */
  asserter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("asserter", ...args);
  }
  /**
   * Anatomical location, if relevant
   * @fhirSearchType `token`
   * @fhirPath `Condition.bodySite`
   */
  bodySite(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("body-site", ...args);
  }
  /**
   * The category of the condition
   * @fhirSearchType `token`
   * @fhirPath `Condition.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * The clinical status of the condition
   * @fhirSearchType `token`
   * @fhirPath `Condition.clinicalStatus`
   */
  clinicalStatus(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("clinical-status", ...args);
  }
  /**
   * Encounter created as part of
   * @fhirSearchType `reference`
   * @fhirPath `Condition.encounter`
   */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
   * Supporting information found elsewhere
   * @fhirSearchType `reference`
   * @fhirPath `Condition.evidence.detail`
   */
  evidenceDetail(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("evidence-detail", ...args);
  }
  /**
   * Manifestation/symptom
   * @fhirSearchType `token`
   * @fhirPath `Condition.evidence.code`
   */
  evidence(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("evidence", ...args);
  }
  /**
   * Onsets as age or age range
   * @fhirSearchType `quantity`
   * @fhirPath `Condition.onset.as(Age) | Condition.onset.as(Range)`
   */
  onsetAge(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("onset-age", ...args);
  }
  /**
   * Date related onsets (dateTime and Period)
   * @fhirSearchType `date`
   * @fhirPath `Condition.onset.as(dateTime) | Condition.onset.as(Period)`
   */
  onsetDate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("onset-date", ...args);
  }
  /**
   * Onsets as a string
   * @fhirSearchType `string`
   * @fhirPath `Condition.onset.as(string)`
   */
  onsetInfo(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("onset-info", ...args);
  }
  /**
   * Date record was first recorded
   * @fhirSearchType `date`
   * @fhirPath `Condition.recordedDate`
   */
  recordedDate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("recorded-date", ...args);
  }
  /**
   * The severity of the condition
   * @fhirSearchType `token`
   * @fhirPath `Condition.severity`
   */
  severity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("severity", ...args);
  }
  /**
   * Simple summary (disease specific)
   * @fhirSearchType `token`
   * @fhirPath `Condition.stage.summary`
   */
  stage(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("stage", ...args);
  }
  /**
   * Who has the condition?
   * @fhirSearchType `reference`
   * @fhirPath `Condition.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
   * unconfirmed | provisional | differential | confirmed | refuted |
   * entered-in-error
   * @fhirSearchType `token`
   * @fhirPath `Condition.verificationStatus`
   */
  verificationStatus(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("verification-status", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code
 * that identifies the allergy or intolerance
* [Condition](condition.html): Code
 * for the condition
* [DeviceRequest](devicerequest.html): Code for what is being
 * requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the
 * report, as opposed to codes for the atomic results, which are the names on the
 * observation resource referred to from the result
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
*
 * [List](list.html): What the purpose of this list is
*
 * [Medication](medication.html): Returns medications for a specific code
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication code
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine code
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions of this medication code
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication code
* [Observation](observation.html): The code of the observation
 * type
* [Procedure](procedure.html): A code to identify a  procedure
*
 * [ServiceRequest](servicerequest.html): What is being requested/ordered
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.code | AllergyIntolerance.reaction.substance | Condition.code | (DeviceRequest.code as CodeableConcept) | DiagnosticReport.code | FamilyMemberHistory.condition.code | List.code | Medication.code | (MedicationAdministration.medication as CodeableConcept) | (MedicationDispense.medication as CodeableConcept) | (MedicationRequest.medication as CodeableConcept) | (MedicationStatement.medication as CodeableConcept) | Observation.code | Procedure.code | ServiceRequest.code`
 */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: ConditionSortOrder | ConditionSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ConsentSortOrder =
  | DomainResourceSortOrder
  | "action"
  | "-action"
  | "actor"
  | "-actor"
  | "category"
  | "-category"
  | "consentor"
  | "-consentor"
  | "data"
  | "-data"
  | "organization"
  | "-organization"
  | "period"
  | "-period"
  | "purpose"
  | "-purpose"
  | "scope"
  | "-scope"
  | "security-label"
  | "-security-label"
  | "source-reference"
  | "-source-reference"
  | "status"
  | "-status"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class ConsentFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Consent";

  /**
   * Actions controlled by this rule
   * @fhirSearchType `token`
   * @fhirPath `Consent.provision.action`
   */
  action(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("action", ...args);
  }
  /**
   * Resource for the actor (or group, by role)
   * @fhirSearchType `reference`
   * @fhirPath `Consent.provision.actor.reference`
   */
  actor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("actor", ...args);
  }
  /**
   * Classification of the consent statement - for indexing/retrieval
   * @fhirSearchType `token`
   * @fhirPath `Consent.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * Who is agreeing to the policy and rules
   * @fhirSearchType `reference`
   * @fhirPath `Consent.performer`
   */
  consentor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("consentor", ...args);
  }
  /**
   * The actual data reference
   * @fhirSearchType `reference`
   * @fhirPath `Consent.provision.data.reference`
   */
  data(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("data", ...args);
  }
  /**
   * Custodian of the consent
   * @fhirSearchType `reference`
   * @fhirPath `Consent.organization`
   */
  organization(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("organization", ...args);
  }
  /**
   * Timeframe for this rule
   * @fhirSearchType `date`
   * @fhirPath `Consent.provision.period`
   */
  period(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("period", ...args);
  }
  /**
   * Context of activities covered by this rule
   * @fhirSearchType `token`
   * @fhirPath `Consent.provision.purpose`
   */
  purpose(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("purpose", ...args);
  }
  /**
   * Which of the four areas this resource covers (extensible)
   * @fhirSearchType `token`
   * @fhirPath `Consent.scope`
   */
  scope(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("scope", ...args);
  }
  /**
   * Security Labels that define affected resources
   * @fhirSearchType `token`
   * @fhirPath `Consent.provision.securityLabel`
   */
  securityLabel(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("security-label", ...args);
  }
  /**
   * Search by reference to a Consent, DocumentReference, Contract  or
   * QuestionnaireResponse
   * @fhirSearchType `reference`
   * @fhirPath `Consent.source`
   */
  sourceReference(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("source-reference", ...args);
  }
  /**
   * draft | proposed | active | rejected | inactive | entered-in-error
   * @fhirSearchType `token`
   * @fhirPath `Consent.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date
 * first version of the resource instance was recorded
*
 * [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html):
 * Time period team covers
* [ClinicalImpression](clinicalimpression.html): When
 * the assessment was documented
* [Composition](composition.html): Composition
 * editing time
* [Consent](consent.html): When this Consent was created or
 * indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant
 * time of the report
* [Encounter](encounter.html): A date within the period the
 * Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date
 * search value falls within the episode of care's period
*
 * [FamilyMemberHistory](familymemberhistory.html): When history was recorded or
 * last updated
* [Flag](flag.html): Time period when flag is active
*
 * [Immunization](immunization.html): Vaccination  (non)-Administration Date
*
 * [List](list.html): When the list was prepared
*
 * [Observation](observation.html): Obtained date/time. If the obtained element is
 * a period, a date that falls in the period
* [Procedure](procedure.html): When
 * the procedure was performed
* [RiskAssessment](riskassessment.html): When was
 * assessment made?
* [SupplyRequest](supplyrequest.html): When the request was
 * made
 * @fhirSearchType `date`
 * @fhirPath `AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: ConsentSortOrder | ConsentSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ContractSortOrder =
  | DomainResourceSortOrder
  | "authority"
  | "-authority"
  | "domain"
  | "-domain"
  | "identifier"
  | "-identifier"
  | "instantiates"
  | "-instantiates"
  | "issued"
  | "-issued"
  | "patient"
  | "-patient"
  | "signer"
  | "-signer"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "url"
  | "-url";

export class ContractFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Contract";

  /**
   * The authority of the contract
   * @fhirSearchType `reference`
   * @fhirPath `Contract.authority`
   */
  authority(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("authority", ...args);
  }
  /**
   * The domain of the contract
   * @fhirSearchType `reference`
   * @fhirPath `Contract.domain`
   */
  domain(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("domain", ...args);
  }
  /**
   * The identity of the contract
   * @fhirSearchType `token`
   * @fhirPath `Contract.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * A source definition of the contract
   * @fhirSearchType `uri`
   * @fhirPath `Contract.instantiatesUri`
   */
  instantiates(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("instantiates", ...args);
  }
  /**
   * The date/time the contract was issued
   * @fhirSearchType `date`
   * @fhirPath `Contract.issued`
   */
  issued(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("issued", ...args);
  }
  /**
   * The identity of the subject of the contract (if a patient)
   * @fhirSearchType `reference`
   * @fhirPath `Contract.subject.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * Contract Signatory Party
   * @fhirSearchType `reference`
   * @fhirPath `Contract.signer.party`
   */
  signer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("signer", ...args);
  }
  /**
   * The status of the contract
   * @fhirSearchType `token`
   * @fhirPath `Contract.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The identity of the subject of the contract
   * @fhirSearchType `reference`
   * @fhirPath `Contract.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
   * The basal contract definition
   * @fhirSearchType `uri`
   * @fhirPath `Contract.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: ContractSortOrder | ContractSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type CoverageSortOrder =
  | DomainResourceSortOrder
  | "beneficiary"
  | "-beneficiary"
  | "class-type"
  | "-class-type"
  | "class-value"
  | "-class-value"
  | "dependent"
  | "-dependent"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "payor"
  | "-payor"
  | "policy-holder"
  | "-policy-holder"
  | "status"
  | "-status"
  | "subscriber"
  | "-subscriber"
  | "type"
  | "-type";

export class CoverageFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Coverage";

  /**
   * Covered party
   * @fhirSearchType `reference`
   * @fhirPath `Coverage.beneficiary`
   */
  beneficiary(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("beneficiary", ...args);
  }
  /**
   * Coverage class (eg. plan, group)
   * @fhirSearchType `token`
   * @fhirPath `Coverage.class.type`
   */
  classType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("class-type", ...args);
  }
  /**
   * Value of the class (eg. Plan number, group number)
   * @fhirSearchType `string`
   * @fhirPath `Coverage.class.value`
   */
  classValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("class-value", ...args);
  }
  /**
   * Dependent number
   * @fhirSearchType `string`
   * @fhirPath `Coverage.dependent`
   */
  dependent(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("dependent", ...args);
  }
  /**
   * The primary identifier of the insured and the coverage
   * @fhirSearchType `token`
   * @fhirPath `Coverage.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Retrieve coverages for a patient
   * @fhirSearchType `reference`
   * @fhirPath `Coverage.beneficiary`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * The identity of the insurer or party paying for services
   * @fhirSearchType `reference`
   * @fhirPath `Coverage.payor`
   */
  payor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("payor", ...args);
  }
  /**
   * Reference to the policyholder
   * @fhirSearchType `reference`
   * @fhirPath `Coverage.policyHolder`
   */
  policyHolder(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("policy-holder", ...args);
  }
  /**
   * The status of the Coverage
   * @fhirSearchType `token`
   * @fhirPath `Coverage.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Reference to the subscriber
   * @fhirSearchType `reference`
   * @fhirPath `Coverage.subscriber`
   */
  subscriber(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subscriber", ...args);
  }
  /**
   * The kind of coverage (health plan, auto, Workers Compensation)
   * @fhirSearchType `token`
   * @fhirPath `Coverage.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: CoverageSortOrder | CoverageSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type CoverageEligibilityRequestSortOrder =
  | DomainResourceSortOrder
  | "created"
  | "-created"
  | "enterer"
  | "-enterer"
  | "facility"
  | "-facility"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "provider"
  | "-provider"
  | "status"
  | "-status";

export class CoverageEligibilityRequestFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "CoverageEligibilityRequest";

  /**
   * The creation date for the EOB
   * @fhirSearchType `date`
   * @fhirPath `CoverageEligibilityRequest.created`
   */
  created(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("created", ...args);
  }
  /**
   * The party who is responsible for the request
   * @fhirSearchType `reference`
   * @fhirPath `CoverageEligibilityRequest.enterer`
   */
  enterer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("enterer", ...args);
  }
  /**
   * Facility responsible for the goods and services
   * @fhirSearchType `reference`
   * @fhirPath `CoverageEligibilityRequest.facility`
   */
  facility(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("facility", ...args);
  }
  /**
   * The business identifier of the Eligibility
   * @fhirSearchType `token`
   * @fhirPath `CoverageEligibilityRequest.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The reference to the patient
   * @fhirSearchType `reference`
   * @fhirPath `CoverageEligibilityRequest.patient`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * The reference to the provider
   * @fhirSearchType `reference`
   * @fhirPath `CoverageEligibilityRequest.provider`
   */
  provider(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("provider", ...args);
  }
  /**
   * The status of the EligibilityRequest
   * @fhirSearchType `token`
   * @fhirPath `CoverageEligibilityRequest.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | CoverageEligibilityRequestSortOrder
      | CoverageEligibilityRequestSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type CoverageEligibilityResponseSortOrder =
  | DomainResourceSortOrder
  | "created"
  | "-created"
  | "disposition"
  | "-disposition"
  | "identifier"
  | "-identifier"
  | "insurer"
  | "-insurer"
  | "outcome"
  | "-outcome"
  | "patient"
  | "-patient"
  | "request"
  | "-request"
  | "requestor"
  | "-requestor"
  | "status"
  | "-status";

export class CoverageEligibilityResponseFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "CoverageEligibilityResponse";

  /**
   * The creation date
   * @fhirSearchType `date`
   * @fhirPath `CoverageEligibilityResponse.created`
   */
  created(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("created", ...args);
  }
  /**
   * The contents of the disposition message
   * @fhirSearchType `string`
   * @fhirPath `CoverageEligibilityResponse.disposition`
   */
  disposition(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("disposition", ...args);
  }
  /**
   * The business identifier
   * @fhirSearchType `token`
   * @fhirPath `CoverageEligibilityResponse.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The organization which generated this resource
   * @fhirSearchType `reference`
   * @fhirPath `CoverageEligibilityResponse.insurer`
   */
  insurer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("insurer", ...args);
  }
  /**
   * The processing outcome
   * @fhirSearchType `token`
   * @fhirPath `CoverageEligibilityResponse.outcome`
   */
  outcome(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("outcome", ...args);
  }
  /**
   * The reference to the patient
   * @fhirSearchType `reference`
   * @fhirPath `CoverageEligibilityResponse.patient`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * The EligibilityRequest reference
   * @fhirSearchType `reference`
   * @fhirPath `CoverageEligibilityResponse.request`
   */
  request(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("request", ...args);
  }
  /**
   * The EligibilityRequest provider
   * @fhirSearchType `reference`
   * @fhirPath `CoverageEligibilityResponse.requestor`
   */
  requestor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("requestor", ...args);
  }
  /**
   * The EligibilityRequest status
   * @fhirSearchType `token`
   * @fhirPath `CoverageEligibilityResponse.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | CoverageEligibilityResponseSortOrder
      | CoverageEligibilityResponseSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type DetectedIssueSortOrder =
  | DomainResourceSortOrder
  | "author"
  | "-author"
  | "code"
  | "-code"
  | "identified"
  | "-identified"
  | "implicated"
  | "-implicated"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class DetectedIssueFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "DetectedIssue";

  /**
   * The provider or device that identified the issue
   * @fhirSearchType `reference`
   * @fhirPath `DetectedIssue.author`
   */
  author(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("author", ...args);
  }
  /**
   * Issue Category, e.g. drug-drug, duplicate therapy, etc.
   * @fhirSearchType `token`
   * @fhirPath `DetectedIssue.code`
   */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
   * When identified
   * @fhirSearchType `date`
   * @fhirPath `DetectedIssue.identified`
   */
  identified(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("identified", ...args);
  }
  /**
   * Problem resource
   * @fhirSearchType `reference`
   * @fhirPath `DetectedIssue.implicated`
   */
  implicated(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("implicated", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | DetectedIssueSortOrder
      | DetectedIssueSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type DeviceSortOrder =
  | DomainResourceSortOrder
  | "device-name"
  | "-device-name"
  | "identifier"
  | "-identifier"
  | "location"
  | "-location"
  | "manufacturer"
  | "-manufacturer"
  | "model"
  | "-model"
  | "organization"
  | "-organization"
  | "patient"
  | "-patient"
  | "status"
  | "-status"
  | "type"
  | "-type"
  | "udi-carrier"
  | "-udi-carrier"
  | "udi-di"
  | "-udi-di"
  | "url"
  | "-url";

export class DeviceFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Device";

  /**
   * A server defined search that may match any of the string fields in
   * Device.deviceName or Device.type.
   * @fhirSearchType `string`
   * @fhirPath `Device.deviceName.name | Device.type.coding.display | Device.type.text`
   */
  deviceName(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("device-name", ...args);
  }
  /**
   * Instance id from manufacturer, owner, and others
   * @fhirSearchType `token`
   * @fhirPath `Device.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * A location, where the resource is found
   * @fhirSearchType `reference`
   * @fhirPath `Device.location`
   */
  location(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("location", ...args);
  }
  /**
   * The manufacturer of the device
   * @fhirSearchType `string`
   * @fhirPath `Device.manufacturer`
   */
  manufacturer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("manufacturer", ...args);
  }
  /**
   * The model of the device
   * @fhirSearchType `string`
   * @fhirPath `Device.modelNumber`
   */
  model(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("model", ...args);
  }
  /**
   * The organization responsible for the device
   * @fhirSearchType `reference`
   * @fhirPath `Device.owner`
   */
  organization(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("organization", ...args);
  }
  /**
   * Patient information, if the resource is affixed to a person
   * @fhirSearchType `reference`
   * @fhirPath `Device.patient`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * active | inactive | entered-in-error | unknown
   * @fhirSearchType `token`
   * @fhirPath `Device.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The type of the device
   * @fhirSearchType `token`
   * @fhirPath `Device.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }
  /**
   * UDI Barcode (RFID or other technology) string in *HRF* format.
   * @fhirSearchType `string`
   * @fhirPath `Device.udiCarrier.carrierHRF`
   */
  udiCarrier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("udi-carrier", ...args);
  }
  /**
   * The udi Device Identifier (DI)
   * @fhirSearchType `string`
   * @fhirPath `Device.udiCarrier.deviceIdentifier`
   */
  udiDi(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("udi-di", ...args);
  }
  /**
   * Network address to contact device
   * @fhirSearchType `uri`
   * @fhirPath `Device.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: DeviceSortOrder | DeviceSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type DeviceDefinitionSortOrder =
  | DomainResourceSortOrder
  | "identifier"
  | "-identifier"
  | "parent"
  | "-parent"
  | "type"
  | "-type";

export class DeviceDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "DeviceDefinition";

  /**
   * The identifier of the component
   * @fhirSearchType `token`
   * @fhirPath `DeviceDefinition.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The parent DeviceDefinition resource
   * @fhirSearchType `reference`
   * @fhirPath `DeviceDefinition.parentDevice`
   */
  parent(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("parent", ...args);
  }
  /**
   * The device component type
   * @fhirSearchType `token`
   * @fhirPath `DeviceDefinition.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | DeviceDefinitionSortOrder
      | DeviceDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type DeviceMetricSortOrder =
  | DomainResourceSortOrder
  | "category"
  | "-category"
  | "identifier"
  | "-identifier"
  | "parent"
  | "-parent"
  | "source"
  | "-source"
  | "type"
  | "-type";

export class DeviceMetricFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "DeviceMetric";

  /**
   * The category of the metric
   * @fhirSearchType `token`
   * @fhirPath `DeviceMetric.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * The identifier of the metric
   * @fhirSearchType `token`
   * @fhirPath `DeviceMetric.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The parent DeviceMetric resource
   * @fhirSearchType `reference`
   * @fhirPath `DeviceMetric.parent`
   */
  parent(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("parent", ...args);
  }
  /**
   * The device resource
   * @fhirSearchType `reference`
   * @fhirPath `DeviceMetric.source`
   */
  source(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("source", ...args);
  }
  /**
   * The component type
   * @fhirSearchType `token`
   * @fhirPath `DeviceMetric.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | DeviceMetricSortOrder
      | DeviceMetricSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type DeviceRequestSortOrder =
  | DomainResourceSortOrder
  | "authored-on"
  | "-authored-on"
  | "based-on"
  | "-based-on"
  | "device"
  | "-device"
  | "event-date"
  | "-event-date"
  | "group-identifier"
  | "-group-identifier"
  | "instantiates-canonical"
  | "-instantiates-canonical"
  | "instantiates-uri"
  | "-instantiates-uri"
  | "insurance"
  | "-insurance"
  | "intent"
  | "-intent"
  | "performer"
  | "-performer"
  | "prior-request"
  | "-prior-request"
  | "requester"
  | "-requester"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "code"
  | "-code"
  | "encounter"
  | "-encounter"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class DeviceRequestFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "DeviceRequest";

  /**
   * When the request transitioned to being actionable
   * @fhirSearchType `date`
   * @fhirPath `DeviceRequest.authoredOn`
   */
  authoredOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("authored-on", ...args);
  }
  /**
   * Plan/proposal/order fulfilled by this request
   * @fhirSearchType `reference`
   * @fhirPath `DeviceRequest.basedOn`
   */
  basedOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("based-on", ...args);
  }
  /**
   * Reference to resource that is being requested/ordered
   * @fhirSearchType `reference`
   * @fhirPath `(DeviceRequest.code as Reference)`
   */
  device(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("device", ...args);
  }
  /**
   * When service should occur
   * @fhirSearchType `date`
   * @fhirPath `(DeviceRequest.occurrence as dateTime) | (DeviceRequest.occurrence as Period)`
   */
  eventDate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("event-date", ...args);
  }
  /**
   * Composite request this is part of
   * @fhirSearchType `token`
   * @fhirPath `DeviceRequest.groupIdentifier`
   */
  groupIdentifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("group-identifier", ...args);
  }
  /**
   * Instantiates FHIR protocol or definition
   * @fhirSearchType `reference`
   * @fhirPath `DeviceRequest.instantiatesCanonical`
   */
  instantiatesCanonical(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("instantiates-canonical", ...args);
  }
  /**
   * Instantiates external protocol or definition
   * @fhirSearchType `uri`
   * @fhirPath `DeviceRequest.instantiatesUri`
   */
  instantiatesUri(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("instantiates-uri", ...args);
  }
  /**
   * Associated insurance coverage
   * @fhirSearchType `reference`
   * @fhirPath `DeviceRequest.insurance`
   */
  insurance(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("insurance", ...args);
  }
  /**
   * proposal | plan | original-order |reflex-order
   * @fhirSearchType `token`
   * @fhirPath `DeviceRequest.intent`
   */
  intent(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("intent", ...args);
  }
  /**
   * Desired performer for service
   * @fhirSearchType `reference`
   * @fhirPath `DeviceRequest.performer`
   */
  performer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("performer", ...args);
  }
  /**
   * Request takes the place of referenced completed or terminated requests
   * @fhirSearchType `reference`
   * @fhirPath `DeviceRequest.priorRequest`
   */
  priorRequest(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("prior-request", ...args);
  }
  /**
   * Who/what is requesting service
   * @fhirSearchType `reference`
   * @fhirPath `DeviceRequest.requester`
   */
  requester(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("requester", ...args);
  }
  /**
   * entered-in-error | draft | active |suspended | completed
   * @fhirSearchType `token`
   * @fhirPath `DeviceRequest.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Individual the service is ordered for
   * @fhirSearchType `reference`
   * @fhirPath `DeviceRequest.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code
 * that identifies the allergy or intolerance
* [Condition](condition.html): Code
 * for the condition
* [DeviceRequest](devicerequest.html): Code for what is being
 * requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the
 * report, as opposed to codes for the atomic results, which are the names on the
 * observation resource referred to from the result
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
*
 * [List](list.html): What the purpose of this list is
*
 * [Medication](medication.html): Returns medications for a specific code
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication code
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine code
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions of this medication code
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication code
* [Observation](observation.html): The code of the observation
 * type
* [Procedure](procedure.html): A code to identify a  procedure
*
 * [ServiceRequest](servicerequest.html): What is being requested/ordered
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.code | AllergyIntolerance.reaction.substance | Condition.code | (DeviceRequest.code as CodeableConcept) | DiagnosticReport.code | FamilyMemberHistory.condition.code | List.code | Medication.code | (MedicationAdministration.medication as CodeableConcept) | (MedicationDispense.medication as CodeableConcept) | (MedicationRequest.medication as CodeableConcept) | (MedicationStatement.medication as CodeableConcept) | Observation.code | Procedure.code | ServiceRequest.code`
 */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
 * Multiple Resources: 

* [Composition](composition.html): Context of the
 * Composition
* [DeviceRequest](devicerequest.html): Encounter during which
 * request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter
 * when the order was made
* [DocumentReference](documentreference.html): Context
 * of the document  content
* [Flag](flag.html): Alert relevant during
 * encounter
* [List](list.html): Context in which list created
*
 * [NutritionOrder](nutritionorder.html): Return nutrition orders with this
 * encounter identifier
* [Observation](observation.html): Encounter related to
 * the observation
* [Procedure](procedure.html): Encounter created as part of
*
 * [RiskAssessment](riskassessment.html): Where was assessment performed?
*
 * [ServiceRequest](servicerequest.html): An encounter in which this request is
 * made
* [VisionPrescription](visionprescription.html): Return prescriptions with
 * this encounter identifier
 * @fhirSearchType `reference`
 * @fhirPath `Composition.encounter | DeviceRequest.encounter | DiagnosticReport.encounter | DocumentReference.context.encounter.where(resolve() is Encounter) | Flag.encounter | List.encounter | NutritionOrder.encounter | Observation.encounter | Procedure.encounter | RiskAssessment.encounter | ServiceRequest.encounter | VisionPrescription.encounter`
 */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | DeviceRequestSortOrder
      | DeviceRequestSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type DeviceUseStatementSortOrder =
  | DomainResourceSortOrder
  | "device"
  | "-device"
  | "identifier"
  | "-identifier"
  | "subject"
  | "-subject"
  | "patient"
  | "-patient";

export class DeviceUseStatementFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "DeviceUseStatement";

  /**
   * Search by device
   * @fhirSearchType `reference`
   * @fhirPath `DeviceUseStatement.device`
   */
  device(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("device", ...args);
  }
  /**
   * Search by identifier
   * @fhirSearchType `token`
   * @fhirPath `DeviceUseStatement.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Search by subject
   * @fhirSearchType `reference`
   * @fhirPath `DeviceUseStatement.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | DeviceUseStatementSortOrder
      | DeviceUseStatementSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type DiagnosticReportSortOrder =
  | DomainResourceSortOrder
  | "based-on"
  | "-based-on"
  | "category"
  | "-category"
  | "conclusion"
  | "-conclusion"
  | "issued"
  | "-issued"
  | "media"
  | "-media"
  | "performer"
  | "-performer"
  | "result"
  | "-result"
  | "results-interpreter"
  | "-results-interpreter"
  | "specimen"
  | "-specimen"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "code"
  | "-code"
  | "date"
  | "-date"
  | "encounter"
  | "-encounter"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class DiagnosticReportFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "DiagnosticReport";

  /**
   * Reference to the service request.
   * @fhirSearchType `reference`
   * @fhirPath `DiagnosticReport.basedOn`
   */
  basedOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("based-on", ...args);
  }
  /**
   * Which diagnostic discipline/department created the report
   * @fhirSearchType `token`
   * @fhirPath `DiagnosticReport.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * A coded conclusion (interpretation/impression) on the report
   * @fhirSearchType `token`
   * @fhirPath `DiagnosticReport.conclusionCode`
   */
  conclusion(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("conclusion", ...args);
  }
  /**
   * When the report was issued
   * @fhirSearchType `date`
   * @fhirPath `DiagnosticReport.issued`
   */
  issued(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("issued", ...args);
  }
  /**
   * A reference to the image source.
   * @fhirSearchType `reference`
   * @fhirPath `DiagnosticReport.media.link`
   */
  media(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("media", ...args);
  }
  /**
   * Who is responsible for the report
   * @fhirSearchType `reference`
   * @fhirPath `DiagnosticReport.performer`
   */
  performer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("performer", ...args);
  }
  /**
   * Link to an atomic result (observation resource)
   * @fhirSearchType `reference`
   * @fhirPath `DiagnosticReport.result`
   */
  result(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("result", ...args);
  }
  /**
   * Who was the source of the report
   * @fhirSearchType `reference`
   * @fhirPath `DiagnosticReport.resultsInterpreter`
   */
  resultsInterpreter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("results-interpreter", ...args);
  }
  /**
   * The specimen details
   * @fhirSearchType `reference`
   * @fhirPath `DiagnosticReport.specimen`
   */
  specimen(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("specimen", ...args);
  }
  /**
   * The status of the report
   * @fhirSearchType `token`
   * @fhirPath `DiagnosticReport.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The subject of the report
   * @fhirSearchType `reference`
   * @fhirPath `DiagnosticReport.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code
 * that identifies the allergy or intolerance
* [Condition](condition.html): Code
 * for the condition
* [DeviceRequest](devicerequest.html): Code for what is being
 * requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the
 * report, as opposed to codes for the atomic results, which are the names on the
 * observation resource referred to from the result
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
*
 * [List](list.html): What the purpose of this list is
*
 * [Medication](medication.html): Returns medications for a specific code
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication code
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine code
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions of this medication code
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication code
* [Observation](observation.html): The code of the observation
 * type
* [Procedure](procedure.html): A code to identify a  procedure
*
 * [ServiceRequest](servicerequest.html): What is being requested/ordered
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.code | AllergyIntolerance.reaction.substance | Condition.code | (DeviceRequest.code as CodeableConcept) | DiagnosticReport.code | FamilyMemberHistory.condition.code | List.code | Medication.code | (MedicationAdministration.medication as CodeableConcept) | (MedicationDispense.medication as CodeableConcept) | (MedicationRequest.medication as CodeableConcept) | (MedicationStatement.medication as CodeableConcept) | Observation.code | Procedure.code | ServiceRequest.code`
 */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date
 * first version of the resource instance was recorded
*
 * [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html):
 * Time period team covers
* [ClinicalImpression](clinicalimpression.html): When
 * the assessment was documented
* [Composition](composition.html): Composition
 * editing time
* [Consent](consent.html): When this Consent was created or
 * indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant
 * time of the report
* [Encounter](encounter.html): A date within the period the
 * Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date
 * search value falls within the episode of care's period
*
 * [FamilyMemberHistory](familymemberhistory.html): When history was recorded or
 * last updated
* [Flag](flag.html): Time period when flag is active
*
 * [Immunization](immunization.html): Vaccination  (non)-Administration Date
*
 * [List](list.html): When the list was prepared
*
 * [Observation](observation.html): Obtained date/time. If the obtained element is
 * a period, a date that falls in the period
* [Procedure](procedure.html): When
 * the procedure was performed
* [RiskAssessment](riskassessment.html): When was
 * assessment made?
* [SupplyRequest](supplyrequest.html): When the request was
 * made
 * @fhirSearchType `date`
 * @fhirPath `AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [Composition](composition.html): Context of the
 * Composition
* [DeviceRequest](devicerequest.html): Encounter during which
 * request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter
 * when the order was made
* [DocumentReference](documentreference.html): Context
 * of the document  content
* [Flag](flag.html): Alert relevant during
 * encounter
* [List](list.html): Context in which list created
*
 * [NutritionOrder](nutritionorder.html): Return nutrition orders with this
 * encounter identifier
* [Observation](observation.html): Encounter related to
 * the observation
* [Procedure](procedure.html): Encounter created as part of
*
 * [RiskAssessment](riskassessment.html): Where was assessment performed?
*
 * [ServiceRequest](servicerequest.html): An encounter in which this request is
 * made
* [VisionPrescription](visionprescription.html): Return prescriptions with
 * this encounter identifier
 * @fhirSearchType `reference`
 * @fhirPath `Composition.encounter | DeviceRequest.encounter | DiagnosticReport.encounter | DocumentReference.context.encounter.where(resolve() is Encounter) | Flag.encounter | List.encounter | NutritionOrder.encounter | Observation.encounter | Procedure.encounter | RiskAssessment.encounter | ServiceRequest.encounter | VisionPrescription.encounter`
 */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | DiagnosticReportSortOrder
      | DiagnosticReportSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type DocumentManifestSortOrder =
  | DomainResourceSortOrder
  | "author"
  | "-author"
  | "created"
  | "-created"
  | "description"
  | "-description"
  | "item"
  | "-item"
  | "recipient"
  | "-recipient"
  | "related-id"
  | "-related-id"
  | "related-ref"
  | "-related-ref"
  | "source"
  | "-source"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "type"
  | "-type";

export class DocumentManifestFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "DocumentManifest";

  /**
   * Who and/or what authored the DocumentManifest
   * @fhirSearchType `reference`
   * @fhirPath `DocumentManifest.author`
   */
  author(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("author", ...args);
  }
  /**
   * When this document manifest created
   * @fhirSearchType `date`
   * @fhirPath `DocumentManifest.created`
   */
  created(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("created", ...args);
  }
  /**
   * Human-readable description (title)
   * @fhirSearchType `string`
   * @fhirPath `DocumentManifest.description`
   */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
   * Items in manifest
   * @fhirSearchType `reference`
   * @fhirPath `DocumentManifest.content`
   */
  item(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("item", ...args);
  }
  /**
   * Intended to get notified about this set of documents
   * @fhirSearchType `reference`
   * @fhirPath `DocumentManifest.recipient`
   */
  recipient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("recipient", ...args);
  }
  /**
   * Identifiers of things that are related
   * @fhirSearchType `token`
   * @fhirPath `DocumentManifest.related.identifier`
   */
  relatedId(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("related-id", ...args);
  }
  /**
   * Related Resource
   * @fhirSearchType `reference`
   * @fhirPath `DocumentManifest.related.ref`
   */
  relatedRef(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("related-ref", ...args);
  }
  /**
   * The source system/application/software
   * @fhirSearchType `uri`
   * @fhirPath `DocumentManifest.source`
   */
  source(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("source", ...args);
  }
  /**
   * current | superseded | entered-in-error
   * @fhirSearchType `token`
   * @fhirPath `DocumentManifest.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The subject of the set of documents
   * @fhirSearchType `reference`
   * @fhirPath `DocumentManifest.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): allergy
 * | intolerance - Underlying mechanism (if known)
*
 * [Composition](composition.html): Kind of composition (LOINC if possible)
*
 * [DocumentManifest](documentmanifest.html): Kind of document set
*
 * [DocumentReference](documentreference.html): Kind of document (LOINC if
 * possible)
* [Encounter](encounter.html): Specific type of encounter
*
 * [EpisodeOfCare](episodeofcare.html): Type/class  - e.g. specialist referral,
 * disease management
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.type | Composition.type | DocumentManifest.type | DocumentReference.type | Encounter.type | EpisodeOfCare.type`
 */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | DocumentManifestSortOrder
      | DocumentManifestSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type DocumentReferenceSortOrder =
  | DomainResourceSortOrder
  | "authenticator"
  | "-authenticator"
  | "author"
  | "-author"
  | "category"
  | "-category"
  | "contenttype"
  | "-contenttype"
  | "custodian"
  | "-custodian"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "event"
  | "-event"
  | "facility"
  | "-facility"
  | "format"
  | "-format"
  | "language"
  | "-language"
  | "location"
  | "-location"
  | "period"
  | "-period"
  | "related"
  | "-related"
  | "relatesto"
  | "-relatesto"
  | "relation"
  | "-relation"
  | "relationship"
  | "-relationship"
  | "security-label"
  | "-security-label"
  | "setting"
  | "-setting"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "encounter"
  | "-encounter"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "type"
  | "-type";

export class DocumentReferenceFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "DocumentReference";

  /**
   * Who/what authenticated the document
   * @fhirSearchType `reference`
   * @fhirPath `DocumentReference.authenticator`
   */
  authenticator(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("authenticator", ...args);
  }
  /**
   * Who and/or what authored the document
   * @fhirSearchType `reference`
   * @fhirPath `DocumentReference.author`
   */
  author(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("author", ...args);
  }
  /**
   * Categorization of document
   * @fhirSearchType `token`
   * @fhirPath `DocumentReference.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * Mime type of the content, with charset etc.
   * @fhirSearchType `token`
   * @fhirPath `DocumentReference.content.attachment.contentType`
   */
  contenttype(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("contenttype", ...args);
  }
  /**
   * Organization which maintains the document
   * @fhirSearchType `reference`
   * @fhirPath `DocumentReference.custodian`
   */
  custodian(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("custodian", ...args);
  }
  /**
   * When this document reference was created
   * @fhirSearchType `date`
   * @fhirPath `DocumentReference.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * Human-readable description
   * @fhirSearchType `string`
   * @fhirPath `DocumentReference.description`
   */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
   * Main clinical acts documented
   * @fhirSearchType `token`
   * @fhirPath `DocumentReference.context.event`
   */
  event(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("event", ...args);
  }
  /**
   * Kind of facility where patient was seen
   * @fhirSearchType `token`
   * @fhirPath `DocumentReference.context.facilityType`
   */
  facility(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("facility", ...args);
  }
  /**
   * Format/content rules for the document
   * @fhirSearchType `token`
   * @fhirPath `DocumentReference.content.format`
   */
  format(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("format", ...args);
  }
  /**
   * Human language of the content (BCP-47)
   * @fhirSearchType `token`
   * @fhirPath `DocumentReference.content.attachment.language`
   */
  language(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("language", ...args);
  }
  /**
   * Uri where the data can be found
   * @fhirSearchType `uri`
   * @fhirPath `DocumentReference.content.attachment.url`
   */
  location(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("location", ...args);
  }
  /**
   * Time of service that is being documented
   * @fhirSearchType `date`
   * @fhirPath `DocumentReference.context.period`
   */
  period(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("period", ...args);
  }
  /**
   * Related identifiers or resources
   * @fhirSearchType `reference`
   * @fhirPath `DocumentReference.context.related`
   */
  related(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("related", ...args);
  }
  /**
   * Target of the relationship
   * @fhirSearchType `reference`
   * @fhirPath `DocumentReference.relatesTo.target`
   */
  relatesto(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("relatesto", ...args);
  }
  /**
   * replaces | transforms | signs | appends
   * @fhirSearchType `token`
   * @fhirPath `DocumentReference.relatesTo.code`
   */
  relation(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("relation", ...args);
  }
  /**
   * Combination of relation and relatesTo
   * @fhirSearchType `composite`
   * @fhirPath `DocumentReference.relatesTo`
   */
  relationship(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("relationship", ...args);
  }
  /**
   * Document security-tags
   * @fhirSearchType `token`
   * @fhirPath `DocumentReference.securityLabel`
   */
  securityLabel(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("security-label", ...args);
  }
  /**
   * Additional details about where the content was created (e.g. clinical specialty)
   * @fhirSearchType `token`
   * @fhirPath `DocumentReference.context.practiceSetting`
   */
  setting(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("setting", ...args);
  }
  /**
   * current | superseded | entered-in-error
   * @fhirSearchType `token`
   * @fhirPath `DocumentReference.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Who/what is the subject of the document
   * @fhirSearchType `reference`
   * @fhirPath `DocumentReference.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
 * Multiple Resources: 

* [Composition](composition.html): Context of the
 * Composition
* [DeviceRequest](devicerequest.html): Encounter during which
 * request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter
 * when the order was made
* [DocumentReference](documentreference.html): Context
 * of the document  content
* [Flag](flag.html): Alert relevant during
 * encounter
* [List](list.html): Context in which list created
*
 * [NutritionOrder](nutritionorder.html): Return nutrition orders with this
 * encounter identifier
* [Observation](observation.html): Encounter related to
 * the observation
* [Procedure](procedure.html): Encounter created as part of
*
 * [RiskAssessment](riskassessment.html): Where was assessment performed?
*
 * [ServiceRequest](servicerequest.html): An encounter in which this request is
 * made
* [VisionPrescription](visionprescription.html): Return prescriptions with
 * this encounter identifier
 * @fhirSearchType `reference`
 * @fhirPath `Composition.encounter | DeviceRequest.encounter | DiagnosticReport.encounter | DocumentReference.context.encounter.where(resolve() is Encounter) | Flag.encounter | List.encounter | NutritionOrder.encounter | Observation.encounter | Procedure.encounter | RiskAssessment.encounter | ServiceRequest.encounter | VisionPrescription.encounter`
 */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): allergy
 * | intolerance - Underlying mechanism (if known)
*
 * [Composition](composition.html): Kind of composition (LOINC if possible)
*
 * [DocumentManifest](documentmanifest.html): Kind of document set
*
 * [DocumentReference](documentreference.html): Kind of document (LOINC if
 * possible)
* [Encounter](encounter.html): Specific type of encounter
*
 * [EpisodeOfCare](episodeofcare.html): Type/class  - e.g. specialist referral,
 * disease management
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.type | Composition.type | DocumentManifest.type | DocumentReference.type | Encounter.type | EpisodeOfCare.type`
 */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | DocumentReferenceSortOrder
      | DocumentReferenceSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type EncounterSortOrder =
  | DomainResourceSortOrder
  | "account"
  | "-account"
  | "appointment"
  | "-appointment"
  | "based-on"
  | "-based-on"
  | "class"
  | "-class"
  | "diagnosis"
  | "-diagnosis"
  | "episode-of-care"
  | "-episode-of-care"
  | "length"
  | "-length"
  | "location-period"
  | "-location-period"
  | "location"
  | "-location"
  | "part-of"
  | "-part-of"
  | "participant-type"
  | "-participant-type"
  | "participant"
  | "-participant"
  | "practitioner"
  | "-practitioner"
  | "reason-code"
  | "-reason-code"
  | "reason-reference"
  | "-reason-reference"
  | "service-provider"
  | "-service-provider"
  | "special-arrangement"
  | "-special-arrangement"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "type"
  | "-type";

export class EncounterFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Encounter";

  /**
   * The set of accounts that may be used for billing for this Encounter
   * @fhirSearchType `reference`
   * @fhirPath `Encounter.account`
   */
  account(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("account", ...args);
  }
  /**
   * The appointment that scheduled this encounter
   * @fhirSearchType `reference`
   * @fhirPath `Encounter.appointment`
   */
  appointment(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("appointment", ...args);
  }
  /**
   * The ServiceRequest that initiated this encounter
   * @fhirSearchType `reference`
   * @fhirPath `Encounter.basedOn`
   */
  basedOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("based-on", ...args);
  }
  /**
   * Classification of patient encounter
   * @fhirSearchType `token`
   * @fhirPath `Encounter.class`
   */
  class(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("class", ...args);
  }
  /**
   * The diagnosis or procedure relevant to the encounter
   * @fhirSearchType `reference`
   * @fhirPath `Encounter.diagnosis.condition`
   */
  diagnosis(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("diagnosis", ...args);
  }
  /**
   * Episode(s) of care that this encounter should be recorded against
   * @fhirSearchType `reference`
   * @fhirPath `Encounter.episodeOfCare`
   */
  episodeOfCare(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("episode-of-care", ...args);
  }
  /**
   * Length of encounter in days
   * @fhirSearchType `quantity`
   * @fhirPath `Encounter.length`
   */
  length(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("length", ...args);
  }
  /**
   * Time period during which the patient was present at the location
   * @fhirSearchType `date`
   * @fhirPath `Encounter.location.period`
   */
  locationPeriod(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("location-period", ...args);
  }
  /**
   * Location the encounter takes place
   * @fhirSearchType `reference`
   * @fhirPath `Encounter.location.location`
   */
  location(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("location", ...args);
  }
  /**
   * Another Encounter this encounter is part of
   * @fhirSearchType `reference`
   * @fhirPath `Encounter.partOf`
   */
  partOf(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("part-of", ...args);
  }
  /**
   * Role of participant in encounter
   * @fhirSearchType `token`
   * @fhirPath `Encounter.participant.type`
   */
  participantType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("participant-type", ...args);
  }
  /**
   * Persons involved in the encounter other than the patient
   * @fhirSearchType `reference`
   * @fhirPath `Encounter.participant.individual`
   */
  participant(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("participant", ...args);
  }
  /**
   * Persons involved in the encounter other than the patient
   * @fhirSearchType `reference`
   * @fhirPath `Encounter.participant.individual.where(resolve() is Practitioner)`
   */
  practitioner(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("practitioner", ...args);
  }
  /**
   * Coded reason the encounter takes place
   * @fhirSearchType `token`
   * @fhirPath `Encounter.reasonCode`
   */
  reasonCode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("reason-code", ...args);
  }
  /**
   * Reason the encounter takes place (reference)
   * @fhirSearchType `reference`
   * @fhirPath `Encounter.reasonReference`
   */
  reasonReference(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("reason-reference", ...args);
  }
  /**
   * The organization (facility) responsible for this encounter
   * @fhirSearchType `reference`
   * @fhirPath `Encounter.serviceProvider`
   */
  serviceProvider(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("service-provider", ...args);
  }
  /**
   * Wheelchair, translator, stretcher, etc.
   * @fhirSearchType `token`
   * @fhirPath `Encounter.hospitalization.specialArrangement`
   */
  specialArrangement(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("special-arrangement", ...args);
  }
  /**
   * planned | arrived | triaged | in-progress | onleave | finished | cancelled +
   * @fhirSearchType `token`
   * @fhirPath `Encounter.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The patient or group present at the encounter
   * @fhirSearchType `reference`
   * @fhirPath `Encounter.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date
 * first version of the resource instance was recorded
*
 * [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html):
 * Time period team covers
* [ClinicalImpression](clinicalimpression.html): When
 * the assessment was documented
* [Composition](composition.html): Composition
 * editing time
* [Consent](consent.html): When this Consent was created or
 * indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant
 * time of the report
* [Encounter](encounter.html): A date within the period the
 * Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date
 * search value falls within the episode of care's period
*
 * [FamilyMemberHistory](familymemberhistory.html): When history was recorded or
 * last updated
* [Flag](flag.html): Time period when flag is active
*
 * [Immunization](immunization.html): Vaccination  (non)-Administration Date
*
 * [List](list.html): When the list was prepared
*
 * [Observation](observation.html): Obtained date/time. If the obtained element is
 * a period, a date that falls in the period
* [Procedure](procedure.html): When
 * the procedure was performed
* [RiskAssessment](riskassessment.html): When was
 * assessment made?
* [SupplyRequest](supplyrequest.html): When the request was
 * made
 * @fhirSearchType `date`
 * @fhirPath `AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): allergy
 * | intolerance - Underlying mechanism (if known)
*
 * [Composition](composition.html): Kind of composition (LOINC if possible)
*
 * [DocumentManifest](documentmanifest.html): Kind of document set
*
 * [DocumentReference](documentreference.html): Kind of document (LOINC if
 * possible)
* [Encounter](encounter.html): Specific type of encounter
*
 * [EpisodeOfCare](episodeofcare.html): Type/class  - e.g. specialist referral,
 * disease management
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.type | Composition.type | DocumentManifest.type | DocumentReference.type | Encounter.type | EpisodeOfCare.type`
 */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: EncounterSortOrder | EncounterSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type EndpointSortOrder =
  | DomainResourceSortOrder
  | "connection-type"
  | "-connection-type"
  | "identifier"
  | "-identifier"
  | "name"
  | "-name"
  | "organization"
  | "-organization"
  | "payload-type"
  | "-payload-type"
  | "status"
  | "-status";

export class EndpointFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Endpoint";

  /**
   * Protocol/Profile/Standard to be used with this endpoint connection
   * @fhirSearchType `token`
   * @fhirPath `Endpoint.connectionType`
   */
  connectionType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("connection-type", ...args);
  }
  /**
   * Identifies this endpoint across multiple systems
   * @fhirSearchType `token`
   * @fhirPath `Endpoint.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * A name that this endpoint can be identified by
   * @fhirSearchType `string`
   * @fhirPath `Endpoint.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * The organization that is managing the endpoint
   * @fhirSearchType `reference`
   * @fhirPath `Endpoint.managingOrganization`
   */
  organization(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("organization", ...args);
  }
  /**
   * The type of content that may be used at this endpoint (e.g. XDS Discharge
   * summaries)
   * @fhirSearchType `token`
   * @fhirPath `Endpoint.payloadType`
   */
  payloadType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("payload-type", ...args);
  }
  /**
   * The current status of the Endpoint (usually expected to be active)
   * @fhirSearchType `token`
   * @fhirPath `Endpoint.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: EndpointSortOrder | EndpointSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type EnrollmentRequestSortOrder =
  | DomainResourceSortOrder
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

export class EnrollmentRequestFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "EnrollmentRequest";

  /**
   * The business identifier of the Enrollment
   * @fhirSearchType `token`
   * @fhirPath `EnrollmentRequest.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The party to be enrolled
   * @fhirSearchType `reference`
   * @fhirPath `EnrollmentRequest.candidate`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * The status of the enrollment
   * @fhirSearchType `token`
   * @fhirPath `EnrollmentRequest.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The party to be enrolled
   * @fhirSearchType `reference`
   * @fhirPath `EnrollmentRequest.candidate`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | EnrollmentRequestSortOrder
      | EnrollmentRequestSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type EnrollmentResponseSortOrder =
  | DomainResourceSortOrder
  | "identifier"
  | "-identifier"
  | "request"
  | "-request"
  | "status"
  | "-status";

export class EnrollmentResponseFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "EnrollmentResponse";

  /**
   * The business identifier of the EnrollmentResponse
   * @fhirSearchType `token`
   * @fhirPath `EnrollmentResponse.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The reference to the claim
   * @fhirSearchType `reference`
   * @fhirPath `EnrollmentResponse.request`
   */
  request(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("request", ...args);
  }
  /**
   * The status of the enrollment response
   * @fhirSearchType `token`
   * @fhirPath `EnrollmentResponse.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | EnrollmentResponseSortOrder
      | EnrollmentResponseSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type EpisodeOfCareSortOrder =
  | DomainResourceSortOrder
  | "care-manager"
  | "-care-manager"
  | "condition"
  | "-condition"
  | "incoming-referral"
  | "-incoming-referral"
  | "organization"
  | "-organization"
  | "status"
  | "-status"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "type"
  | "-type";

export class EpisodeOfCareFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "EpisodeOfCare";

  /**
   * Care manager/care coordinator for the patient
   * @fhirSearchType `reference`
   * @fhirPath `EpisodeOfCare.careManager.where(resolve() is Practitioner)`
   */
  careManager(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("care-manager", ...args);
  }
  /**
   * Conditions/problems/diagnoses this episode of care is for
   * @fhirSearchType `reference`
   * @fhirPath `EpisodeOfCare.diagnosis.condition`
   */
  condition(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("condition", ...args);
  }
  /**
   * Incoming Referral Request
   * @fhirSearchType `reference`
   * @fhirPath `EpisodeOfCare.referralRequest`
   */
  incomingReferral(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("incoming-referral", ...args);
  }
  /**
   * The organization that has assumed the specific responsibilities of this
   * EpisodeOfCare
   * @fhirSearchType `reference`
   * @fhirPath `EpisodeOfCare.managingOrganization`
   */
  organization(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("organization", ...args);
  }
  /**
   * The current status of the Episode of Care as provided (does not check the status
   * history collection)
   * @fhirSearchType `token`
   * @fhirPath `EpisodeOfCare.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date
 * first version of the resource instance was recorded
*
 * [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html):
 * Time period team covers
* [ClinicalImpression](clinicalimpression.html): When
 * the assessment was documented
* [Composition](composition.html): Composition
 * editing time
* [Consent](consent.html): When this Consent was created or
 * indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant
 * time of the report
* [Encounter](encounter.html): A date within the period the
 * Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date
 * search value falls within the episode of care's period
*
 * [FamilyMemberHistory](familymemberhistory.html): When history was recorded or
 * last updated
* [Flag](flag.html): Time period when flag is active
*
 * [Immunization](immunization.html): Vaccination  (non)-Administration Date
*
 * [List](list.html): When the list was prepared
*
 * [Observation](observation.html): Obtained date/time. If the obtained element is
 * a period, a date that falls in the period
* [Procedure](procedure.html): When
 * the procedure was performed
* [RiskAssessment](riskassessment.html): When was
 * assessment made?
* [SupplyRequest](supplyrequest.html): When the request was
 * made
 * @fhirSearchType `date`
 * @fhirPath `AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): allergy
 * | intolerance - Underlying mechanism (if known)
*
 * [Composition](composition.html): Kind of composition (LOINC if possible)
*
 * [DocumentManifest](documentmanifest.html): Kind of document set
*
 * [DocumentReference](documentreference.html): Kind of document (LOINC if
 * possible)
* [Encounter](encounter.html): Specific type of encounter
*
 * [EpisodeOfCare](episodeofcare.html): Type/class  - e.g. specialist referral,
 * disease management
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.type | Composition.type | DocumentManifest.type | DocumentReference.type | Encounter.type | EpisodeOfCare.type`
 */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | EpisodeOfCareSortOrder
      | EpisodeOfCareSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type EventDefinitionSortOrder =
  | DomainResourceSortOrder
  | "composed-of"
  | "-composed-of"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "depends-on"
  | "-depends-on"
  | "derived-from"
  | "-derived-from"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "predecessor"
  | "-predecessor"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "successor"
  | "-successor"
  | "title"
  | "-title"
  | "topic"
  | "-topic"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class EventDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "EventDefinition";

  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `EventDefinition.relatedArtifact.where(type='composed-of').resource`
   */
  composedOf(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("composed-of", ...args);
  }
  /**
   * A quantity- or range-valued use context assigned to the event definition
   * @fhirSearchType `quantity`
   * @fhirPath `(EventDefinition.useContext.value as Quantity) | (EventDefinition.useContext.value as Range)`
   */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
   * A use context type and quantity- or range-based value assigned to the event
   * definition
   * @fhirSearchType `composite`
   * @fhirPath `EventDefinition.useContext`
   */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
   * A use context type and value assigned to the event definition
   * @fhirSearchType `composite`
   * @fhirPath `EventDefinition.useContext`
   */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
   * A type of use context assigned to the event definition
   * @fhirSearchType `token`
   * @fhirPath `EventDefinition.useContext.code`
   */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
   * A use context assigned to the event definition
   * @fhirSearchType `token`
   * @fhirPath `(EventDefinition.useContext.value as CodeableConcept)`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
   * The event definition publication date
   * @fhirSearchType `date`
   * @fhirPath `EventDefinition.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `EventDefinition.relatedArtifact.where(type='depends-on').resource`
   */
  dependsOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("depends-on", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `EventDefinition.relatedArtifact.where(type='derived-from').resource`
   */
  derivedFrom(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("derived-from", ...args);
  }
  /**
   * The description of the event definition
   * @fhirSearchType `string`
   * @fhirPath `EventDefinition.description`
   */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
   * The time during which the event definition is intended to be in use
   * @fhirSearchType `date`
   * @fhirPath `EventDefinition.effectivePeriod`
   */
  effective(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("effective", ...args);
  }
  /**
   * External identifier for the event definition
   * @fhirSearchType `token`
   * @fhirPath `EventDefinition.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Intended jurisdiction for the event definition
   * @fhirSearchType `token`
   * @fhirPath `EventDefinition.jurisdiction`
   */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
   * Computationally friendly name of the event definition
   * @fhirSearchType `string`
   * @fhirPath `EventDefinition.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `EventDefinition.relatedArtifact.where(type='predecessor').resource`
   */
  predecessor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("predecessor", ...args);
  }
  /**
   * Name of the publisher of the event definition
   * @fhirSearchType `string`
   * @fhirPath `EventDefinition.publisher`
   */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
   * The current status of the event definition
   * @fhirSearchType `token`
   * @fhirPath `EventDefinition.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `EventDefinition.relatedArtifact.where(type='successor').resource`
   */
  successor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("successor", ...args);
  }
  /**
   * The human-friendly name of the event definition
   * @fhirSearchType `string`
   * @fhirPath `EventDefinition.title`
   */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
   * Topics associated with the module
   * @fhirSearchType `token`
   * @fhirPath `EventDefinition.topic`
   */
  topic(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("topic", ...args);
  }
  /**
   * The uri that identifies the event definition
   * @fhirSearchType `uri`
   * @fhirPath `EventDefinition.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
   * The business version of the event definition
   * @fhirSearchType `token`
   * @fhirPath `EventDefinition.version`
   */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | EventDefinitionSortOrder
      | EventDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type EvidenceSortOrder =
  | DomainResourceSortOrder
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "identifier"
  | "-identifier"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class EvidenceFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Evidence";

  /**
   * A quantity- or range-valued use context assigned to the evidence
   * @fhirSearchType `quantity`
   * @fhirPath `(Evidence.useContext.value as Quantity) | (Evidence.useContext.value as Range)`
   */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
   * A use context type and quantity- or range-based value assigned to the evidence
   * @fhirSearchType `composite`
   * @fhirPath `Evidence.useContext`
   */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
   * A use context type and value assigned to the evidence
   * @fhirSearchType `composite`
   * @fhirPath `Evidence.useContext`
   */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
   * A type of use context assigned to the evidence
   * @fhirSearchType `token`
   * @fhirPath `Evidence.useContext.code`
   */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
   * A use context assigned to the evidence
   * @fhirSearchType `token`
   * @fhirPath `(Evidence.useContext.value as CodeableConcept)`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
   * The evidence publication date
   * @fhirSearchType `date`
   * @fhirPath `Evidence.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * The description of the evidence
   * @fhirSearchType `string`
   * @fhirPath `Evidence.description`
   */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
   * External identifier for the evidence
   * @fhirSearchType `token`
   * @fhirPath `Evidence.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Name of the publisher of the evidence
   * @fhirSearchType `string`
   * @fhirPath `Evidence.publisher`
   */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
   * The current status of the evidence
   * @fhirSearchType `token`
   * @fhirPath `Evidence.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The human-friendly name of the evidence
   * @fhirSearchType `string`
   * @fhirPath `Evidence.title`
   */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
   * The uri that identifies the evidence
   * @fhirSearchType `uri`
   * @fhirPath `Evidence.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
   * The business version of the evidence
   * @fhirSearchType `token`
   * @fhirPath `Evidence.version`
   */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: EvidenceSortOrder | EvidenceSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type EvidenceReportSortOrder =
  | DomainResourceSortOrder
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "identifier"
  | "-identifier"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "url"
  | "-url";

export class EvidenceReportFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "EvidenceReport";

  /**
   * A quantity- or range-valued use context assigned to the evidence report
   * @fhirSearchType `quantity`
   * @fhirPath `(EvidenceReport.useContext.value as Quantity) | (EvidenceReport.useContext.value as Range)`
   */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
   * A use context type and quantity- or range-based value assigned to the evidence
   * report
   * @fhirSearchType `composite`
   * @fhirPath `EvidenceReport.useContext`
   */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
   * A use context type and value assigned to the evidence report
   * @fhirSearchType `composite`
   * @fhirPath `EvidenceReport.useContext`
   */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
   * A type of use context assigned to the evidence report
   * @fhirSearchType `token`
   * @fhirPath `EvidenceReport.useContext.code`
   */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
   * A use context assigned to the evidence report
   * @fhirSearchType `token`
   * @fhirPath `(EvidenceReport.useContext.value as CodeableConcept)`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
   * External identifier for the evidence report
   * @fhirSearchType `token`
   * @fhirPath `EvidenceReport.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Name of the publisher of the evidence report
   * @fhirSearchType `string`
   * @fhirPath `EvidenceReport.publisher`
   */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
   * The current status of the evidence report
   * @fhirSearchType `token`
   * @fhirPath `EvidenceReport.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The uri that identifies the evidence report
   * @fhirSearchType `uri`
   * @fhirPath `EvidenceReport.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | EvidenceReportSortOrder
      | EvidenceReportSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type EvidenceVariableSortOrder =
  | DomainResourceSortOrder
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "identifier"
  | "-identifier"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class EvidenceVariableFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "EvidenceVariable";

  /**
   * A quantity- or range-valued use context assigned to the evidence variable
   * @fhirSearchType `quantity`
   * @fhirPath `(EvidenceVariable.useContext.value as Quantity) | (EvidenceVariable.useContext.value as Range)`
   */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
   * A use context type and quantity- or range-based value assigned to the evidence
   * variable
   * @fhirSearchType `composite`
   * @fhirPath `EvidenceVariable.useContext`
   */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
   * A use context type and value assigned to the evidence variable
   * @fhirSearchType `composite`
   * @fhirPath `EvidenceVariable.useContext`
   */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
   * A type of use context assigned to the evidence variable
   * @fhirSearchType `token`
   * @fhirPath `EvidenceVariable.useContext.code`
   */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
   * A use context assigned to the evidence variable
   * @fhirSearchType `token`
   * @fhirPath `(EvidenceVariable.useContext.value as CodeableConcept)`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
   * The evidence variable publication date
   * @fhirSearchType `date`
   * @fhirPath `EvidenceVariable.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * The description of the evidence variable
   * @fhirSearchType `string`
   * @fhirPath `EvidenceVariable.description`
   */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
   * External identifier for the evidence variable
   * @fhirSearchType `token`
   * @fhirPath `EvidenceVariable.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Computationally friendly name of the evidence variable
   * @fhirSearchType `string`
   * @fhirPath `EvidenceVariable.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * Name of the publisher of the evidence variable
   * @fhirSearchType `string`
   * @fhirPath `EvidenceVariable.publisher`
   */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
   * The current status of the evidence variable
   * @fhirSearchType `token`
   * @fhirPath `EvidenceVariable.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The human-friendly name of the evidence variable
   * @fhirSearchType `string`
   * @fhirPath `EvidenceVariable.title`
   */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
   * The uri that identifies the evidence variable
   * @fhirSearchType `uri`
   * @fhirPath `EvidenceVariable.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
   * The business version of the evidence variable
   * @fhirSearchType `token`
   * @fhirPath `EvidenceVariable.version`
   */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | EvidenceVariableSortOrder
      | EvidenceVariableSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ExampleScenarioSortOrder =
  | DomainResourceSortOrder
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class ExampleScenarioFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ExampleScenario";

  /**
   * A quantity- or range-valued use context assigned to the example scenario
   * @fhirSearchType `quantity`
   * @fhirPath `(ExampleScenario.useContext.value as Quantity) | (ExampleScenario.useContext.value as Range)`
   */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
   * A use context type and quantity- or range-based value assigned to the example
   * scenario
   * @fhirSearchType `composite`
   * @fhirPath `ExampleScenario.useContext`
   */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
   * A use context type and value assigned to the example scenario
   * @fhirSearchType `composite`
   * @fhirPath `ExampleScenario.useContext`
   */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
   * A type of use context assigned to the example scenario
   * @fhirSearchType `token`
   * @fhirPath `ExampleScenario.useContext.code`
   */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
   * A use context assigned to the example scenario
   * @fhirSearchType `token`
   * @fhirPath `(ExampleScenario.useContext.value as CodeableConcept)`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
   * The example scenario publication date
   * @fhirSearchType `date`
   * @fhirPath `ExampleScenario.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * External identifier for the example scenario
   * @fhirSearchType `token`
   * @fhirPath `ExampleScenario.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Intended jurisdiction for the example scenario
   * @fhirSearchType `token`
   * @fhirPath `ExampleScenario.jurisdiction`
   */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
   * Computationally friendly name of the example scenario
   * @fhirSearchType `string`
   * @fhirPath `ExampleScenario.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * Name of the publisher of the example scenario
   * @fhirSearchType `string`
   * @fhirPath `ExampleScenario.publisher`
   */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
   * The current status of the example scenario
   * @fhirSearchType `token`
   * @fhirPath `ExampleScenario.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The uri that identifies the example scenario
   * @fhirSearchType `uri`
   * @fhirPath `ExampleScenario.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
   * The business version of the example scenario
   * @fhirSearchType `token`
   * @fhirPath `ExampleScenario.version`
   */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ExampleScenarioSortOrder
      | ExampleScenarioSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ExplanationOfBenefitSortOrder =
  | DomainResourceSortOrder
  | "care-team"
  | "-care-team"
  | "claim"
  | "-claim"
  | "coverage"
  | "-coverage"
  | "created"
  | "-created"
  | "detail-udi"
  | "-detail-udi"
  | "disposition"
  | "-disposition"
  | "encounter"
  | "-encounter"
  | "enterer"
  | "-enterer"
  | "facility"
  | "-facility"
  | "identifier"
  | "-identifier"
  | "item-udi"
  | "-item-udi"
  | "patient"
  | "-patient"
  | "payee"
  | "-payee"
  | "procedure-udi"
  | "-procedure-udi"
  | "provider"
  | "-provider"
  | "status"
  | "-status"
  | "subdetail-udi"
  | "-subdetail-udi";

export class ExplanationOfBenefitFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ExplanationOfBenefit";

  /**
   * Member of the CareTeam
   * @fhirSearchType `reference`
   * @fhirPath `ExplanationOfBenefit.careTeam.provider`
   */
  careTeam(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("care-team", ...args);
  }
  /**
   * The reference to the claim
   * @fhirSearchType `reference`
   * @fhirPath `ExplanationOfBenefit.claim`
   */
  claim(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("claim", ...args);
  }
  /**
   * The plan under which the claim was adjudicated
   * @fhirSearchType `reference`
   * @fhirPath `ExplanationOfBenefit.insurance.coverage`
   */
  coverage(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("coverage", ...args);
  }
  /**
   * The creation date for the EOB
   * @fhirSearchType `date`
   * @fhirPath `ExplanationOfBenefit.created`
   */
  created(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("created", ...args);
  }
  /**
   * UDI associated with a line item detail product or service
   * @fhirSearchType `reference`
   * @fhirPath `ExplanationOfBenefit.item.detail.udi`
   */
  detailUdi(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("detail-udi", ...args);
  }
  /**
   * The contents of the disposition message
   * @fhirSearchType `string`
   * @fhirPath `ExplanationOfBenefit.disposition`
   */
  disposition(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("disposition", ...args);
  }
  /**
   * Encounters associated with a billed line item
   * @fhirSearchType `reference`
   * @fhirPath `ExplanationOfBenefit.item.encounter`
   */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
   * The party responsible for the entry of the Claim
   * @fhirSearchType `reference`
   * @fhirPath `ExplanationOfBenefit.enterer`
   */
  enterer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("enterer", ...args);
  }
  /**
   * Facility responsible for the goods and services
   * @fhirSearchType `reference`
   * @fhirPath `ExplanationOfBenefit.facility`
   */
  facility(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("facility", ...args);
  }
  /**
   * The business identifier of the Explanation of Benefit
   * @fhirSearchType `token`
   * @fhirPath `ExplanationOfBenefit.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * UDI associated with a line item product or service
   * @fhirSearchType `reference`
   * @fhirPath `ExplanationOfBenefit.item.udi`
   */
  itemUdi(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("item-udi", ...args);
  }
  /**
   * The reference to the patient
   * @fhirSearchType `reference`
   * @fhirPath `ExplanationOfBenefit.patient`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * The party receiving any payment for the Claim
   * @fhirSearchType `reference`
   * @fhirPath `ExplanationOfBenefit.payee.party`
   */
  payee(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("payee", ...args);
  }
  /**
   * UDI associated with a procedure
   * @fhirSearchType `reference`
   * @fhirPath `ExplanationOfBenefit.procedure.udi`
   */
  procedureUdi(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("procedure-udi", ...args);
  }
  /**
   * The reference to the provider
   * @fhirSearchType `reference`
   * @fhirPath `ExplanationOfBenefit.provider`
   */
  provider(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("provider", ...args);
  }
  /**
   * Status of the instance
   * @fhirSearchType `token`
   * @fhirPath `ExplanationOfBenefit.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * UDI associated with a line item detail subdetail product or service
   * @fhirSearchType `reference`
   * @fhirPath `ExplanationOfBenefit.item.detail.subDetail.udi`
   */
  subdetailUdi(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subdetail-udi", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ExplanationOfBenefitSortOrder
      | ExplanationOfBenefitSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type FamilyMemberHistorySortOrder =
  | DomainResourceSortOrder
  | "instantiates-canonical"
  | "-instantiates-canonical"
  | "instantiates-uri"
  | "-instantiates-uri"
  | "relationship"
  | "-relationship"
  | "sex"
  | "-sex"
  | "status"
  | "-status"
  | "code"
  | "-code"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class FamilyMemberHistoryFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "FamilyMemberHistory";

  /**
   * Instantiates FHIR protocol or definition
   * @fhirSearchType `reference`
   * @fhirPath `FamilyMemberHistory.instantiatesCanonical`
   */
  instantiatesCanonical(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("instantiates-canonical", ...args);
  }
  /**
   * Instantiates external protocol or definition
   * @fhirSearchType `uri`
   * @fhirPath `FamilyMemberHistory.instantiatesUri`
   */
  instantiatesUri(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("instantiates-uri", ...args);
  }
  /**
   * A search by a relationship type
   * @fhirSearchType `token`
   * @fhirPath `FamilyMemberHistory.relationship`
   */
  relationship(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("relationship", ...args);
  }
  /**
   * A search by a sex code of a family member
   * @fhirSearchType `token`
   * @fhirPath `FamilyMemberHistory.sex`
   */
  sex(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("sex", ...args);
  }
  /**
   * partial | completed | entered-in-error | health-unknown
   * @fhirSearchType `token`
   * @fhirPath `FamilyMemberHistory.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code
 * that identifies the allergy or intolerance
* [Condition](condition.html): Code
 * for the condition
* [DeviceRequest](devicerequest.html): Code for what is being
 * requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the
 * report, as opposed to codes for the atomic results, which are the names on the
 * observation resource referred to from the result
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
*
 * [List](list.html): What the purpose of this list is
*
 * [Medication](medication.html): Returns medications for a specific code
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication code
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine code
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions of this medication code
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication code
* [Observation](observation.html): The code of the observation
 * type
* [Procedure](procedure.html): A code to identify a  procedure
*
 * [ServiceRequest](servicerequest.html): What is being requested/ordered
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.code | AllergyIntolerance.reaction.substance | Condition.code | (DeviceRequest.code as CodeableConcept) | DiagnosticReport.code | FamilyMemberHistory.condition.code | List.code | Medication.code | (MedicationAdministration.medication as CodeableConcept) | (MedicationDispense.medication as CodeableConcept) | (MedicationRequest.medication as CodeableConcept) | (MedicationStatement.medication as CodeableConcept) | Observation.code | Procedure.code | ServiceRequest.code`
 */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date
 * first version of the resource instance was recorded
*
 * [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html):
 * Time period team covers
* [ClinicalImpression](clinicalimpression.html): When
 * the assessment was documented
* [Composition](composition.html): Composition
 * editing time
* [Consent](consent.html): When this Consent was created or
 * indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant
 * time of the report
* [Encounter](encounter.html): A date within the period the
 * Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date
 * search value falls within the episode of care's period
*
 * [FamilyMemberHistory](familymemberhistory.html): When history was recorded or
 * last updated
* [Flag](flag.html): Time period when flag is active
*
 * [Immunization](immunization.html): Vaccination  (non)-Administration Date
*
 * [List](list.html): When the list was prepared
*
 * [Observation](observation.html): Obtained date/time. If the obtained element is
 * a period, a date that falls in the period
* [Procedure](procedure.html): When
 * the procedure was performed
* [RiskAssessment](riskassessment.html): When was
 * assessment made?
* [SupplyRequest](supplyrequest.html): When the request was
 * made
 * @fhirSearchType `date`
 * @fhirPath `AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | FamilyMemberHistorySortOrder
      | FamilyMemberHistorySortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type FlagSortOrder =
  | DomainResourceSortOrder
  | "author"
  | "-author"
  | "identifier"
  | "-identifier"
  | "subject"
  | "-subject"
  | "date"
  | "-date"
  | "encounter"
  | "-encounter"
  | "patient"
  | "-patient";

export class FlagFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Flag";

  /**
   * Flag creator
   * @fhirSearchType `reference`
   * @fhirPath `Flag.author`
   */
  author(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("author", ...args);
  }
  /**
   * Business identifier
   * @fhirSearchType `token`
   * @fhirPath `Flag.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The identity of a subject to list flags for
   * @fhirSearchType `reference`
   * @fhirPath `Flag.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date
 * first version of the resource instance was recorded
*
 * [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html):
 * Time period team covers
* [ClinicalImpression](clinicalimpression.html): When
 * the assessment was documented
* [Composition](composition.html): Composition
 * editing time
* [Consent](consent.html): When this Consent was created or
 * indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant
 * time of the report
* [Encounter](encounter.html): A date within the period the
 * Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date
 * search value falls within the episode of care's period
*
 * [FamilyMemberHistory](familymemberhistory.html): When history was recorded or
 * last updated
* [Flag](flag.html): Time period when flag is active
*
 * [Immunization](immunization.html): Vaccination  (non)-Administration Date
*
 * [List](list.html): When the list was prepared
*
 * [Observation](observation.html): Obtained date/time. If the obtained element is
 * a period, a date that falls in the period
* [Procedure](procedure.html): When
 * the procedure was performed
* [RiskAssessment](riskassessment.html): When was
 * assessment made?
* [SupplyRequest](supplyrequest.html): When the request was
 * made
 * @fhirSearchType `date`
 * @fhirPath `AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [Composition](composition.html): Context of the
 * Composition
* [DeviceRequest](devicerequest.html): Encounter during which
 * request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter
 * when the order was made
* [DocumentReference](documentreference.html): Context
 * of the document  content
* [Flag](flag.html): Alert relevant during
 * encounter
* [List](list.html): Context in which list created
*
 * [NutritionOrder](nutritionorder.html): Return nutrition orders with this
 * encounter identifier
* [Observation](observation.html): Encounter related to
 * the observation
* [Procedure](procedure.html): Encounter created as part of
*
 * [RiskAssessment](riskassessment.html): Where was assessment performed?
*
 * [ServiceRequest](servicerequest.html): An encounter in which this request is
 * made
* [VisionPrescription](visionprescription.html): Return prescriptions with
 * this encounter identifier
 * @fhirSearchType `reference`
 * @fhirPath `Composition.encounter | DeviceRequest.encounter | DiagnosticReport.encounter | DocumentReference.context.encounter.where(resolve() is Encounter) | Flag.encounter | List.encounter | NutritionOrder.encounter | Observation.encounter | Procedure.encounter | RiskAssessment.encounter | ServiceRequest.encounter | VisionPrescription.encounter`
 */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(parameters: FlagSortOrder | FlagSortOrder[] | null | undefined): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type GoalSortOrder =
  | DomainResourceSortOrder
  | "achievement-status"
  | "-achievement-status"
  | "category"
  | "-category"
  | "lifecycle-status"
  | "-lifecycle-status"
  | "start-date"
  | "-start-date"
  | "subject"
  | "-subject"
  | "target-date"
  | "-target-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class GoalFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Goal";

  /**
   * in-progress | improving | worsening | no-change | achieved | sustaining |
   * not-achieved | no-progress | not-attainable
   * @fhirSearchType `token`
   * @fhirPath `Goal.achievementStatus`
   */
  achievementStatus(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("achievement-status", ...args);
  }
  /**
   * E.g. Treatment, dietary, behavioral, etc.
   * @fhirSearchType `token`
   * @fhirPath `Goal.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * proposed | planned | accepted | active | on-hold | completed | cancelled |
   * entered-in-error | rejected
   * @fhirSearchType `token`
   * @fhirPath `Goal.lifecycleStatus`
   */
  lifecycleStatus(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("lifecycle-status", ...args);
  }
  /**
   * When goal pursuit begins
   * @fhirSearchType `date`
   * @fhirPath `(Goal.start as date)`
   */
  startDate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("start-date", ...args);
  }
  /**
   * Who this goal is intended for
   * @fhirSearchType `reference`
   * @fhirPath `Goal.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
   * Reach goal on or before
   * @fhirSearchType `date`
   * @fhirPath `(Goal.target.due as date)`
   */
  targetDate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("target-date", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(parameters: GoalSortOrder | GoalSortOrder[] | null | undefined): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type GraphDefinitionSortOrder =
  | DomainResourceSortOrder
  | "start"
  | "-start"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class GraphDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "GraphDefinition";

  /**
   * Type of resource at which the graph starts
   * @fhirSearchType `token`
   * @fhirPath `GraphDefinition.start`
   */
  start(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("start", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * quantity- or range-valued use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned
 * to the code system
* [CompartmentDefinition](compartmentdefinition.html): A
 * quantity- or range-valued use context assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned
 * to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or
 * range-valued use context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use
 * context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A quantity- or range-valued use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use
 * context assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A quantity- or range-valued use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use
 * context assigned to the structure definition
*
 * [StructureMap](structuremap.html): A quantity- or range-valued use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or
 * range-valued use context assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to
 * the value set
 * @fhirSearchType `quantity`
 * @fhirPath `(CapabilityStatement.useContext.value as Quantity) | (CapabilityStatement.useContext.value as Range) | (CodeSystem.useContext.value as Quantity) | (CodeSystem.useContext.value as Range) | (CompartmentDefinition.useContext.value as Quantity) | (CompartmentDefinition.useContext.value as Range) | (ConceptMap.useContext.value as Quantity) | (ConceptMap.useContext.value as Range) | (GraphDefinition.useContext.value as Quantity) | (GraphDefinition.useContext.value as Range) | (ImplementationGuide.useContext.value as Quantity) | (ImplementationGuide.useContext.value as Range) | (MessageDefinition.useContext.value as Quantity) | (MessageDefinition.useContext.value as Range) | (NamingSystem.useContext.value as Quantity) | (NamingSystem.useContext.value as Range) | (OperationDefinition.useContext.value as Quantity) | (OperationDefinition.useContext.value as Range) | (SearchParameter.useContext.value as Quantity) | (SearchParameter.useContext.value as Range) | (StructureDefinition.useContext.value as Quantity) | (StructureDefinition.useContext.value as Range) | (StructureMap.useContext.value as Quantity) | (StructureMap.useContext.value as Range) | (TerminologyCapabilities.useContext.value as Quantity) | (TerminologyCapabilities.useContext.value as Range) | (ValueSet.useContext.value as Quantity) | (ValueSet.useContext.value as Range)`
 */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and quantity- or range-based value assigned to the capability
 * statement
* [CodeSystem](codesystem.html): A use context type and quantity- or
 * range-based value assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context type and
 * quantity- or range-based value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based
 * value assigned to the concept map
* [GraphDefinition](graphdefinition.html): A
 * use context type and quantity- or range-based value assigned to the graph
 * definition
* [ImplementationGuide](implementationguide.html): A use context
 * type and quantity- or range-based value assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and quantity- or
 * range-based value assigned to the message definition
*
 * [NamingSystem](namingsystem.html): A use context type and quantity- or
 * range-based value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and
 * quantity- or range-based value assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A use context type and quantity- or
 * range-based value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and
 * quantity- or range-based value assigned to the structure definition
*
 * [StructureMap](structuremap.html): A use context type and quantity- or
 * range-based value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * quantity- or range-based value assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A use context type and quantity- or range-based value
 * assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and value assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A use context type and value assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A use context
 * type and value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and value assigned to the
 * concept map
* [GraphDefinition](graphdefinition.html): A use context type and
 * value assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context type and value
 * assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and value
 * assigned to the message definition
* [NamingSystem](namingsystem.html): A use
 * context type and value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and value
 * assigned to the operation definition
* [SearchParameter](searchparameter.html):
 * A use context type and value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and value
 * assigned to the structure definition
* [StructureMap](structuremap.html): A use
 * context type and value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * value assigned to the terminology capabilities
* [ValueSet](valueset.html): A
 * use context type and value assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * type of use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A type of use context assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A type of use
 * context assigned to the compartment definition
* [ConceptMap](conceptmap.html):
 * A type of use context assigned to the concept map
*
 * [GraphDefinition](graphdefinition.html): A type of use context assigned to the
 * graph definition
* [ImplementationGuide](implementationguide.html): A type of
 * use context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A type of use context assigned to
 * the message definition
* [NamingSystem](namingsystem.html): A type of use
 * context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A type of use context assigned
 * to the operation definition
* [SearchParameter](searchparameter.html): A type
 * of use context assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A type of use context assigned
 * to the structure definition
* [StructureMap](structuremap.html): A type of use
 * context assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A type of use context
 * assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of
 * use context assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.useContext.code | CodeSystem.useContext.code | CompartmentDefinition.useContext.code | ConceptMap.useContext.code | GraphDefinition.useContext.code | ImplementationGuide.useContext.code | MessageDefinition.useContext.code | NamingSystem.useContext.code | OperationDefinition.useContext.code | SearchParameter.useContext.code | StructureDefinition.useContext.code | StructureMap.useContext.code | TerminologyCapabilities.useContext.code | ValueSet.useContext.code`
 */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context assigned to the capability statement
* [CodeSystem](codesystem.html): A
 * use context assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to
 * the compartment definition
* [ConceptMap](conceptmap.html): A use context
 * assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use
 * context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context assigned to the
 * implementation guide
* [MessageDefinition](messagedefinition.html): A use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context assigned to the
 * operation definition
* [SearchParameter](searchparameter.html): A use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context assigned to the
 * structure definition
* [StructureMap](structuremap.html): A use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned
 * to the terminology capabilities
* [ValueSet](valueset.html): A use context
 * assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `(CapabilityStatement.useContext.value as CodeableConcept) | (CodeSystem.useContext.value as CodeableConcept) | (CompartmentDefinition.useContext.value as CodeableConcept) | (ConceptMap.useContext.value as CodeableConcept) | (GraphDefinition.useContext.value as CodeableConcept) | (ImplementationGuide.useContext.value as CodeableConcept) | (MessageDefinition.useContext.value as CodeableConcept) | (NamingSystem.useContext.value as CodeableConcept) | (OperationDefinition.useContext.value as CodeableConcept) | (SearchParameter.useContext.value as CodeableConcept) | (StructureDefinition.useContext.value as CodeableConcept) | (StructureMap.useContext.value as CodeableConcept) | (TerminologyCapabilities.useContext.value as CodeableConcept) | (ValueSet.useContext.value as CodeableConcept)`
 */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * capability statement publication date
* [CodeSystem](codesystem.html): The code
 * system publication date
* [CompartmentDefinition](compartmentdefinition.html):
 * The compartment definition publication date
* [ConceptMap](conceptmap.html):
 * The concept map publication date
* [GraphDefinition](graphdefinition.html): The
 * graph definition publication date
*
 * [ImplementationGuide](implementationguide.html): The implementation guide
 * publication date
* [MessageDefinition](messagedefinition.html): The message
 * definition publication date
* [NamingSystem](namingsystem.html): The naming
 * system publication date
* [OperationDefinition](operationdefinition.html): The
 * operation definition publication date
*
 * [SearchParameter](searchparameter.html): The search parameter publication
 * date
* [StructureDefinition](structuredefinition.html): The structure
 * definition publication date
* [StructureMap](structuremap.html): The structure
 * map publication date
* [TerminologyCapabilities](terminologycapabilities.html):
 * The terminology capabilities publication date
* [ValueSet](valueset.html): The
 * value set publication date
 * @fhirSearchType `date`
 * @fhirPath `CapabilityStatement.date | CodeSystem.date | CompartmentDefinition.date | ConceptMap.date | GraphDefinition.date | ImplementationGuide.date | MessageDefinition.date | NamingSystem.date | OperationDefinition.date | SearchParameter.date | StructureDefinition.date | StructureMap.date | TerminologyCapabilities.date | ValueSet.date`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * description of the capability statement
* [CodeSystem](codesystem.html): The
 * description of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The description of the
 * compartment definition
* [ConceptMap](conceptmap.html): The description of the
 * concept map
* [GraphDefinition](graphdefinition.html): The description of the
 * graph definition
* [ImplementationGuide](implementationguide.html): The
 * description of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The description of the message
 * definition
* [NamingSystem](namingsystem.html): The description of the naming
 * system
* [OperationDefinition](operationdefinition.html): The description of
 * the operation definition
* [SearchParameter](searchparameter.html): The
 * description of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The description of the
 * structure definition
* [StructureMap](structuremap.html): The description of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The description of the terminology capabilities
* [ValueSet](valueset.html):
 * The description of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.description | CodeSystem.description | CompartmentDefinition.description | ConceptMap.description | GraphDefinition.description | ImplementationGuide.description | MessageDefinition.description | NamingSystem.description | OperationDefinition.description | SearchParameter.description | StructureDefinition.description | StructureMap.description | TerminologyCapabilities.description | ValueSet.description`
 */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Intended jurisdiction for the capability statement
*
 * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
*
 * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
*
 * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph
 * definition
* [ImplementationGuide](implementationguide.html): Intended
 * jurisdiction for the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the
 * message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction
 * for the naming system
* [OperationDefinition](operationdefinition.html):
 * Intended jurisdiction for the operation definition
*
 * [SearchParameter](searchparameter.html): Intended jurisdiction for the search
 * parameter
* [StructureDefinition](structuredefinition.html): Intended
 * jurisdiction for the structure definition
* [StructureMap](structuremap.html):
 * Intended jurisdiction for the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction
 * for the terminology capabilities
* [ValueSet](valueset.html): Intended
 * jurisdiction for the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.jurisdiction | CodeSystem.jurisdiction | ConceptMap.jurisdiction | GraphDefinition.jurisdiction | ImplementationGuide.jurisdiction | MessageDefinition.jurisdiction | NamingSystem.jurisdiction | OperationDefinition.jurisdiction | SearchParameter.jurisdiction | StructureDefinition.jurisdiction | StructureMap.jurisdiction | TerminologyCapabilities.jurisdiction | ValueSet.jurisdiction`
 */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Computationally friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): Computationally friendly name of the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): Computationally
 * friendly name of the compartment definition
* [ConceptMap](conceptmap.html):
 * Computationally friendly name of the concept map
*
 * [GraphDefinition](graphdefinition.html): Computationally friendly name of the
 * graph definition
* [ImplementationGuide](implementationguide.html):
 * Computationally friendly name of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Computationally friendly name of
 * the message definition
* [NamingSystem](namingsystem.html): Computationally
 * friendly name of the naming system
*
 * [OperationDefinition](operationdefinition.html): Computationally friendly name
 * of the operation definition
* [SearchParameter](searchparameter.html):
 * Computationally friendly name of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Computationally friendly name
 * of the structure definition
* [StructureMap](structuremap.html):
 * Computationally friendly name of the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Computationally
 * friendly name of the terminology capabilities
* [ValueSet](valueset.html):
 * Computationally friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.name | CodeSystem.name | CompartmentDefinition.name | ConceptMap.name | GraphDefinition.name | ImplementationGuide.name | MessageDefinition.name | NamingSystem.name | OperationDefinition.name | SearchParameter.name | StructureDefinition.name | StructureMap.name | TerminologyCapabilities.name | ValueSet.name`
 */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name
 * of the publisher of the capability statement
* [CodeSystem](codesystem.html):
 * Name of the publisher of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of
 * the compartment definition
* [ConceptMap](conceptmap.html): Name of the
 * publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of
 * the publisher of the graph definition
*
 * [ImplementationGuide](implementationguide.html): Name of the publisher of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): Name of the
 * publisher of the message definition
* [NamingSystem](namingsystem.html): Name
 * of the publisher of the naming system
*
 * [OperationDefinition](operationdefinition.html): Name of the publisher of the
 * operation definition
* [SearchParameter](searchparameter.html): Name of the
 * publisher of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Name of the publisher of the
 * structure definition
* [StructureMap](structuremap.html): Name of the publisher
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * Name of the publisher of the terminology capabilities
*
 * [ValueSet](valueset.html): Name of the publisher of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.publisher | CodeSystem.publisher | CompartmentDefinition.publisher | ConceptMap.publisher | GraphDefinition.publisher | ImplementationGuide.publisher | MessageDefinition.publisher | NamingSystem.publisher | OperationDefinition.publisher | SearchParameter.publisher | StructureDefinition.publisher | StructureMap.publisher | TerminologyCapabilities.publisher | ValueSet.publisher`
 */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * current status of the capability statement
* [CodeSystem](codesystem.html): The
 * current status of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The current status of the
 * compartment definition
* [ConceptMap](conceptmap.html): The current status of
 * the concept map
* [GraphDefinition](graphdefinition.html): The current status
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * current status of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The current status of the message
 * definition
* [NamingSystem](namingsystem.html): The current status of the
 * naming system
* [OperationDefinition](operationdefinition.html): The current
 * status of the operation definition
* [SearchParameter](searchparameter.html):
 * The current status of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The current status of the
 * structure definition
* [StructureMap](structuremap.html): The current status of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The current status of the terminology capabilities
* [ValueSet](valueset.html):
 * The current status of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.status | CodeSystem.status | CompartmentDefinition.status | ConceptMap.status | GraphDefinition.status | ImplementationGuide.status | MessageDefinition.status | NamingSystem.status | OperationDefinition.status | SearchParameter.status | StructureDefinition.status | StructureMap.status | TerminologyCapabilities.status | ValueSet.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * uri that identifies the capability statement
* [CodeSystem](codesystem.html):
 * The uri that identifies the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the
 * compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies
 * the concept map
* [GraphDefinition](graphdefinition.html): The uri that
 * identifies the graph definition
*
 * [ImplementationGuide](implementationguide.html): The uri that identifies the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The uri
 * that identifies the message definition
*
 * [OperationDefinition](operationdefinition.html): The uri that identifies the
 * operation definition
* [SearchParameter](searchparameter.html): The uri that
 * identifies the search parameter
*
 * [StructureDefinition](structuredefinition.html): The uri that identifies the
 * structure definition
* [StructureMap](structuremap.html): The uri that
 * identifies the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies
 * the terminology capabilities
* [ValueSet](valueset.html): The uri that
 * identifies the value set
 * @fhirSearchType `uri`
 * @fhirPath `CapabilityStatement.url | CodeSystem.url | CompartmentDefinition.url | ConceptMap.url | GraphDefinition.url | ImplementationGuide.url | MessageDefinition.url | OperationDefinition.url | SearchParameter.url | StructureDefinition.url | StructureMap.url | TerminologyCapabilities.url | ValueSet.url`
 */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * business version of the capability statement
* [CodeSystem](codesystem.html):
 * The business version of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The business version of the
 * compartment definition
* [ConceptMap](conceptmap.html): The business version of
 * the concept map
* [GraphDefinition](graphdefinition.html): The business version
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * business version of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The business version of the message
 * definition
* [OperationDefinition](operationdefinition.html): The business
 * version of the operation definition
* [SearchParameter](searchparameter.html):
 * The business version of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The business version of the
 * structure definition
* [StructureMap](structuremap.html): The business version
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The business version of the terminology capabilities
*
 * [ValueSet](valueset.html): The business version of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.version | CodeSystem.version | CompartmentDefinition.version | ConceptMap.version | GraphDefinition.version | ImplementationGuide.version | MessageDefinition.version | OperationDefinition.version | SearchParameter.version | StructureDefinition.version | StructureMap.version | TerminologyCapabilities.version | ValueSet.version`
 */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | GraphDefinitionSortOrder
      | GraphDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type GroupSortOrder =
  | DomainResourceSortOrder
  | "actual"
  | "-actual"
  | "characteristic-value"
  | "-characteristic-value"
  | "characteristic"
  | "-characteristic"
  | "code"
  | "-code"
  | "exclude"
  | "-exclude"
  | "identifier"
  | "-identifier"
  | "managing-entity"
  | "-managing-entity"
  | "member"
  | "-member"
  | "type"
  | "-type"
  | "value"
  | "-value";

export class GroupFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Group";

  /**
   * Descriptive or actual
   * @fhirSearchType `token`
   * @fhirPath `Group.actual`
   */
  actual(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("actual", ...args);
  }
  /**
   * A composite of both characteristic and value
   * @fhirSearchType `composite`
   * @fhirPath `Group.characteristic`
   */
  characteristicValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("characteristic-value", ...args);
  }
  /**
   * Kind of characteristic
   * @fhirSearchType `token`
   * @fhirPath `Group.characteristic.code`
   */
  characteristic(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("characteristic", ...args);
  }
  /**
   * The kind of resources contained
   * @fhirSearchType `token`
   * @fhirPath `Group.code`
   */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
   * Group includes or excludes
   * @fhirSearchType `token`
   * @fhirPath `Group.characteristic.exclude`
   */
  exclude(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("exclude", ...args);
  }
  /**
   * Unique id
   * @fhirSearchType `token`
   * @fhirPath `Group.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Entity that is the custodian of the Group's definition
   * @fhirSearchType `reference`
   * @fhirPath `Group.managingEntity`
   */
  managingEntity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("managing-entity", ...args);
  }
  /**
   * Reference to the group member
   * @fhirSearchType `reference`
   * @fhirPath `Group.member.entity`
   */
  member(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("member", ...args);
  }
  /**
   * The type of resources the group contains
   * @fhirSearchType `token`
   * @fhirPath `Group.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }
  /**
   * Value held by characteristic
   * @fhirSearchType `token`
   * @fhirPath `(Group.characteristic.value as CodeableConcept) | (Group.characteristic.value as boolean)`
   */
  value(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("value", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: GroupSortOrder | GroupSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type GuidanceResponseSortOrder =
  | DomainResourceSortOrder
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "request"
  | "-request"
  | "subject"
  | "-subject";

export class GuidanceResponseFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "GuidanceResponse";

  /**
   * The identifier of the guidance response
   * @fhirSearchType `token`
   * @fhirPath `GuidanceResponse.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The identity of a patient to search for guidance response results
   * @fhirSearchType `reference`
   * @fhirPath `GuidanceResponse.subject.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * The identifier of the request associated with the response
   * @fhirSearchType `token`
   * @fhirPath `GuidanceResponse.requestIdentifier`
   */
  request(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("request", ...args);
  }
  /**
   * The subject that the guidance response is about
   * @fhirSearchType `reference`
   * @fhirPath `GuidanceResponse.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | GuidanceResponseSortOrder
      | GuidanceResponseSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type HealthcareServiceSortOrder =
  | DomainResourceSortOrder
  | "active"
  | "-active"
  | "characteristic"
  | "-characteristic"
  | "coverage-area"
  | "-coverage-area"
  | "endpoint"
  | "-endpoint"
  | "identifier"
  | "-identifier"
  | "location"
  | "-location"
  | "name"
  | "-name"
  | "organization"
  | "-organization"
  | "program"
  | "-program"
  | "service-category"
  | "-service-category"
  | "service-type"
  | "-service-type"
  | "specialty"
  | "-specialty";

export class HealthcareServiceFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "HealthcareService";

  /**
   * The Healthcare Service is currently marked as active
   * @fhirSearchType `token`
   * @fhirPath `HealthcareService.active`
   */
  active(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("active", ...args);
  }
  /**
   * One of the HealthcareService's characteristics
   * @fhirSearchType `token`
   * @fhirPath `HealthcareService.characteristic`
   */
  characteristic(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("characteristic", ...args);
  }
  /**
   * Location(s) service is intended for/available to
   * @fhirSearchType `reference`
   * @fhirPath `HealthcareService.coverageArea`
   */
  coverageArea(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("coverage-area", ...args);
  }
  /**
   * Technical endpoints providing access to electronic services operated for the
   * healthcare service
   * @fhirSearchType `reference`
   * @fhirPath `HealthcareService.endpoint`
   */
  endpoint(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("endpoint", ...args);
  }
  /**
   * External identifiers for this item
   * @fhirSearchType `token`
   * @fhirPath `HealthcareService.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The location of the Healthcare Service
   * @fhirSearchType `reference`
   * @fhirPath `HealthcareService.location`
   */
  location(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("location", ...args);
  }
  /**
   * A portion of the Healthcare service name
   * @fhirSearchType `string`
   * @fhirPath `HealthcareService.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * The organization that provides this Healthcare Service
   * @fhirSearchType `reference`
   * @fhirPath `HealthcareService.providedBy`
   */
  organization(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("organization", ...args);
  }
  /**
   * One of the Programs supported by this HealthcareService
   * @fhirSearchType `token`
   * @fhirPath `HealthcareService.program`
   */
  program(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("program", ...args);
  }
  /**
   * Service Category of the Healthcare Service
   * @fhirSearchType `token`
   * @fhirPath `HealthcareService.category`
   */
  serviceCategory(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("service-category", ...args);
  }
  /**
   * The type of service provided by this healthcare service
   * @fhirSearchType `token`
   * @fhirPath `HealthcareService.type`
   */
  serviceType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("service-type", ...args);
  }
  /**
   * The specialty of the service provided by this healthcare service
   * @fhirSearchType `token`
   * @fhirPath `HealthcareService.specialty`
   */
  specialty(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("specialty", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | HealthcareServiceSortOrder
      | HealthcareServiceSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ImagingStudySortOrder =
  | DomainResourceSortOrder
  | "basedon"
  | "-basedon"
  | "bodysite"
  | "-bodysite"
  | "dicom-class"
  | "-dicom-class"
  | "encounter"
  | "-encounter"
  | "endpoint"
  | "-endpoint"
  | "instance"
  | "-instance"
  | "interpreter"
  | "-interpreter"
  | "modality"
  | "-modality"
  | "performer"
  | "-performer"
  | "reason"
  | "-reason"
  | "referrer"
  | "-referrer"
  | "series"
  | "-series"
  | "started"
  | "-started"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class ImagingStudyFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ImagingStudy";

  /**
   * The order for the image
   * @fhirSearchType `reference`
   * @fhirPath `ImagingStudy.basedOn`
   */
  basedon(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("basedon", ...args);
  }
  /**
   * The body site studied
   * @fhirSearchType `token`
   * @fhirPath `ImagingStudy.series.bodySite`
   */
  bodysite(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("bodysite", ...args);
  }
  /**
   * The type of the instance
   * @fhirSearchType `token`
   * @fhirPath `ImagingStudy.series.instance.sopClass`
   */
  dicomClass(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("dicom-class", ...args);
  }
  /**
   * The context of the study
   * @fhirSearchType `reference`
   * @fhirPath `ImagingStudy.encounter`
   */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
   * The endpoint for the study or series
   * @fhirSearchType `reference`
   * @fhirPath `ImagingStudy.endpoint | ImagingStudy.series.endpoint`
   */
  endpoint(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("endpoint", ...args);
  }
  /**
   * SOP Instance UID for an instance
   * @fhirSearchType `token`
   * @fhirPath `ImagingStudy.series.instance.uid`
   */
  instance(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("instance", ...args);
  }
  /**
   * Who interpreted the images
   * @fhirSearchType `reference`
   * @fhirPath `ImagingStudy.interpreter`
   */
  interpreter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("interpreter", ...args);
  }
  /**
   * The modality of the series
   * @fhirSearchType `token`
   * @fhirPath `ImagingStudy.series.modality`
   */
  modality(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("modality", ...args);
  }
  /**
   * The person who performed the study
   * @fhirSearchType `reference`
   * @fhirPath `ImagingStudy.series.performer.actor`
   */
  performer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("performer", ...args);
  }
  /**
   * The reason for the study
   * @fhirSearchType `token`
   * @fhirPath `ImagingStudy.reasonCode`
   */
  reason(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("reason", ...args);
  }
  /**
   * The referring physician
   * @fhirSearchType `reference`
   * @fhirPath `ImagingStudy.referrer`
   */
  referrer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("referrer", ...args);
  }
  /**
   * DICOM Series Instance UID for a series
   * @fhirSearchType `token`
   * @fhirPath `ImagingStudy.series.uid`
   */
  series(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("series", ...args);
  }
  /**
   * When the study was started
   * @fhirSearchType `date`
   * @fhirPath `ImagingStudy.started`
   */
  started(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("started", ...args);
  }
  /**
   * The status of the study
   * @fhirSearchType `token`
   * @fhirPath `ImagingStudy.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Who the study is about
   * @fhirSearchType `reference`
   * @fhirPath `ImagingStudy.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ImagingStudySortOrder
      | ImagingStudySortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ImmunizationSortOrder =
  | DomainResourceSortOrder
  | "location"
  | "-location"
  | "lot-number"
  | "-lot-number"
  | "manufacturer"
  | "-manufacturer"
  | "performer"
  | "-performer"
  | "reaction-date"
  | "-reaction-date"
  | "reaction"
  | "-reaction"
  | "reason-code"
  | "-reason-code"
  | "reason-reference"
  | "-reason-reference"
  | "series"
  | "-series"
  | "status-reason"
  | "-status-reason"
  | "status"
  | "-status"
  | "target-disease"
  | "-target-disease"
  | "vaccine-code"
  | "-vaccine-code"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class ImmunizationFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Immunization";

  /**
   * The service delivery location or facility in which the vaccine was / was to be
   * administered
   * @fhirSearchType `reference`
   * @fhirPath `Immunization.location`
   */
  location(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("location", ...args);
  }
  /**
   * Vaccine Lot Number
   * @fhirSearchType `string`
   * @fhirPath `Immunization.lotNumber`
   */
  lotNumber(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("lot-number", ...args);
  }
  /**
   * Vaccine Manufacturer
   * @fhirSearchType `reference`
   * @fhirPath `Immunization.manufacturer`
   */
  manufacturer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("manufacturer", ...args);
  }
  /**
   * The practitioner or organization who played a role in the vaccination
   * @fhirSearchType `reference`
   * @fhirPath `Immunization.performer.actor`
   */
  performer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("performer", ...args);
  }
  /**
   * When reaction started
   * @fhirSearchType `date`
   * @fhirPath `Immunization.reaction.date`
   */
  reactionDate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("reaction-date", ...args);
  }
  /**
   * Additional information on reaction
   * @fhirSearchType `reference`
   * @fhirPath `Immunization.reaction.detail`
   */
  reaction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("reaction", ...args);
  }
  /**
   * Reason why the vaccine was administered
   * @fhirSearchType `token`
   * @fhirPath `Immunization.reasonCode`
   */
  reasonCode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("reason-code", ...args);
  }
  /**
   * Why immunization occurred
   * @fhirSearchType `reference`
   * @fhirPath `Immunization.reasonReference`
   */
  reasonReference(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("reason-reference", ...args);
  }
  /**
   * The series being followed by the provider
   * @fhirSearchType `string`
   * @fhirPath `Immunization.protocolApplied.series`
   */
  series(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("series", ...args);
  }
  /**
   * Reason why the vaccine was not administered
   * @fhirSearchType `token`
   * @fhirPath `Immunization.statusReason`
   */
  statusReason(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status-reason", ...args);
  }
  /**
   * Immunization event status
   * @fhirSearchType `token`
   * @fhirPath `Immunization.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The target disease the dose is being administered against
   * @fhirSearchType `token`
   * @fhirPath `Immunization.protocolApplied.targetDisease`
   */
  targetDisease(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("target-disease", ...args);
  }
  /**
   * Vaccine Product Administered
   * @fhirSearchType `token`
   * @fhirPath `Immunization.vaccineCode`
   */
  vaccineCode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("vaccine-code", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date
 * first version of the resource instance was recorded
*
 * [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html):
 * Time period team covers
* [ClinicalImpression](clinicalimpression.html): When
 * the assessment was documented
* [Composition](composition.html): Composition
 * editing time
* [Consent](consent.html): When this Consent was created or
 * indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant
 * time of the report
* [Encounter](encounter.html): A date within the period the
 * Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date
 * search value falls within the episode of care's period
*
 * [FamilyMemberHistory](familymemberhistory.html): When history was recorded or
 * last updated
* [Flag](flag.html): Time period when flag is active
*
 * [Immunization](immunization.html): Vaccination  (non)-Administration Date
*
 * [List](list.html): When the list was prepared
*
 * [Observation](observation.html): Obtained date/time. If the obtained element is
 * a period, a date that falls in the period
* [Procedure](procedure.html): When
 * the procedure was performed
* [RiskAssessment](riskassessment.html): When was
 * assessment made?
* [SupplyRequest](supplyrequest.html): When the request was
 * made
 * @fhirSearchType `date`
 * @fhirPath `AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ImmunizationSortOrder
      | ImmunizationSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ImmunizationEvaluationSortOrder =
  | DomainResourceSortOrder
  | "date"
  | "-date"
  | "dose-status"
  | "-dose-status"
  | "identifier"
  | "-identifier"
  | "immunization-event"
  | "-immunization-event"
  | "patient"
  | "-patient"
  | "status"
  | "-status"
  | "target-disease"
  | "-target-disease";

export class ImmunizationEvaluationFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ImmunizationEvaluation";

  /**
   * Date the evaluation was generated
   * @fhirSearchType `date`
   * @fhirPath `ImmunizationEvaluation.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * The status of the dose relative to published recommendations
   * @fhirSearchType `token`
   * @fhirPath `ImmunizationEvaluation.doseStatus`
   */
  doseStatus(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("dose-status", ...args);
  }
  /**
   * ID of the evaluation
   * @fhirSearchType `token`
   * @fhirPath `ImmunizationEvaluation.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The vaccine administration event being evaluated
   * @fhirSearchType `reference`
   * @fhirPath `ImmunizationEvaluation.immunizationEvent`
   */
  immunizationEvent(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("immunization-event", ...args);
  }
  /**
   * The patient being evaluated
   * @fhirSearchType `reference`
   * @fhirPath `ImmunizationEvaluation.patient`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * Immunization evaluation status
   * @fhirSearchType `token`
   * @fhirPath `ImmunizationEvaluation.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The vaccine preventable disease being evaluated against
   * @fhirSearchType `token`
   * @fhirPath `ImmunizationEvaluation.targetDisease`
   */
  targetDisease(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("target-disease", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ImmunizationEvaluationSortOrder
      | ImmunizationEvaluationSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ImmunizationRecommendationSortOrder =
  | DomainResourceSortOrder
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "information"
  | "-information"
  | "patient"
  | "-patient"
  | "status"
  | "-status"
  | "support"
  | "-support"
  | "target-disease"
  | "-target-disease"
  | "vaccine-type"
  | "-vaccine-type";

export class ImmunizationRecommendationFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ImmunizationRecommendation";

  /**
   * Date recommendation(s) created
   * @fhirSearchType `date`
   * @fhirPath `ImmunizationRecommendation.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * Business identifier
   * @fhirSearchType `token`
   * @fhirPath `ImmunizationRecommendation.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Patient observations supporting recommendation
   * @fhirSearchType `reference`
   * @fhirPath `ImmunizationRecommendation.recommendation.supportingPatientInformation`
   */
  information(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("information", ...args);
  }
  /**
   * Who this profile is for
   * @fhirSearchType `reference`
   * @fhirPath `ImmunizationRecommendation.patient`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * Vaccine recommendation status
   * @fhirSearchType `token`
   * @fhirPath `ImmunizationRecommendation.recommendation.forecastStatus`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Past immunizations supporting recommendation
   * @fhirSearchType `reference`
   * @fhirPath `ImmunizationRecommendation.recommendation.supportingImmunization`
   */
  support(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("support", ...args);
  }
  /**
   * Disease to be immunized against
   * @fhirSearchType `token`
   * @fhirPath `ImmunizationRecommendation.recommendation.targetDisease`
   */
  targetDisease(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("target-disease", ...args);
  }
  /**
   * Vaccine  or vaccine group recommendation applies to
   * @fhirSearchType `token`
   * @fhirPath `ImmunizationRecommendation.recommendation.vaccineCode`
   */
  vaccineType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("vaccine-type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ImmunizationRecommendationSortOrder
      | ImmunizationRecommendationSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ImplementationGuideSortOrder =
  | DomainResourceSortOrder
  | "depends-on"
  | "-depends-on"
  | "experimental"
  | "-experimental"
  | "global"
  | "-global"
  | "resource"
  | "-resource"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class ImplementationGuideFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ImplementationGuide";

  /**
   * Identity of the IG that this depends on
   * @fhirSearchType `reference`
   * @fhirPath `ImplementationGuide.dependsOn.uri`
   */
  dependsOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("depends-on", ...args);
  }
  /**
   * For testing purposes, not real usage
   * @fhirSearchType `token`
   * @fhirPath `ImplementationGuide.experimental`
   */
  experimental(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("experimental", ...args);
  }
  /**
   * Profile that all resources must conform to
   * @fhirSearchType `reference`
   * @fhirPath `ImplementationGuide.global.profile`
   */
  global(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("global", ...args);
  }
  /**
   * Location of the resource
   * @fhirSearchType `reference`
   * @fhirPath `ImplementationGuide.definition.resource.reference`
   */
  resource(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("resource", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * quantity- or range-valued use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned
 * to the code system
* [CompartmentDefinition](compartmentdefinition.html): A
 * quantity- or range-valued use context assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned
 * to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or
 * range-valued use context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use
 * context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A quantity- or range-valued use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use
 * context assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A quantity- or range-valued use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use
 * context assigned to the structure definition
*
 * [StructureMap](structuremap.html): A quantity- or range-valued use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or
 * range-valued use context assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to
 * the value set
 * @fhirSearchType `quantity`
 * @fhirPath `(CapabilityStatement.useContext.value as Quantity) | (CapabilityStatement.useContext.value as Range) | (CodeSystem.useContext.value as Quantity) | (CodeSystem.useContext.value as Range) | (CompartmentDefinition.useContext.value as Quantity) | (CompartmentDefinition.useContext.value as Range) | (ConceptMap.useContext.value as Quantity) | (ConceptMap.useContext.value as Range) | (GraphDefinition.useContext.value as Quantity) | (GraphDefinition.useContext.value as Range) | (ImplementationGuide.useContext.value as Quantity) | (ImplementationGuide.useContext.value as Range) | (MessageDefinition.useContext.value as Quantity) | (MessageDefinition.useContext.value as Range) | (NamingSystem.useContext.value as Quantity) | (NamingSystem.useContext.value as Range) | (OperationDefinition.useContext.value as Quantity) | (OperationDefinition.useContext.value as Range) | (SearchParameter.useContext.value as Quantity) | (SearchParameter.useContext.value as Range) | (StructureDefinition.useContext.value as Quantity) | (StructureDefinition.useContext.value as Range) | (StructureMap.useContext.value as Quantity) | (StructureMap.useContext.value as Range) | (TerminologyCapabilities.useContext.value as Quantity) | (TerminologyCapabilities.useContext.value as Range) | (ValueSet.useContext.value as Quantity) | (ValueSet.useContext.value as Range)`
 */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and quantity- or range-based value assigned to the capability
 * statement
* [CodeSystem](codesystem.html): A use context type and quantity- or
 * range-based value assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context type and
 * quantity- or range-based value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based
 * value assigned to the concept map
* [GraphDefinition](graphdefinition.html): A
 * use context type and quantity- or range-based value assigned to the graph
 * definition
* [ImplementationGuide](implementationguide.html): A use context
 * type and quantity- or range-based value assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and quantity- or
 * range-based value assigned to the message definition
*
 * [NamingSystem](namingsystem.html): A use context type and quantity- or
 * range-based value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and
 * quantity- or range-based value assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A use context type and quantity- or
 * range-based value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and
 * quantity- or range-based value assigned to the structure definition
*
 * [StructureMap](structuremap.html): A use context type and quantity- or
 * range-based value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * quantity- or range-based value assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A use context type and quantity- or range-based value
 * assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and value assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A use context type and value assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A use context
 * type and value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and value assigned to the
 * concept map
* [GraphDefinition](graphdefinition.html): A use context type and
 * value assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context type and value
 * assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and value
 * assigned to the message definition
* [NamingSystem](namingsystem.html): A use
 * context type and value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and value
 * assigned to the operation definition
* [SearchParameter](searchparameter.html):
 * A use context type and value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and value
 * assigned to the structure definition
* [StructureMap](structuremap.html): A use
 * context type and value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * value assigned to the terminology capabilities
* [ValueSet](valueset.html): A
 * use context type and value assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * type of use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A type of use context assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A type of use
 * context assigned to the compartment definition
* [ConceptMap](conceptmap.html):
 * A type of use context assigned to the concept map
*
 * [GraphDefinition](graphdefinition.html): A type of use context assigned to the
 * graph definition
* [ImplementationGuide](implementationguide.html): A type of
 * use context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A type of use context assigned to
 * the message definition
* [NamingSystem](namingsystem.html): A type of use
 * context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A type of use context assigned
 * to the operation definition
* [SearchParameter](searchparameter.html): A type
 * of use context assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A type of use context assigned
 * to the structure definition
* [StructureMap](structuremap.html): A type of use
 * context assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A type of use context
 * assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of
 * use context assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.useContext.code | CodeSystem.useContext.code | CompartmentDefinition.useContext.code | ConceptMap.useContext.code | GraphDefinition.useContext.code | ImplementationGuide.useContext.code | MessageDefinition.useContext.code | NamingSystem.useContext.code | OperationDefinition.useContext.code | SearchParameter.useContext.code | StructureDefinition.useContext.code | StructureMap.useContext.code | TerminologyCapabilities.useContext.code | ValueSet.useContext.code`
 */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context assigned to the capability statement
* [CodeSystem](codesystem.html): A
 * use context assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to
 * the compartment definition
* [ConceptMap](conceptmap.html): A use context
 * assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use
 * context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context assigned to the
 * implementation guide
* [MessageDefinition](messagedefinition.html): A use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context assigned to the
 * operation definition
* [SearchParameter](searchparameter.html): A use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context assigned to the
 * structure definition
* [StructureMap](structuremap.html): A use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned
 * to the terminology capabilities
* [ValueSet](valueset.html): A use context
 * assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `(CapabilityStatement.useContext.value as CodeableConcept) | (CodeSystem.useContext.value as CodeableConcept) | (CompartmentDefinition.useContext.value as CodeableConcept) | (ConceptMap.useContext.value as CodeableConcept) | (GraphDefinition.useContext.value as CodeableConcept) | (ImplementationGuide.useContext.value as CodeableConcept) | (MessageDefinition.useContext.value as CodeableConcept) | (NamingSystem.useContext.value as CodeableConcept) | (OperationDefinition.useContext.value as CodeableConcept) | (SearchParameter.useContext.value as CodeableConcept) | (StructureDefinition.useContext.value as CodeableConcept) | (StructureMap.useContext.value as CodeableConcept) | (TerminologyCapabilities.useContext.value as CodeableConcept) | (ValueSet.useContext.value as CodeableConcept)`
 */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * capability statement publication date
* [CodeSystem](codesystem.html): The code
 * system publication date
* [CompartmentDefinition](compartmentdefinition.html):
 * The compartment definition publication date
* [ConceptMap](conceptmap.html):
 * The concept map publication date
* [GraphDefinition](graphdefinition.html): The
 * graph definition publication date
*
 * [ImplementationGuide](implementationguide.html): The implementation guide
 * publication date
* [MessageDefinition](messagedefinition.html): The message
 * definition publication date
* [NamingSystem](namingsystem.html): The naming
 * system publication date
* [OperationDefinition](operationdefinition.html): The
 * operation definition publication date
*
 * [SearchParameter](searchparameter.html): The search parameter publication
 * date
* [StructureDefinition](structuredefinition.html): The structure
 * definition publication date
* [StructureMap](structuremap.html): The structure
 * map publication date
* [TerminologyCapabilities](terminologycapabilities.html):
 * The terminology capabilities publication date
* [ValueSet](valueset.html): The
 * value set publication date
 * @fhirSearchType `date`
 * @fhirPath `CapabilityStatement.date | CodeSystem.date | CompartmentDefinition.date | ConceptMap.date | GraphDefinition.date | ImplementationGuide.date | MessageDefinition.date | NamingSystem.date | OperationDefinition.date | SearchParameter.date | StructureDefinition.date | StructureMap.date | TerminologyCapabilities.date | ValueSet.date`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * description of the capability statement
* [CodeSystem](codesystem.html): The
 * description of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The description of the
 * compartment definition
* [ConceptMap](conceptmap.html): The description of the
 * concept map
* [GraphDefinition](graphdefinition.html): The description of the
 * graph definition
* [ImplementationGuide](implementationguide.html): The
 * description of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The description of the message
 * definition
* [NamingSystem](namingsystem.html): The description of the naming
 * system
* [OperationDefinition](operationdefinition.html): The description of
 * the operation definition
* [SearchParameter](searchparameter.html): The
 * description of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The description of the
 * structure definition
* [StructureMap](structuremap.html): The description of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The description of the terminology capabilities
* [ValueSet](valueset.html):
 * The description of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.description | CodeSystem.description | CompartmentDefinition.description | ConceptMap.description | GraphDefinition.description | ImplementationGuide.description | MessageDefinition.description | NamingSystem.description | OperationDefinition.description | SearchParameter.description | StructureDefinition.description | StructureMap.description | TerminologyCapabilities.description | ValueSet.description`
 */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Intended jurisdiction for the capability statement
*
 * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
*
 * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
*
 * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph
 * definition
* [ImplementationGuide](implementationguide.html): Intended
 * jurisdiction for the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the
 * message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction
 * for the naming system
* [OperationDefinition](operationdefinition.html):
 * Intended jurisdiction for the operation definition
*
 * [SearchParameter](searchparameter.html): Intended jurisdiction for the search
 * parameter
* [StructureDefinition](structuredefinition.html): Intended
 * jurisdiction for the structure definition
* [StructureMap](structuremap.html):
 * Intended jurisdiction for the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction
 * for the terminology capabilities
* [ValueSet](valueset.html): Intended
 * jurisdiction for the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.jurisdiction | CodeSystem.jurisdiction | ConceptMap.jurisdiction | GraphDefinition.jurisdiction | ImplementationGuide.jurisdiction | MessageDefinition.jurisdiction | NamingSystem.jurisdiction | OperationDefinition.jurisdiction | SearchParameter.jurisdiction | StructureDefinition.jurisdiction | StructureMap.jurisdiction | TerminologyCapabilities.jurisdiction | ValueSet.jurisdiction`
 */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Computationally friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): Computationally friendly name of the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): Computationally
 * friendly name of the compartment definition
* [ConceptMap](conceptmap.html):
 * Computationally friendly name of the concept map
*
 * [GraphDefinition](graphdefinition.html): Computationally friendly name of the
 * graph definition
* [ImplementationGuide](implementationguide.html):
 * Computationally friendly name of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Computationally friendly name of
 * the message definition
* [NamingSystem](namingsystem.html): Computationally
 * friendly name of the naming system
*
 * [OperationDefinition](operationdefinition.html): Computationally friendly name
 * of the operation definition
* [SearchParameter](searchparameter.html):
 * Computationally friendly name of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Computationally friendly name
 * of the structure definition
* [StructureMap](structuremap.html):
 * Computationally friendly name of the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Computationally
 * friendly name of the terminology capabilities
* [ValueSet](valueset.html):
 * Computationally friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.name | CodeSystem.name | CompartmentDefinition.name | ConceptMap.name | GraphDefinition.name | ImplementationGuide.name | MessageDefinition.name | NamingSystem.name | OperationDefinition.name | SearchParameter.name | StructureDefinition.name | StructureMap.name | TerminologyCapabilities.name | ValueSet.name`
 */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name
 * of the publisher of the capability statement
* [CodeSystem](codesystem.html):
 * Name of the publisher of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of
 * the compartment definition
* [ConceptMap](conceptmap.html): Name of the
 * publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of
 * the publisher of the graph definition
*
 * [ImplementationGuide](implementationguide.html): Name of the publisher of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): Name of the
 * publisher of the message definition
* [NamingSystem](namingsystem.html): Name
 * of the publisher of the naming system
*
 * [OperationDefinition](operationdefinition.html): Name of the publisher of the
 * operation definition
* [SearchParameter](searchparameter.html): Name of the
 * publisher of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Name of the publisher of the
 * structure definition
* [StructureMap](structuremap.html): Name of the publisher
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * Name of the publisher of the terminology capabilities
*
 * [ValueSet](valueset.html): Name of the publisher of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.publisher | CodeSystem.publisher | CompartmentDefinition.publisher | ConceptMap.publisher | GraphDefinition.publisher | ImplementationGuide.publisher | MessageDefinition.publisher | NamingSystem.publisher | OperationDefinition.publisher | SearchParameter.publisher | StructureDefinition.publisher | StructureMap.publisher | TerminologyCapabilities.publisher | ValueSet.publisher`
 */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * current status of the capability statement
* [CodeSystem](codesystem.html): The
 * current status of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The current status of the
 * compartment definition
* [ConceptMap](conceptmap.html): The current status of
 * the concept map
* [GraphDefinition](graphdefinition.html): The current status
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * current status of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The current status of the message
 * definition
* [NamingSystem](namingsystem.html): The current status of the
 * naming system
* [OperationDefinition](operationdefinition.html): The current
 * status of the operation definition
* [SearchParameter](searchparameter.html):
 * The current status of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The current status of the
 * structure definition
* [StructureMap](structuremap.html): The current status of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The current status of the terminology capabilities
* [ValueSet](valueset.html):
 * The current status of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.status | CodeSystem.status | CompartmentDefinition.status | ConceptMap.status | GraphDefinition.status | ImplementationGuide.status | MessageDefinition.status | NamingSystem.status | OperationDefinition.status | SearchParameter.status | StructureDefinition.status | StructureMap.status | TerminologyCapabilities.status | ValueSet.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * human-friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): The human-friendly name of the code system
*
 * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
*
 * [ImplementationGuide](implementationguide.html): The human-friendly name of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The
 * human-friendly name of the message definition
*
 * [OperationDefinition](operationdefinition.html): The human-friendly name of the
 * operation definition
* [StructureDefinition](structuredefinition.html): The
 * human-friendly name of the structure definition
*
 * [StructureMap](structuremap.html): The human-friendly name of the structure
 * map
* [TerminologyCapabilities](terminologycapabilities.html): The
 * human-friendly name of the terminology capabilities
*
 * [ValueSet](valueset.html): The human-friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.title | CodeSystem.title | ConceptMap.title | ImplementationGuide.title | MessageDefinition.title | OperationDefinition.title | StructureDefinition.title | StructureMap.title | TerminologyCapabilities.title | ValueSet.title`
 */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * uri that identifies the capability statement
* [CodeSystem](codesystem.html):
 * The uri that identifies the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the
 * compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies
 * the concept map
* [GraphDefinition](graphdefinition.html): The uri that
 * identifies the graph definition
*
 * [ImplementationGuide](implementationguide.html): The uri that identifies the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The uri
 * that identifies the message definition
*
 * [OperationDefinition](operationdefinition.html): The uri that identifies the
 * operation definition
* [SearchParameter](searchparameter.html): The uri that
 * identifies the search parameter
*
 * [StructureDefinition](structuredefinition.html): The uri that identifies the
 * structure definition
* [StructureMap](structuremap.html): The uri that
 * identifies the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies
 * the terminology capabilities
* [ValueSet](valueset.html): The uri that
 * identifies the value set
 * @fhirSearchType `uri`
 * @fhirPath `CapabilityStatement.url | CodeSystem.url | CompartmentDefinition.url | ConceptMap.url | GraphDefinition.url | ImplementationGuide.url | MessageDefinition.url | OperationDefinition.url | SearchParameter.url | StructureDefinition.url | StructureMap.url | TerminologyCapabilities.url | ValueSet.url`
 */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * business version of the capability statement
* [CodeSystem](codesystem.html):
 * The business version of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The business version of the
 * compartment definition
* [ConceptMap](conceptmap.html): The business version of
 * the concept map
* [GraphDefinition](graphdefinition.html): The business version
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * business version of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The business version of the message
 * definition
* [OperationDefinition](operationdefinition.html): The business
 * version of the operation definition
* [SearchParameter](searchparameter.html):
 * The business version of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The business version of the
 * structure definition
* [StructureMap](structuremap.html): The business version
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The business version of the terminology capabilities
*
 * [ValueSet](valueset.html): The business version of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.version | CodeSystem.version | CompartmentDefinition.version | ConceptMap.version | GraphDefinition.version | ImplementationGuide.version | MessageDefinition.version | OperationDefinition.version | SearchParameter.version | StructureDefinition.version | StructureMap.version | TerminologyCapabilities.version | ValueSet.version`
 */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ImplementationGuideSortOrder
      | ImplementationGuideSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type IngredientSortOrder =
  | DomainResourceSortOrder
  | "for"
  | "-for"
  | "function"
  | "-function"
  | "identifier"
  | "-identifier"
  | "manufacturer"
  | "-manufacturer"
  | "role"
  | "-role"
  | "substance-code"
  | "-substance-code"
  | "substance-definition"
  | "-substance-definition"
  | "substance"
  | "-substance";

export class IngredientFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Ingredient";

  /**
   * The product which this ingredient is a constituent part of
   * @fhirSearchType `reference`
   * @fhirPath `Ingredient.for`
   */
  for(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("for", ...args);
  }
  /**
   * A classification of the ingredient identifying its precise purpose(s) in the
   * drug product. This extends the Ingredient.role to add more detail. Example:
   * Antioxidant, Alkalizing Agent
   * @fhirSearchType `token`
   * @fhirPath `Ingredient.function`
   */
  function(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("function", ...args);
  }
  /**
   * An identifier or code by which the ingredient can be referenced
   * @fhirSearchType `token`
   * @fhirPath `Ingredient.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The organization that manufactures this ingredient
   * @fhirSearchType `reference`
   * @fhirPath `Ingredient.manufacturer`
   */
  manufacturer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("manufacturer", ...args);
  }
  /**
   * A classification of the ingredient identifying its purpose within the product,
   * e.g. active, inactive
   * @fhirSearchType `token`
   * @fhirPath `Ingredient.role`
   */
  role(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("role", ...args);
  }
  /**
   * Reference to a concept (by class)
   * @fhirSearchType `token`
   * @fhirPath `Ingredient.substance.code.concept`
   */
  substanceCode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("substance-code", ...args);
  }
  /**
   * Reference to a resource (by instance)
   * @fhirSearchType `reference`
   * @fhirPath `Ingredient.substance.code.reference`
   */
  substanceDefinition(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("substance-definition", ...args);
  }
  /**
   * Reference to a resource (by instance)
   * @fhirSearchType `reference`
   * @fhirPath `Ingredient.substance.code.reference`
   */
  substance(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("substance", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: IngredientSortOrder | IngredientSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type InsurancePlanSortOrder =
  | DomainResourceSortOrder
  | "address-city"
  | "-address-city"
  | "address-country"
  | "-address-country"
  | "address-postalcode"
  | "-address-postalcode"
  | "address-state"
  | "-address-state"
  | "address-use"
  | "-address-use"
  | "address"
  | "-address"
  | "administered-by"
  | "-administered-by"
  | "endpoint"
  | "-endpoint"
  | "identifier"
  | "-identifier"
  | "name"
  | "-name"
  | "owned-by"
  | "-owned-by"
  | "phonetic"
  | "-phonetic"
  | "status"
  | "-status"
  | "type"
  | "-type";

export class InsurancePlanFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "InsurancePlan";

  /**
   * A city specified in an address
   * @fhirSearchType `string`
   * @fhirPath `InsurancePlan.contact.address.city`
   */
  addressCity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-city", ...args);
  }
  /**
   * A country specified in an address
   * @fhirSearchType `string`
   * @fhirPath `InsurancePlan.contact.address.country`
   */
  addressCountry(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-country", ...args);
  }
  /**
   * A postal code specified in an address
   * @fhirSearchType `string`
   * @fhirPath `InsurancePlan.contact.address.postalCode`
   */
  addressPostalcode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-postalcode", ...args);
  }
  /**
   * A state specified in an address
   * @fhirSearchType `string`
   * @fhirPath `InsurancePlan.contact.address.state`
   */
  addressState(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-state", ...args);
  }
  /**
   * A use code specified in an address
   * @fhirSearchType `token`
   * @fhirPath `InsurancePlan.contact.address.use`
   */
  addressUse(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("address-use", ...args);
  }
  /**
   * A server defined search that may match any of the string fields in the Address,
   * including line, city, district, state, country, postalCode, and/or text
   * @fhirSearchType `string`
   * @fhirPath `InsurancePlan.contact.address`
   */
  address(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address", ...args);
  }
  /**
   * Product administrator
   * @fhirSearchType `reference`
   * @fhirPath `InsurancePlan.administeredBy`
   */
  administeredBy(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("administered-by", ...args);
  }
  /**
   * Technical endpoint
   * @fhirSearchType `reference`
   * @fhirPath `InsurancePlan.endpoint`
   */
  endpoint(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("endpoint", ...args);
  }
  /**
   * Any identifier for the organization (not the accreditation issuer's identifier)
   * @fhirSearchType `token`
   * @fhirPath `InsurancePlan.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * A portion of the organization's name or alias
   * @fhirSearchType `string`
   * @fhirPath `name | alias`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * An organization of which this organization forms a part
   * @fhirSearchType `reference`
   * @fhirPath `InsurancePlan.ownedBy`
   */
  ownedBy(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("owned-by", ...args);
  }
  /**
   * A portion of the organization's name using some kind of phonetic matching
   * algorithm
   * @fhirSearchType `string`
   * @fhirPath `InsurancePlan.name`
   */
  phonetic(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("phonetic", ...args);
  }
  /**
   * Is the Organization record active
   * @fhirSearchType `token`
   * @fhirPath `InsurancePlan.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * A code for the type of organization
   * @fhirSearchType `token`
   * @fhirPath `InsurancePlan.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | InsurancePlanSortOrder
      | InsurancePlanSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type InvoiceSortOrder =
  | DomainResourceSortOrder
  | "account"
  | "-account"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "issuer"
  | "-issuer"
  | "participant-role"
  | "-participant-role"
  | "participant"
  | "-participant"
  | "patient"
  | "-patient"
  | "recipient"
  | "-recipient"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "totalgross"
  | "-totalgross"
  | "totalnet"
  | "-totalnet"
  | "type"
  | "-type";

export class InvoiceFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Invoice";

  /**
   * Account that is being balanced
   * @fhirSearchType `reference`
   * @fhirPath `Invoice.account`
   */
  account(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("account", ...args);
  }
  /**
   * Invoice date / posting date
   * @fhirSearchType `date`
   * @fhirPath `Invoice.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * Business Identifier for item
   * @fhirSearchType `token`
   * @fhirPath `Invoice.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Issuing Organization of Invoice
   * @fhirSearchType `reference`
   * @fhirPath `Invoice.issuer`
   */
  issuer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("issuer", ...args);
  }
  /**
   * Type of involvement in creation of this Invoice
   * @fhirSearchType `token`
   * @fhirPath `Invoice.participant.role`
   */
  participantRole(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("participant-role", ...args);
  }
  /**
   * Individual who was involved
   * @fhirSearchType `reference`
   * @fhirPath `Invoice.participant.actor`
   */
  participant(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("participant", ...args);
  }
  /**
   * Recipient(s) of goods and services
   * @fhirSearchType `reference`
   * @fhirPath `Invoice.subject.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * Recipient of this invoice
   * @fhirSearchType `reference`
   * @fhirPath `Invoice.recipient`
   */
  recipient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("recipient", ...args);
  }
  /**
   * draft | issued | balanced | cancelled | entered-in-error
   * @fhirSearchType `token`
   * @fhirPath `Invoice.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Recipient(s) of goods and services
   * @fhirSearchType `reference`
   * @fhirPath `Invoice.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
   * Gross total of this Invoice
   * @fhirSearchType `quantity`
   * @fhirPath `Invoice.totalGross`
   */
  totalgross(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("totalgross", ...args);
  }
  /**
   * Net total of this Invoice
   * @fhirSearchType `quantity`
   * @fhirPath `Invoice.totalNet`
   */
  totalnet(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("totalnet", ...args);
  }
  /**
   * Type of Invoice
   * @fhirSearchType `token`
   * @fhirPath `Invoice.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: InvoiceSortOrder | InvoiceSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type LibrarySortOrder =
  | DomainResourceSortOrder
  | "composed-of"
  | "-composed-of"
  | "content-type"
  | "-content-type"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "depends-on"
  | "-depends-on"
  | "derived-from"
  | "-derived-from"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "predecessor"
  | "-predecessor"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "successor"
  | "-successor"
  | "title"
  | "-title"
  | "topic"
  | "-topic"
  | "type"
  | "-type"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class LibraryFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Library";

  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `Library.relatedArtifact.where(type='composed-of').resource`
   */
  composedOf(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("composed-of", ...args);
  }
  /**
   * The type of content in the library (e.g. text/cql)
   * @fhirSearchType `token`
   * @fhirPath `Library.content.contentType`
   */
  contentType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("content-type", ...args);
  }
  /**
   * A quantity- or range-valued use context assigned to the library
   * @fhirSearchType `quantity`
   * @fhirPath `(Library.useContext.value as Quantity) | (Library.useContext.value as Range)`
   */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
   * A use context type and quantity- or range-based value assigned to the library
   * @fhirSearchType `composite`
   * @fhirPath `Library.useContext`
   */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
   * A use context type and value assigned to the library
   * @fhirSearchType `composite`
   * @fhirPath `Library.useContext`
   */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
   * A type of use context assigned to the library
   * @fhirSearchType `token`
   * @fhirPath `Library.useContext.code`
   */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
   * A use context assigned to the library
   * @fhirSearchType `token`
   * @fhirPath `(Library.useContext.value as CodeableConcept)`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
   * The library publication date
   * @fhirSearchType `date`
   * @fhirPath `Library.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `Library.relatedArtifact.where(type='depends-on').resource`
   */
  dependsOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("depends-on", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `Library.relatedArtifact.where(type='derived-from').resource`
   */
  derivedFrom(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("derived-from", ...args);
  }
  /**
   * The description of the library
   * @fhirSearchType `string`
   * @fhirPath `Library.description`
   */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
   * The time during which the library is intended to be in use
   * @fhirSearchType `date`
   * @fhirPath `Library.effectivePeriod`
   */
  effective(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("effective", ...args);
  }
  /**
   * External identifier for the library
   * @fhirSearchType `token`
   * @fhirPath `Library.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Intended jurisdiction for the library
   * @fhirSearchType `token`
   * @fhirPath `Library.jurisdiction`
   */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
   * Computationally friendly name of the library
   * @fhirSearchType `string`
   * @fhirPath `Library.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `Library.relatedArtifact.where(type='predecessor').resource`
   */
  predecessor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("predecessor", ...args);
  }
  /**
   * Name of the publisher of the library
   * @fhirSearchType `string`
   * @fhirPath `Library.publisher`
   */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
   * The current status of the library
   * @fhirSearchType `token`
   * @fhirPath `Library.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `Library.relatedArtifact.where(type='successor').resource`
   */
  successor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("successor", ...args);
  }
  /**
   * The human-friendly name of the library
   * @fhirSearchType `string`
   * @fhirPath `Library.title`
   */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
   * Topics associated with the module
   * @fhirSearchType `token`
   * @fhirPath `Library.topic`
   */
  topic(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("topic", ...args);
  }
  /**
   * The type of the library (e.g. logic-library, model-definition, asset-collection,
   * module-definition)
   * @fhirSearchType `token`
   * @fhirPath `Library.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }
  /**
   * The uri that identifies the library
   * @fhirSearchType `uri`
   * @fhirPath `Library.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
   * The business version of the library
   * @fhirSearchType `token`
   * @fhirPath `Library.version`
   */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: LibrarySortOrder | LibrarySortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type LinkageSortOrder =
  | DomainResourceSortOrder
  | "author"
  | "-author"
  | "item"
  | "-item"
  | "source"
  | "-source";

export class LinkageFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Linkage";

  /**
   * Author of the Linkage
   * @fhirSearchType `reference`
   * @fhirPath `Linkage.author`
   */
  author(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("author", ...args);
  }
  /**
   * Matches on any item in the Linkage
   * @fhirSearchType `reference`
   * @fhirPath `Linkage.item.resource`
   */
  item(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("item", ...args);
  }
  /**
   * Matches on any item in the Linkage with a type of 'source'
   * @fhirSearchType `reference`
   * @fhirPath `Linkage.item.resource`
   */
  source(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("source", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: LinkageSortOrder | LinkageSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ListSortOrder =
  | DomainResourceSortOrder
  | "empty-reason"
  | "-empty-reason"
  | "item"
  | "-item"
  | "notes"
  | "-notes"
  | "source"
  | "-source"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "title"
  | "-title"
  | "code"
  | "-code"
  | "date"
  | "-date"
  | "encounter"
  | "-encounter"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class ListFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "List";

  /**
   * Why list is empty
   * @fhirSearchType `token`
   * @fhirPath `List.emptyReason`
   */
  emptyReason(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("empty-reason", ...args);
  }
  /**
   * Actual entry
   * @fhirSearchType `reference`
   * @fhirPath `List.entry.item`
   */
  item(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("item", ...args);
  }
  /**
   * The annotation  - text content (as markdown)
   * @fhirSearchType `string`
   * @fhirPath `List.note.text`
   */
  notes(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("notes", ...args);
  }
  /**
   * Who and/or what defined the list contents (aka Author)
   * @fhirSearchType `reference`
   * @fhirPath `List.source`
   */
  source(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("source", ...args);
  }
  /**
   * current | retired | entered-in-error
   * @fhirSearchType `token`
   * @fhirPath `List.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * If all resources have the same subject
   * @fhirSearchType `reference`
   * @fhirPath `List.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
   * Descriptive name for the list
   * @fhirSearchType `string`
   * @fhirPath `List.title`
   */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code
 * that identifies the allergy or intolerance
* [Condition](condition.html): Code
 * for the condition
* [DeviceRequest](devicerequest.html): Code for what is being
 * requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the
 * report, as opposed to codes for the atomic results, which are the names on the
 * observation resource referred to from the result
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
*
 * [List](list.html): What the purpose of this list is
*
 * [Medication](medication.html): Returns medications for a specific code
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication code
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine code
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions of this medication code
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication code
* [Observation](observation.html): The code of the observation
 * type
* [Procedure](procedure.html): A code to identify a  procedure
*
 * [ServiceRequest](servicerequest.html): What is being requested/ordered
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.code | AllergyIntolerance.reaction.substance | Condition.code | (DeviceRequest.code as CodeableConcept) | DiagnosticReport.code | FamilyMemberHistory.condition.code | List.code | Medication.code | (MedicationAdministration.medication as CodeableConcept) | (MedicationDispense.medication as CodeableConcept) | (MedicationRequest.medication as CodeableConcept) | (MedicationStatement.medication as CodeableConcept) | Observation.code | Procedure.code | ServiceRequest.code`
 */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date
 * first version of the resource instance was recorded
*
 * [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html):
 * Time period team covers
* [ClinicalImpression](clinicalimpression.html): When
 * the assessment was documented
* [Composition](composition.html): Composition
 * editing time
* [Consent](consent.html): When this Consent was created or
 * indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant
 * time of the report
* [Encounter](encounter.html): A date within the period the
 * Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date
 * search value falls within the episode of care's period
*
 * [FamilyMemberHistory](familymemberhistory.html): When history was recorded or
 * last updated
* [Flag](flag.html): Time period when flag is active
*
 * [Immunization](immunization.html): Vaccination  (non)-Administration Date
*
 * [List](list.html): When the list was prepared
*
 * [Observation](observation.html): Obtained date/time. If the obtained element is
 * a period, a date that falls in the period
* [Procedure](procedure.html): When
 * the procedure was performed
* [RiskAssessment](riskassessment.html): When was
 * assessment made?
* [SupplyRequest](supplyrequest.html): When the request was
 * made
 * @fhirSearchType `date`
 * @fhirPath `AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [Composition](composition.html): Context of the
 * Composition
* [DeviceRequest](devicerequest.html): Encounter during which
 * request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter
 * when the order was made
* [DocumentReference](documentreference.html): Context
 * of the document  content
* [Flag](flag.html): Alert relevant during
 * encounter
* [List](list.html): Context in which list created
*
 * [NutritionOrder](nutritionorder.html): Return nutrition orders with this
 * encounter identifier
* [Observation](observation.html): Encounter related to
 * the observation
* [Procedure](procedure.html): Encounter created as part of
*
 * [RiskAssessment](riskassessment.html): Where was assessment performed?
*
 * [ServiceRequest](servicerequest.html): An encounter in which this request is
 * made
* [VisionPrescription](visionprescription.html): Return prescriptions with
 * this encounter identifier
 * @fhirSearchType `reference`
 * @fhirPath `Composition.encounter | DeviceRequest.encounter | DiagnosticReport.encounter | DocumentReference.context.encounter.where(resolve() is Encounter) | Flag.encounter | List.encounter | NutritionOrder.encounter | Observation.encounter | Procedure.encounter | RiskAssessment.encounter | ServiceRequest.encounter | VisionPrescription.encounter`
 */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(parameters: ListSortOrder | ListSortOrder[] | null | undefined): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type LocationSortOrder =
  | DomainResourceSortOrder
  | "address-city"
  | "-address-city"
  | "address-country"
  | "-address-country"
  | "address-postalcode"
  | "-address-postalcode"
  | "address-state"
  | "-address-state"
  | "address-use"
  | "-address-use"
  | "address"
  | "-address"
  | "endpoint"
  | "-endpoint"
  | "identifier"
  | "-identifier"
  | "name"
  | "-name"
  | "near"
  | "-near"
  | "operational-status"
  | "-operational-status"
  | "organization"
  | "-organization"
  | "partof"
  | "-partof"
  | "status"
  | "-status"
  | "type"
  | "-type";

export class LocationFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Location";

  /**
   * A city specified in an address
   * @fhirSearchType `string`
   * @fhirPath `Location.address.city`
   */
  addressCity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-city", ...args);
  }
  /**
   * A country specified in an address
   * @fhirSearchType `string`
   * @fhirPath `Location.address.country`
   */
  addressCountry(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-country", ...args);
  }
  /**
   * A postal code specified in an address
   * @fhirSearchType `string`
   * @fhirPath `Location.address.postalCode`
   */
  addressPostalcode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-postalcode", ...args);
  }
  /**
   * A state specified in an address
   * @fhirSearchType `string`
   * @fhirPath `Location.address.state`
   */
  addressState(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-state", ...args);
  }
  /**
   * A use code specified in an address
   * @fhirSearchType `token`
   * @fhirPath `Location.address.use`
   */
  addressUse(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("address-use", ...args);
  }
  /**
   * A (part of the) address of the location
   * @fhirSearchType `string`
   * @fhirPath `Location.address`
   */
  address(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address", ...args);
  }
  /**
   * Technical endpoints providing access to services operated for the location
   * @fhirSearchType `reference`
   * @fhirPath `Location.endpoint`
   */
  endpoint(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("endpoint", ...args);
  }
  /**
   * An identifier for the location
   * @fhirSearchType `token`
   * @fhirPath `Location.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * A portion of the location's name or alias
   * @fhirSearchType `string`
   * @fhirPath `Location.name | Location.alias`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
 * Search for locations where the location.position is near to, or within a
 * specified distance of, the provided coordinates expressed as
 * [latitude]|[longitude]|[distance]|[units] (using the WGS84 datum, see notes).
If
 * the units are omitted, then kms should be assumed. If the distance is omitted,
 * then the server can use its own discretion as to what distances should be
 * considered near (and units are irrelevant)

Servers may search using various
 * techniques that might have differing accuracies, depending on implementation
 * efficiency.

Requires the near-distance parameter to be provided also
 * @fhirSearchType `special`
 * @fhirPath `Location.position`
 */
  near(
    ...args: DropFirst<Parameters<FhirSearchBuilder["specialParam"]>>
  ): this {
    return this.specialParam("near", ...args);
  }
  /**
   * Searches for locations (typically bed/room) that have an operational status
   * (e.g. contaminated, housekeeping)
   * @fhirSearchType `token`
   * @fhirPath `Location.operationalStatus`
   */
  operationalStatus(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("operational-status", ...args);
  }
  /**
   * Searches for locations that are managed by the provided organization
   * @fhirSearchType `reference`
   * @fhirPath `Location.managingOrganization`
   */
  organization(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("organization", ...args);
  }
  /**
   * A location of which this location is a part
   * @fhirSearchType `reference`
   * @fhirPath `Location.partOf`
   */
  partof(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("partof", ...args);
  }
  /**
   * Searches for locations with a specific kind of status
   * @fhirSearchType `token`
   * @fhirPath `Location.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * A code for the type of location
   * @fhirSearchType `token`
   * @fhirPath `Location.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: LocationSortOrder | LocationSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ManufacturedItemDefinitionSortOrder =
  | DomainResourceSortOrder
  | "dose-form"
  | "-dose-form"
  | "identifier"
  | "-identifier"
  | "ingredient"
  | "-ingredient";

export class ManufacturedItemDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ManufacturedItemDefinition";

  /**
   * Dose form as manufactured and before any transformation into the pharmaceutical
   * product
   * @fhirSearchType `token`
   * @fhirPath `ManufacturedItemDefinition.manufacturedDoseForm`
   */
  doseForm(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("dose-form", ...args);
  }
  /**
   * Unique identifier
   * @fhirSearchType `token`
   * @fhirPath `ManufacturedItemDefinition.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * An ingredient of this item
   * @fhirSearchType `token`
   * @fhirPath `ManufacturedItemDefinition.ingredient`
   */
  ingredient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("ingredient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ManufacturedItemDefinitionSortOrder
      | ManufacturedItemDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type MeasureSortOrder =
  | DomainResourceSortOrder
  | "composed-of"
  | "-composed-of"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "depends-on"
  | "-depends-on"
  | "derived-from"
  | "-derived-from"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "predecessor"
  | "-predecessor"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "successor"
  | "-successor"
  | "title"
  | "-title"
  | "topic"
  | "-topic"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class MeasureFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Measure";

  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `Measure.relatedArtifact.where(type='composed-of').resource`
   */
  composedOf(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("composed-of", ...args);
  }
  /**
   * A quantity- or range-valued use context assigned to the measure
   * @fhirSearchType `quantity`
   * @fhirPath `(Measure.useContext.value as Quantity) | (Measure.useContext.value as Range)`
   */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
   * A use context type and quantity- or range-based value assigned to the measure
   * @fhirSearchType `composite`
   * @fhirPath `Measure.useContext`
   */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
   * A use context type and value assigned to the measure
   * @fhirSearchType `composite`
   * @fhirPath `Measure.useContext`
   */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
   * A type of use context assigned to the measure
   * @fhirSearchType `token`
   * @fhirPath `Measure.useContext.code`
   */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
   * A use context assigned to the measure
   * @fhirSearchType `token`
   * @fhirPath `(Measure.useContext.value as CodeableConcept)`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
   * The measure publication date
   * @fhirSearchType `date`
   * @fhirPath `Measure.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `Measure.relatedArtifact.where(type='depends-on').resource | Measure.library`
   */
  dependsOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("depends-on", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `Measure.relatedArtifact.where(type='derived-from').resource`
   */
  derivedFrom(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("derived-from", ...args);
  }
  /**
   * The description of the measure
   * @fhirSearchType `string`
   * @fhirPath `Measure.description`
   */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
   * The time during which the measure is intended to be in use
   * @fhirSearchType `date`
   * @fhirPath `Measure.effectivePeriod`
   */
  effective(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("effective", ...args);
  }
  /**
   * External identifier for the measure
   * @fhirSearchType `token`
   * @fhirPath `Measure.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Intended jurisdiction for the measure
   * @fhirSearchType `token`
   * @fhirPath `Measure.jurisdiction`
   */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
   * Computationally friendly name of the measure
   * @fhirSearchType `string`
   * @fhirPath `Measure.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `Measure.relatedArtifact.where(type='predecessor').resource`
   */
  predecessor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("predecessor", ...args);
  }
  /**
   * Name of the publisher of the measure
   * @fhirSearchType `string`
   * @fhirPath `Measure.publisher`
   */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
   * The current status of the measure
   * @fhirSearchType `token`
   * @fhirPath `Measure.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `Measure.relatedArtifact.where(type='successor').resource`
   */
  successor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("successor", ...args);
  }
  /**
   * The human-friendly name of the measure
   * @fhirSearchType `string`
   * @fhirPath `Measure.title`
   */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
   * Topics associated with the measure
   * @fhirSearchType `token`
   * @fhirPath `Measure.topic`
   */
  topic(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("topic", ...args);
  }
  /**
   * The uri that identifies the measure
   * @fhirSearchType `uri`
   * @fhirPath `Measure.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
   * The business version of the measure
   * @fhirSearchType `token`
   * @fhirPath `Measure.version`
   */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: MeasureSortOrder | MeasureSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type MeasureReportSortOrder =
  | DomainResourceSortOrder
  | "date"
  | "-date"
  | "evaluated-resource"
  | "-evaluated-resource"
  | "identifier"
  | "-identifier"
  | "measure"
  | "-measure"
  | "patient"
  | "-patient"
  | "period"
  | "-period"
  | "reporter"
  | "-reporter"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

export class MeasureReportFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "MeasureReport";

  /**
   * The date of the measure report
   * @fhirSearchType `date`
   * @fhirPath `MeasureReport.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * An evaluated resource referenced by the measure report
   * @fhirSearchType `reference`
   * @fhirPath `MeasureReport.evaluatedResource`
   */
  evaluatedResource(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("evaluated-resource", ...args);
  }
  /**
   * External identifier of the measure report to be returned
   * @fhirSearchType `token`
   * @fhirPath `MeasureReport.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The measure to return measure report results for
   * @fhirSearchType `reference`
   * @fhirPath `MeasureReport.measure`
   */
  measure(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("measure", ...args);
  }
  /**
   * The identity of a patient to search for individual measure report results for
   * @fhirSearchType `reference`
   * @fhirPath `MeasureReport.subject.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * The period of the measure report
   * @fhirSearchType `date`
   * @fhirPath `MeasureReport.period`
   */
  period(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("period", ...args);
  }
  /**
   * The reporter to return measure report results for
   * @fhirSearchType `reference`
   * @fhirPath `MeasureReport.reporter`
   */
  reporter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("reporter", ...args);
  }
  /**
   * The status of the measure report
   * @fhirSearchType `token`
   * @fhirPath `MeasureReport.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The identity of a subject to search for individual measure report results for
   * @fhirSearchType `reference`
   * @fhirPath `MeasureReport.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | MeasureReportSortOrder
      | MeasureReportSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type MediaSortOrder =
  | DomainResourceSortOrder
  | "based-on"
  | "-based-on"
  | "created"
  | "-created"
  | "device"
  | "-device"
  | "encounter"
  | "-encounter"
  | "identifier"
  | "-identifier"
  | "modality"
  | "-modality"
  | "operator"
  | "-operator"
  | "patient"
  | "-patient"
  | "site"
  | "-site"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "type"
  | "-type"
  | "view"
  | "-view";

export class MediaFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Media";

  /**
   * Procedure that caused this media to be created
   * @fhirSearchType `reference`
   * @fhirPath `Media.basedOn`
   */
  basedOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("based-on", ...args);
  }
  /**
   * When Media was collected
   * @fhirSearchType `date`
   * @fhirPath `Media.created`
   */
  created(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("created", ...args);
  }
  /**
   * Observing Device
   * @fhirSearchType `reference`
   * @fhirPath `Media.device`
   */
  device(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("device", ...args);
  }
  /**
   * Encounter associated with media
   * @fhirSearchType `reference`
   * @fhirPath `Media.encounter`
   */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
   * Identifier(s) for the image
   * @fhirSearchType `token`
   * @fhirPath `Media.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The type of acquisition equipment/process
   * @fhirSearchType `token`
   * @fhirPath `Media.modality`
   */
  modality(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("modality", ...args);
  }
  /**
   * The person who generated the image
   * @fhirSearchType `reference`
   * @fhirPath `Media.operator`
   */
  operator(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("operator", ...args);
  }
  /**
   * Who/What this Media is a record of
   * @fhirSearchType `reference`
   * @fhirPath `Media.subject.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * Observed body part
   * @fhirSearchType `token`
   * @fhirPath `Media.bodySite`
   */
  site(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("site", ...args);
  }
  /**
   * preparation | in-progress | not-done | on-hold | stopped | completed |
   * entered-in-error | unknown
   * @fhirSearchType `token`
   * @fhirPath `Media.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Who/What this Media is a record of
   * @fhirSearchType `reference`
   * @fhirPath `Media.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
   * Classification of media as image, video, or audio
   * @fhirSearchType `token`
   * @fhirPath `Media.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }
  /**
   * Imaging view, e.g. Lateral or Antero-posterior
   * @fhirSearchType `token`
   * @fhirPath `Media.view`
   */
  view(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("view", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: MediaSortOrder | MediaSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type MedicationSortOrder =
  | DomainResourceSortOrder
  | "expiration-date"
  | "-expiration-date"
  | "form"
  | "-form"
  | "identifier"
  | "-identifier"
  | "ingredient-code"
  | "-ingredient-code"
  | "ingredient"
  | "-ingredient"
  | "lot-number"
  | "-lot-number"
  | "manufacturer"
  | "-manufacturer"
  | "status"
  | "-status"
  | "code"
  | "-code";

export class MedicationFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Medication";

  /**
   * Returns medications in a batch with this expiration date
   * @fhirSearchType `date`
   * @fhirPath `Medication.batch.expirationDate`
   */
  expirationDate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("expiration-date", ...args);
  }
  /**
   * Returns medications for a specific dose form
   * @fhirSearchType `token`
   * @fhirPath `Medication.form`
   */
  form(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("form", ...args);
  }
  /**
   * Returns medications with this external identifier
   * @fhirSearchType `token`
   * @fhirPath `Medication.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Returns medications for this ingredient code
   * @fhirSearchType `token`
   * @fhirPath `(Medication.ingredient.item as CodeableConcept)`
   */
  ingredientCode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("ingredient-code", ...args);
  }
  /**
   * Returns medications for this ingredient reference
   * @fhirSearchType `reference`
   * @fhirPath `(Medication.ingredient.item as Reference)`
   */
  ingredient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("ingredient", ...args);
  }
  /**
   * Returns medications in a batch with this lot number
   * @fhirSearchType `token`
   * @fhirPath `Medication.batch.lotNumber`
   */
  lotNumber(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("lot-number", ...args);
  }
  /**
   * Returns medications made or sold for this manufacturer
   * @fhirSearchType `reference`
   * @fhirPath `Medication.manufacturer`
   */
  manufacturer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("manufacturer", ...args);
  }
  /**
   * Returns medications for this status
   * @fhirSearchType `token`
   * @fhirPath `Medication.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code
 * that identifies the allergy or intolerance
* [Condition](condition.html): Code
 * for the condition
* [DeviceRequest](devicerequest.html): Code for what is being
 * requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the
 * report, as opposed to codes for the atomic results, which are the names on the
 * observation resource referred to from the result
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
*
 * [List](list.html): What the purpose of this list is
*
 * [Medication](medication.html): Returns medications for a specific code
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication code
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine code
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions of this medication code
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication code
* [Observation](observation.html): The code of the observation
 * type
* [Procedure](procedure.html): A code to identify a  procedure
*
 * [ServiceRequest](servicerequest.html): What is being requested/ordered
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.code | AllergyIntolerance.reaction.substance | Condition.code | (DeviceRequest.code as CodeableConcept) | DiagnosticReport.code | FamilyMemberHistory.condition.code | List.code | Medication.code | (MedicationAdministration.medication as CodeableConcept) | (MedicationDispense.medication as CodeableConcept) | (MedicationRequest.medication as CodeableConcept) | (MedicationStatement.medication as CodeableConcept) | Observation.code | Procedure.code | ServiceRequest.code`
 */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: MedicationSortOrder | MedicationSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type MedicationAdministrationSortOrder =
  | DomainResourceSortOrder
  | "context"
  | "-context"
  | "device"
  | "-device"
  | "effective-time"
  | "-effective-time"
  | "performer"
  | "-performer"
  | "reason-given"
  | "-reason-given"
  | "reason-not-given"
  | "-reason-not-given"
  | "request"
  | "-request"
  | "subject"
  | "-subject"
  | "code"
  | "-code"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "medication"
  | "-medication"
  | "status"
  | "-status";

export class MedicationAdministrationFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "MedicationAdministration";

  /**
   * Return administrations that share this encounter or episode of care
   * @fhirSearchType `reference`
   * @fhirPath `MedicationAdministration.context`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("context", ...args);
  }
  /**
   * Return administrations with this administration device identity
   * @fhirSearchType `reference`
   * @fhirPath `MedicationAdministration.device`
   */
  device(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("device", ...args);
  }
  /**
   * Date administration happened (or did not happen)
   * @fhirSearchType `date`
   * @fhirPath `MedicationAdministration.effective`
   */
  effectiveTime(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("effective-time", ...args);
  }
  /**
   * The identity of the individual who administered the medication
   * @fhirSearchType `reference`
   * @fhirPath `MedicationAdministration.performer.actor`
   */
  performer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("performer", ...args);
  }
  /**
   * Reasons for administering the medication
   * @fhirSearchType `token`
   * @fhirPath `MedicationAdministration.reasonCode`
   */
  reasonGiven(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("reason-given", ...args);
  }
  /**
   * Reasons for not administering the medication
   * @fhirSearchType `token`
   * @fhirPath `MedicationAdministration.statusReason`
   */
  reasonNotGiven(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("reason-not-given", ...args);
  }
  /**
   * The identity of a request to list administrations from
   * @fhirSearchType `reference`
   * @fhirPath `MedicationAdministration.request`
   */
  request(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("request", ...args);
  }
  /**
   * The identity of the individual or group to list administrations for
   * @fhirSearchType `reference`
   * @fhirPath `MedicationAdministration.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code
 * that identifies the allergy or intolerance
* [Condition](condition.html): Code
 * for the condition
* [DeviceRequest](devicerequest.html): Code for what is being
 * requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the
 * report, as opposed to codes for the atomic results, which are the names on the
 * observation resource referred to from the result
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
*
 * [List](list.html): What the purpose of this list is
*
 * [Medication](medication.html): Returns medications for a specific code
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication code
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine code
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions of this medication code
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication code
* [Observation](observation.html): The code of the observation
 * type
* [Procedure](procedure.html): A code to identify a  procedure
*
 * [ServiceRequest](servicerequest.html): What is being requested/ordered
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.code | AllergyIntolerance.reaction.substance | Condition.code | (DeviceRequest.code as CodeableConcept) | DiagnosticReport.code | FamilyMemberHistory.condition.code | List.code | Medication.code | (MedicationAdministration.medication as CodeableConcept) | (MedicationDispense.medication as CodeableConcept) | (MedicationRequest.medication as CodeableConcept) | (MedicationStatement.medication as CodeableConcept) | Observation.code | Procedure.code | ServiceRequest.code`
 */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
 * Multiple Resources: 

*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication resource
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine resource
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions for this medication reference
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication reference
 * @fhirSearchType `reference`
 * @fhirPath `(MedicationAdministration.medication as Reference) | (MedicationDispense.medication as Reference) | (MedicationRequest.medication as Reference) | (MedicationStatement.medication as Reference)`
 */
  medication(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("medication", ...args);
  }
  /**
 * Multiple Resources: 

*
 * [MedicationAdministration](medicationadministration.html):
 * MedicationAdministration event status (for example one of
 * active/paused/completed/nullified)
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with a
 * specified dispense status
* [MedicationRequest](medicationrequest.html): Status
 * of the prescription
* [MedicationStatement](medicationstatement.html): Return
 * statements that match the given status
 * @fhirSearchType `token`
 * @fhirPath `MedicationAdministration.status | MedicationDispense.status | MedicationRequest.status | MedicationStatement.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | MedicationAdministrationSortOrder
      | MedicationAdministrationSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type MedicationDispenseSortOrder =
  | DomainResourceSortOrder
  | "context"
  | "-context"
  | "destination"
  | "-destination"
  | "performer"
  | "-performer"
  | "receiver"
  | "-receiver"
  | "responsibleparty"
  | "-responsibleparty"
  | "subject"
  | "-subject"
  | "type"
  | "-type"
  | "whenhandedover"
  | "-whenhandedover"
  | "whenprepared"
  | "-whenprepared"
  | "code"
  | "-code"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "medication"
  | "-medication"
  | "prescription"
  | "-prescription"
  | "status"
  | "-status";

export class MedicationDispenseFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "MedicationDispense";

  /**
   * Returns dispenses with a specific context (episode or episode of care)
   * @fhirSearchType `reference`
   * @fhirPath `MedicationDispense.context`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("context", ...args);
  }
  /**
   * Returns dispenses that should be sent to a specific destination
   * @fhirSearchType `reference`
   * @fhirPath `MedicationDispense.destination`
   */
  destination(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("destination", ...args);
  }
  /**
   * Returns dispenses performed by a specific individual
   * @fhirSearchType `reference`
   * @fhirPath `MedicationDispense.performer.actor`
   */
  performer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("performer", ...args);
  }
  /**
   * The identity of a receiver to list dispenses for
   * @fhirSearchType `reference`
   * @fhirPath `MedicationDispense.receiver`
   */
  receiver(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("receiver", ...args);
  }
  /**
   * Returns dispenses with the specified responsible party
   * @fhirSearchType `reference`
   * @fhirPath `MedicationDispense.substitution.responsibleParty`
   */
  responsibleparty(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("responsibleparty", ...args);
  }
  /**
   * The identity of a patient for whom to list dispenses
   * @fhirSearchType `reference`
   * @fhirPath `MedicationDispense.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
   * Returns dispenses of a specific type
   * @fhirSearchType `token`
   * @fhirPath `MedicationDispense.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }
  /**
   * Returns dispenses handed over on this date
   * @fhirSearchType `date`
   * @fhirPath `MedicationDispense.whenHandedOver`
   */
  whenhandedover(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("whenhandedover", ...args);
  }
  /**
   * Returns dispenses prepared on this date
   * @fhirSearchType `date`
   * @fhirPath `MedicationDispense.whenPrepared`
   */
  whenprepared(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("whenprepared", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code
 * that identifies the allergy or intolerance
* [Condition](condition.html): Code
 * for the condition
* [DeviceRequest](devicerequest.html): Code for what is being
 * requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the
 * report, as opposed to codes for the atomic results, which are the names on the
 * observation resource referred to from the result
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
*
 * [List](list.html): What the purpose of this list is
*
 * [Medication](medication.html): Returns medications for a specific code
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication code
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine code
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions of this medication code
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication code
* [Observation](observation.html): The code of the observation
 * type
* [Procedure](procedure.html): A code to identify a  procedure
*
 * [ServiceRequest](servicerequest.html): What is being requested/ordered
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.code | AllergyIntolerance.reaction.substance | Condition.code | (DeviceRequest.code as CodeableConcept) | DiagnosticReport.code | FamilyMemberHistory.condition.code | List.code | Medication.code | (MedicationAdministration.medication as CodeableConcept) | (MedicationDispense.medication as CodeableConcept) | (MedicationRequest.medication as CodeableConcept) | (MedicationStatement.medication as CodeableConcept) | Observation.code | Procedure.code | ServiceRequest.code`
 */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
 * Multiple Resources: 

*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication resource
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine resource
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions for this medication reference
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication reference
 * @fhirSearchType `reference`
 * @fhirPath `(MedicationAdministration.medication as Reference) | (MedicationDispense.medication as Reference) | (MedicationRequest.medication as Reference) | (MedicationStatement.medication as Reference)`
 */
  medication(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("medication", ...args);
  }
  /**
 * Multiple Resources: 

* [MedicationDispense](medicationdispense.html): The
 * identity of a prescription to list dispenses from
 * @fhirSearchType `reference`
 * @fhirPath `MedicationDispense.authorizingPrescription`
 */
  prescription(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("prescription", ...args);
  }
  /**
 * Multiple Resources: 

*
 * [MedicationAdministration](medicationadministration.html):
 * MedicationAdministration event status (for example one of
 * active/paused/completed/nullified)
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with a
 * specified dispense status
* [MedicationRequest](medicationrequest.html): Status
 * of the prescription
* [MedicationStatement](medicationstatement.html): Return
 * statements that match the given status
 * @fhirSearchType `token`
 * @fhirPath `MedicationAdministration.status | MedicationDispense.status | MedicationRequest.status | MedicationStatement.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | MedicationDispenseSortOrder
      | MedicationDispenseSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type MedicationKnowledgeSortOrder =
  | DomainResourceSortOrder
  | "classification-type"
  | "-classification-type"
  | "classification"
  | "-classification"
  | "code"
  | "-code"
  | "doseform"
  | "-doseform"
  | "ingredient-code"
  | "-ingredient-code"
  | "ingredient"
  | "-ingredient"
  | "manufacturer"
  | "-manufacturer"
  | "monitoring-program-name"
  | "-monitoring-program-name"
  | "monitoring-program-type"
  | "-monitoring-program-type"
  | "monograph-type"
  | "-monograph-type"
  | "monograph"
  | "-monograph"
  | "source-cost"
  | "-source-cost"
  | "status"
  | "-status";

export class MedicationKnowledgeFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "MedicationKnowledge";

  /**
   * The type of category for the medication (for example, therapeutic
   * classification, therapeutic sub-classification)
   * @fhirSearchType `token`
   * @fhirPath `MedicationKnowledge.medicineClassification.type`
   */
  classificationType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("classification-type", ...args);
  }
  /**
   * Specific category assigned to the medication
   * @fhirSearchType `token`
   * @fhirPath `MedicationKnowledge.medicineClassification.classification`
   */
  classification(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("classification", ...args);
  }
  /**
   * Code that identifies this medication
   * @fhirSearchType `token`
   * @fhirPath `MedicationKnowledge.code`
   */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
   * powder | tablets | capsule +
   * @fhirSearchType `token`
   * @fhirPath `MedicationKnowledge.doseForm`
   */
  doseform(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("doseform", ...args);
  }
  /**
   * Medication(s) or substance(s) contained in the medication
   * @fhirSearchType `token`
   * @fhirPath `(MedicationKnowledge.ingredient.item as CodeableConcept)`
   */
  ingredientCode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("ingredient-code", ...args);
  }
  /**
   * Medication(s) or substance(s) contained in the medication
   * @fhirSearchType `reference`
   * @fhirPath `(MedicationKnowledge.ingredient.item as Reference)`
   */
  ingredient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("ingredient", ...args);
  }
  /**
   * Manufacturer of the item
   * @fhirSearchType `reference`
   * @fhirPath `MedicationKnowledge.manufacturer`
   */
  manufacturer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("manufacturer", ...args);
  }
  /**
   * Name of the reviewing program
   * @fhirSearchType `token`
   * @fhirPath `MedicationKnowledge.monitoringProgram.name`
   */
  monitoringProgramName(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("monitoring-program-name", ...args);
  }
  /**
   * Type of program under which the medication is monitored
   * @fhirSearchType `token`
   * @fhirPath `MedicationKnowledge.monitoringProgram.type`
   */
  monitoringProgramType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("monitoring-program-type", ...args);
  }
  /**
   * The category of medication document
   * @fhirSearchType `token`
   * @fhirPath `MedicationKnowledge.monograph.type`
   */
  monographType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("monograph-type", ...args);
  }
  /**
   * Associated documentation about the medication
   * @fhirSearchType `reference`
   * @fhirPath `MedicationKnowledge.monograph.source`
   */
  monograph(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("monograph", ...args);
  }
  /**
   * The source or owner for the price information
   * @fhirSearchType `token`
   * @fhirPath `MedicationKnowledge.cost.source`
   */
  sourceCost(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("source-cost", ...args);
  }
  /**
   * active | inactive | entered-in-error
   * @fhirSearchType `token`
   * @fhirPath `MedicationKnowledge.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | MedicationKnowledgeSortOrder
      | MedicationKnowledgeSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type MedicationRequestSortOrder =
  | DomainResourceSortOrder
  | "authoredon"
  | "-authoredon"
  | "category"
  | "-category"
  | "intended-dispenser"
  | "-intended-dispenser"
  | "intended-performer"
  | "-intended-performer"
  | "intended-performertype"
  | "-intended-performertype"
  | "intent"
  | "-intent"
  | "priority"
  | "-priority"
  | "requester"
  | "-requester"
  | "subject"
  | "-subject"
  | "code"
  | "-code"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "date"
  | "-date"
  | "encounter"
  | "-encounter"
  | "medication"
  | "-medication"
  | "status"
  | "-status";

export class MedicationRequestFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "MedicationRequest";

  /**
   * Return prescriptions written on this date
   * @fhirSearchType `date`
   * @fhirPath `MedicationRequest.authoredOn`
   */
  authoredon(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("authoredon", ...args);
  }
  /**
   * Returns prescriptions with different categories
   * @fhirSearchType `token`
   * @fhirPath `MedicationRequest.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * Returns prescriptions intended to be dispensed by this Organization
   * @fhirSearchType `reference`
   * @fhirPath `MedicationRequest.dispenseRequest.performer`
   */
  intendedDispenser(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("intended-dispenser", ...args);
  }
  /**
   * Returns the intended performer of the administration of the medication request
   * @fhirSearchType `reference`
   * @fhirPath `MedicationRequest.performer`
   */
  intendedPerformer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("intended-performer", ...args);
  }
  /**
   * Returns requests for a specific type of performer
   * @fhirSearchType `token`
   * @fhirPath `MedicationRequest.performerType`
   */
  intendedPerformertype(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("intended-performertype", ...args);
  }
  /**
   * Returns prescriptions with different intents
   * @fhirSearchType `token`
   * @fhirPath `MedicationRequest.intent`
   */
  intent(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("intent", ...args);
  }
  /**
   * Returns prescriptions with different priorities
   * @fhirSearchType `token`
   * @fhirPath `MedicationRequest.priority`
   */
  priority(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("priority", ...args);
  }
  /**
   * Returns prescriptions prescribed by this prescriber
   * @fhirSearchType `reference`
   * @fhirPath `MedicationRequest.requester`
   */
  requester(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("requester", ...args);
  }
  /**
   * The identity of a patient to list orders  for
   * @fhirSearchType `reference`
   * @fhirPath `MedicationRequest.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code
 * that identifies the allergy or intolerance
* [Condition](condition.html): Code
 * for the condition
* [DeviceRequest](devicerequest.html): Code for what is being
 * requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the
 * report, as opposed to codes for the atomic results, which are the names on the
 * observation resource referred to from the result
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
*
 * [List](list.html): What the purpose of this list is
*
 * [Medication](medication.html): Returns medications for a specific code
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication code
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine code
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions of this medication code
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication code
* [Observation](observation.html): The code of the observation
 * type
* [Procedure](procedure.html): A code to identify a  procedure
*
 * [ServiceRequest](servicerequest.html): What is being requested/ordered
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.code | AllergyIntolerance.reaction.substance | Condition.code | (DeviceRequest.code as CodeableConcept) | DiagnosticReport.code | FamilyMemberHistory.condition.code | List.code | Medication.code | (MedicationAdministration.medication as CodeableConcept) | (MedicationDispense.medication as CodeableConcept) | (MedicationRequest.medication as CodeableConcept) | (MedicationStatement.medication as CodeableConcept) | Observation.code | Procedure.code | ServiceRequest.code`
 */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
 * Multiple Resources: 

* [MedicationRequest](medicationrequest.html): Returns
 * medication request to be administered on a specific date
 * @fhirSearchType `date`
 * @fhirPath `MedicationRequest.dosageInstruction.timing.event`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this encounter identifier
 * @fhirSearchType `reference`
 * @fhirPath `MedicationRequest.encounter`
 */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
 * Multiple Resources: 

*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication resource
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine resource
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions for this medication reference
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication reference
 * @fhirSearchType `reference`
 * @fhirPath `(MedicationAdministration.medication as Reference) | (MedicationDispense.medication as Reference) | (MedicationRequest.medication as Reference) | (MedicationStatement.medication as Reference)`
 */
  medication(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("medication", ...args);
  }
  /**
 * Multiple Resources: 

*
 * [MedicationAdministration](medicationadministration.html):
 * MedicationAdministration event status (for example one of
 * active/paused/completed/nullified)
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with a
 * specified dispense status
* [MedicationRequest](medicationrequest.html): Status
 * of the prescription
* [MedicationStatement](medicationstatement.html): Return
 * statements that match the given status
 * @fhirSearchType `token`
 * @fhirPath `MedicationAdministration.status | MedicationDispense.status | MedicationRequest.status | MedicationStatement.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | MedicationRequestSortOrder
      | MedicationRequestSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type MedicationStatementSortOrder =
  | DomainResourceSortOrder
  | "category"
  | "-category"
  | "context"
  | "-context"
  | "effective"
  | "-effective"
  | "part-of"
  | "-part-of"
  | "source"
  | "-source"
  | "subject"
  | "-subject"
  | "code"
  | "-code"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "medication"
  | "-medication"
  | "status"
  | "-status";

export class MedicationStatementFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "MedicationStatement";

  /**
   * Returns statements of this category of medicationstatement
   * @fhirSearchType `token`
   * @fhirPath `MedicationStatement.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * Returns statements for a specific context (episode or episode of Care).
   * @fhirSearchType `reference`
   * @fhirPath `MedicationStatement.context`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("context", ...args);
  }
  /**
   * Date when patient was taking (or not taking) the medication
   * @fhirSearchType `date`
   * @fhirPath `MedicationStatement.effective`
   */
  effective(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("effective", ...args);
  }
  /**
   * Returns statements that are part of another event.
   * @fhirSearchType `reference`
   * @fhirPath `MedicationStatement.partOf`
   */
  partOf(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("part-of", ...args);
  }
  /**
   * Who or where the information in the statement came from
   * @fhirSearchType `reference`
   * @fhirPath `MedicationStatement.informationSource`
   */
  source(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("source", ...args);
  }
  /**
   * The identity of a patient, animal or group to list statements for
   * @fhirSearchType `reference`
   * @fhirPath `MedicationStatement.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code
 * that identifies the allergy or intolerance
* [Condition](condition.html): Code
 * for the condition
* [DeviceRequest](devicerequest.html): Code for what is being
 * requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the
 * report, as opposed to codes for the atomic results, which are the names on the
 * observation resource referred to from the result
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
*
 * [List](list.html): What the purpose of this list is
*
 * [Medication](medication.html): Returns medications for a specific code
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication code
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine code
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions of this medication code
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication code
* [Observation](observation.html): The code of the observation
 * type
* [Procedure](procedure.html): A code to identify a  procedure
*
 * [ServiceRequest](servicerequest.html): What is being requested/ordered
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.code | AllergyIntolerance.reaction.substance | Condition.code | (DeviceRequest.code as CodeableConcept) | DiagnosticReport.code | FamilyMemberHistory.condition.code | List.code | Medication.code | (MedicationAdministration.medication as CodeableConcept) | (MedicationDispense.medication as CodeableConcept) | (MedicationRequest.medication as CodeableConcept) | (MedicationStatement.medication as CodeableConcept) | Observation.code | Procedure.code | ServiceRequest.code`
 */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
 * Multiple Resources: 

*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication resource
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine resource
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions for this medication reference
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication reference
 * @fhirSearchType `reference`
 * @fhirPath `(MedicationAdministration.medication as Reference) | (MedicationDispense.medication as Reference) | (MedicationRequest.medication as Reference) | (MedicationStatement.medication as Reference)`
 */
  medication(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("medication", ...args);
  }
  /**
 * Multiple Resources: 

*
 * [MedicationAdministration](medicationadministration.html):
 * MedicationAdministration event status (for example one of
 * active/paused/completed/nullified)
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with a
 * specified dispense status
* [MedicationRequest](medicationrequest.html): Status
 * of the prescription
* [MedicationStatement](medicationstatement.html): Return
 * statements that match the given status
 * @fhirSearchType `token`
 * @fhirPath `MedicationAdministration.status | MedicationDispense.status | MedicationRequest.status | MedicationStatement.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | MedicationStatementSortOrder
      | MedicationStatementSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type MedicinalProductDefinitionSortOrder =
  | DomainResourceSortOrder
  | "characteristic-type"
  | "-characteristic-type"
  | "characteristic"
  | "-characteristic"
  | "contact"
  | "-contact"
  | "domain"
  | "-domain"
  | "identifier"
  | "-identifier"
  | "ingredient"
  | "-ingredient"
  | "master-file"
  | "-master-file"
  | "name-language"
  | "-name-language"
  | "name"
  | "-name"
  | "product-classification"
  | "-product-classification"
  | "status"
  | "-status"
  | "type"
  | "-type";

export class MedicinalProductDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "MedicinalProductDefinition";

  /**
   * A category for the characteristic
   * @fhirSearchType `token`
   * @fhirPath `MedicinalProductDefinition.characteristic.type`
   */
  characteristicType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("characteristic-type", ...args);
  }
  /**
   * Allows the key product features to be recorded, such as "sugar free", "modified
   * release", "parallel import"
   * @fhirSearchType `token`
   * @fhirPath `MedicinalProductDefinition.characteristic.value`
   */
  characteristic(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("characteristic", ...args);
  }
  /**
   * A product specific contact, person (in a role), or an organization
   * @fhirSearchType `reference`
   * @fhirPath `MedicinalProductDefinition.contact.contact`
   */
  contact(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("contact", ...args);
  }
  /**
   * If this medicine applies to human or veterinary uses
   * @fhirSearchType `token`
   * @fhirPath `MedicinalProductDefinition.domain`
   */
  domain(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("domain", ...args);
  }
  /**
   * Business identifier for this product. Could be an MPID
   * @fhirSearchType `token`
   * @fhirPath `MedicinalProductDefinition.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * An ingredient of this product
   * @fhirSearchType `token`
   * @fhirPath `MedicinalProductDefinition.ingredient`
   */
  ingredient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("ingredient", ...args);
  }
  /**
   * A master file for to the medicinal product (e.g. Pharmacovigilance System Master
   * File)
   * @fhirSearchType `reference`
   * @fhirPath `MedicinalProductDefinition.masterFile`
   */
  masterFile(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("master-file", ...args);
  }
  /**
   * Language code for this name
   * @fhirSearchType `token`
   * @fhirPath `MedicinalProductDefinition.name.countryLanguage.language`
   */
  nameLanguage(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("name-language", ...args);
  }
  /**
   * The full product name
   * @fhirSearchType `string`
   * @fhirPath `MedicinalProductDefinition.name.productName`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * Allows the product to be classified by various systems
   * @fhirSearchType `token`
   * @fhirPath `MedicinalProductDefinition.classification`
   */
  productClassification(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("product-classification", ...args);
  }
  /**
   * The status within the lifecycle of this product record. A high-level status,
   * this is not intended to duplicate details carried elsewhere such as legal
   * status, or authorization status
   * @fhirSearchType `token`
   * @fhirPath `MedicinalProductDefinition.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Regulatory type, e.g. Investigational or Authorized
   * @fhirSearchType `token`
   * @fhirPath `MedicinalProductDefinition.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | MedicinalProductDefinitionSortOrder
      | MedicinalProductDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type MessageDefinitionSortOrder =
  | DomainResourceSortOrder
  | "category"
  | "-category"
  | "event"
  | "-event"
  | "focus"
  | "-focus"
  | "parent"
  | "-parent"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class MessageDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "MessageDefinition";

  /**
   * The behavior associated with the message
   * @fhirSearchType `token`
   * @fhirPath `MessageDefinition.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * The event that triggers the message or link to the event definition.
   * @fhirSearchType `token`
   * @fhirPath `MessageDefinition.event`
   */
  event(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("event", ...args);
  }
  /**
   * A resource that is a permitted focus of the message
   * @fhirSearchType `token`
   * @fhirPath `MessageDefinition.focus.code`
   */
  focus(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("focus", ...args);
  }
  /**
   * A resource that is the parent of the definition
   * @fhirSearchType `reference`
   * @fhirPath `MessageDefinition.parent`
   */
  parent(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("parent", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * quantity- or range-valued use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned
 * to the code system
* [CompartmentDefinition](compartmentdefinition.html): A
 * quantity- or range-valued use context assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned
 * to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or
 * range-valued use context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use
 * context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A quantity- or range-valued use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use
 * context assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A quantity- or range-valued use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use
 * context assigned to the structure definition
*
 * [StructureMap](structuremap.html): A quantity- or range-valued use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or
 * range-valued use context assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to
 * the value set
 * @fhirSearchType `quantity`
 * @fhirPath `(CapabilityStatement.useContext.value as Quantity) | (CapabilityStatement.useContext.value as Range) | (CodeSystem.useContext.value as Quantity) | (CodeSystem.useContext.value as Range) | (CompartmentDefinition.useContext.value as Quantity) | (CompartmentDefinition.useContext.value as Range) | (ConceptMap.useContext.value as Quantity) | (ConceptMap.useContext.value as Range) | (GraphDefinition.useContext.value as Quantity) | (GraphDefinition.useContext.value as Range) | (ImplementationGuide.useContext.value as Quantity) | (ImplementationGuide.useContext.value as Range) | (MessageDefinition.useContext.value as Quantity) | (MessageDefinition.useContext.value as Range) | (NamingSystem.useContext.value as Quantity) | (NamingSystem.useContext.value as Range) | (OperationDefinition.useContext.value as Quantity) | (OperationDefinition.useContext.value as Range) | (SearchParameter.useContext.value as Quantity) | (SearchParameter.useContext.value as Range) | (StructureDefinition.useContext.value as Quantity) | (StructureDefinition.useContext.value as Range) | (StructureMap.useContext.value as Quantity) | (StructureMap.useContext.value as Range) | (TerminologyCapabilities.useContext.value as Quantity) | (TerminologyCapabilities.useContext.value as Range) | (ValueSet.useContext.value as Quantity) | (ValueSet.useContext.value as Range)`
 */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and quantity- or range-based value assigned to the capability
 * statement
* [CodeSystem](codesystem.html): A use context type and quantity- or
 * range-based value assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context type and
 * quantity- or range-based value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based
 * value assigned to the concept map
* [GraphDefinition](graphdefinition.html): A
 * use context type and quantity- or range-based value assigned to the graph
 * definition
* [ImplementationGuide](implementationguide.html): A use context
 * type and quantity- or range-based value assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and quantity- or
 * range-based value assigned to the message definition
*
 * [NamingSystem](namingsystem.html): A use context type and quantity- or
 * range-based value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and
 * quantity- or range-based value assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A use context type and quantity- or
 * range-based value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and
 * quantity- or range-based value assigned to the structure definition
*
 * [StructureMap](structuremap.html): A use context type and quantity- or
 * range-based value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * quantity- or range-based value assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A use context type and quantity- or range-based value
 * assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and value assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A use context type and value assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A use context
 * type and value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and value assigned to the
 * concept map
* [GraphDefinition](graphdefinition.html): A use context type and
 * value assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context type and value
 * assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and value
 * assigned to the message definition
* [NamingSystem](namingsystem.html): A use
 * context type and value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and value
 * assigned to the operation definition
* [SearchParameter](searchparameter.html):
 * A use context type and value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and value
 * assigned to the structure definition
* [StructureMap](structuremap.html): A use
 * context type and value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * value assigned to the terminology capabilities
* [ValueSet](valueset.html): A
 * use context type and value assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * type of use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A type of use context assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A type of use
 * context assigned to the compartment definition
* [ConceptMap](conceptmap.html):
 * A type of use context assigned to the concept map
*
 * [GraphDefinition](graphdefinition.html): A type of use context assigned to the
 * graph definition
* [ImplementationGuide](implementationguide.html): A type of
 * use context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A type of use context assigned to
 * the message definition
* [NamingSystem](namingsystem.html): A type of use
 * context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A type of use context assigned
 * to the operation definition
* [SearchParameter](searchparameter.html): A type
 * of use context assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A type of use context assigned
 * to the structure definition
* [StructureMap](structuremap.html): A type of use
 * context assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A type of use context
 * assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of
 * use context assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.useContext.code | CodeSystem.useContext.code | CompartmentDefinition.useContext.code | ConceptMap.useContext.code | GraphDefinition.useContext.code | ImplementationGuide.useContext.code | MessageDefinition.useContext.code | NamingSystem.useContext.code | OperationDefinition.useContext.code | SearchParameter.useContext.code | StructureDefinition.useContext.code | StructureMap.useContext.code | TerminologyCapabilities.useContext.code | ValueSet.useContext.code`
 */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context assigned to the capability statement
* [CodeSystem](codesystem.html): A
 * use context assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to
 * the compartment definition
* [ConceptMap](conceptmap.html): A use context
 * assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use
 * context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context assigned to the
 * implementation guide
* [MessageDefinition](messagedefinition.html): A use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context assigned to the
 * operation definition
* [SearchParameter](searchparameter.html): A use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context assigned to the
 * structure definition
* [StructureMap](structuremap.html): A use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned
 * to the terminology capabilities
* [ValueSet](valueset.html): A use context
 * assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `(CapabilityStatement.useContext.value as CodeableConcept) | (CodeSystem.useContext.value as CodeableConcept) | (CompartmentDefinition.useContext.value as CodeableConcept) | (ConceptMap.useContext.value as CodeableConcept) | (GraphDefinition.useContext.value as CodeableConcept) | (ImplementationGuide.useContext.value as CodeableConcept) | (MessageDefinition.useContext.value as CodeableConcept) | (NamingSystem.useContext.value as CodeableConcept) | (OperationDefinition.useContext.value as CodeableConcept) | (SearchParameter.useContext.value as CodeableConcept) | (StructureDefinition.useContext.value as CodeableConcept) | (StructureMap.useContext.value as CodeableConcept) | (TerminologyCapabilities.useContext.value as CodeableConcept) | (ValueSet.useContext.value as CodeableConcept)`
 */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * capability statement publication date
* [CodeSystem](codesystem.html): The code
 * system publication date
* [CompartmentDefinition](compartmentdefinition.html):
 * The compartment definition publication date
* [ConceptMap](conceptmap.html):
 * The concept map publication date
* [GraphDefinition](graphdefinition.html): The
 * graph definition publication date
*
 * [ImplementationGuide](implementationguide.html): The implementation guide
 * publication date
* [MessageDefinition](messagedefinition.html): The message
 * definition publication date
* [NamingSystem](namingsystem.html): The naming
 * system publication date
* [OperationDefinition](operationdefinition.html): The
 * operation definition publication date
*
 * [SearchParameter](searchparameter.html): The search parameter publication
 * date
* [StructureDefinition](structuredefinition.html): The structure
 * definition publication date
* [StructureMap](structuremap.html): The structure
 * map publication date
* [TerminologyCapabilities](terminologycapabilities.html):
 * The terminology capabilities publication date
* [ValueSet](valueset.html): The
 * value set publication date
 * @fhirSearchType `date`
 * @fhirPath `CapabilityStatement.date | CodeSystem.date | CompartmentDefinition.date | ConceptMap.date | GraphDefinition.date | ImplementationGuide.date | MessageDefinition.date | NamingSystem.date | OperationDefinition.date | SearchParameter.date | StructureDefinition.date | StructureMap.date | TerminologyCapabilities.date | ValueSet.date`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * description of the capability statement
* [CodeSystem](codesystem.html): The
 * description of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The description of the
 * compartment definition
* [ConceptMap](conceptmap.html): The description of the
 * concept map
* [GraphDefinition](graphdefinition.html): The description of the
 * graph definition
* [ImplementationGuide](implementationguide.html): The
 * description of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The description of the message
 * definition
* [NamingSystem](namingsystem.html): The description of the naming
 * system
* [OperationDefinition](operationdefinition.html): The description of
 * the operation definition
* [SearchParameter](searchparameter.html): The
 * description of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The description of the
 * structure definition
* [StructureMap](structuremap.html): The description of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The description of the terminology capabilities
* [ValueSet](valueset.html):
 * The description of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.description | CodeSystem.description | CompartmentDefinition.description | ConceptMap.description | GraphDefinition.description | ImplementationGuide.description | MessageDefinition.description | NamingSystem.description | OperationDefinition.description | SearchParameter.description | StructureDefinition.description | StructureMap.description | TerminologyCapabilities.description | ValueSet.description`
 */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
 * Multiple Resources: 

* [CodeSystem](codesystem.html): External identifier for
 * the code system
* [ConceptMap](conceptmap.html): External identifier for the
 * concept map
* [MessageDefinition](messagedefinition.html): External identifier
 * for the message definition
* [StructureDefinition](structuredefinition.html):
 * External identifier for the structure definition
*
 * [StructureMap](structuremap.html): External identifier for the structure map
*
 * [ValueSet](valueset.html): External identifier for the value set
 * @fhirSearchType `token`
 * @fhirPath `CodeSystem.identifier | ConceptMap.identifier | MessageDefinition.identifier | StructureDefinition.identifier | StructureMap.identifier | ValueSet.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Intended jurisdiction for the capability statement
*
 * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
*
 * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
*
 * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph
 * definition
* [ImplementationGuide](implementationguide.html): Intended
 * jurisdiction for the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the
 * message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction
 * for the naming system
* [OperationDefinition](operationdefinition.html):
 * Intended jurisdiction for the operation definition
*
 * [SearchParameter](searchparameter.html): Intended jurisdiction for the search
 * parameter
* [StructureDefinition](structuredefinition.html): Intended
 * jurisdiction for the structure definition
* [StructureMap](structuremap.html):
 * Intended jurisdiction for the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction
 * for the terminology capabilities
* [ValueSet](valueset.html): Intended
 * jurisdiction for the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.jurisdiction | CodeSystem.jurisdiction | ConceptMap.jurisdiction | GraphDefinition.jurisdiction | ImplementationGuide.jurisdiction | MessageDefinition.jurisdiction | NamingSystem.jurisdiction | OperationDefinition.jurisdiction | SearchParameter.jurisdiction | StructureDefinition.jurisdiction | StructureMap.jurisdiction | TerminologyCapabilities.jurisdiction | ValueSet.jurisdiction`
 */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Computationally friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): Computationally friendly name of the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): Computationally
 * friendly name of the compartment definition
* [ConceptMap](conceptmap.html):
 * Computationally friendly name of the concept map
*
 * [GraphDefinition](graphdefinition.html): Computationally friendly name of the
 * graph definition
* [ImplementationGuide](implementationguide.html):
 * Computationally friendly name of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Computationally friendly name of
 * the message definition
* [NamingSystem](namingsystem.html): Computationally
 * friendly name of the naming system
*
 * [OperationDefinition](operationdefinition.html): Computationally friendly name
 * of the operation definition
* [SearchParameter](searchparameter.html):
 * Computationally friendly name of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Computationally friendly name
 * of the structure definition
* [StructureMap](structuremap.html):
 * Computationally friendly name of the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Computationally
 * friendly name of the terminology capabilities
* [ValueSet](valueset.html):
 * Computationally friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.name | CodeSystem.name | CompartmentDefinition.name | ConceptMap.name | GraphDefinition.name | ImplementationGuide.name | MessageDefinition.name | NamingSystem.name | OperationDefinition.name | SearchParameter.name | StructureDefinition.name | StructureMap.name | TerminologyCapabilities.name | ValueSet.name`
 */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name
 * of the publisher of the capability statement
* [CodeSystem](codesystem.html):
 * Name of the publisher of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of
 * the compartment definition
* [ConceptMap](conceptmap.html): Name of the
 * publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of
 * the publisher of the graph definition
*
 * [ImplementationGuide](implementationguide.html): Name of the publisher of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): Name of the
 * publisher of the message definition
* [NamingSystem](namingsystem.html): Name
 * of the publisher of the naming system
*
 * [OperationDefinition](operationdefinition.html): Name of the publisher of the
 * operation definition
* [SearchParameter](searchparameter.html): Name of the
 * publisher of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Name of the publisher of the
 * structure definition
* [StructureMap](structuremap.html): Name of the publisher
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * Name of the publisher of the terminology capabilities
*
 * [ValueSet](valueset.html): Name of the publisher of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.publisher | CodeSystem.publisher | CompartmentDefinition.publisher | ConceptMap.publisher | GraphDefinition.publisher | ImplementationGuide.publisher | MessageDefinition.publisher | NamingSystem.publisher | OperationDefinition.publisher | SearchParameter.publisher | StructureDefinition.publisher | StructureMap.publisher | TerminologyCapabilities.publisher | ValueSet.publisher`
 */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * current status of the capability statement
* [CodeSystem](codesystem.html): The
 * current status of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The current status of the
 * compartment definition
* [ConceptMap](conceptmap.html): The current status of
 * the concept map
* [GraphDefinition](graphdefinition.html): The current status
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * current status of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The current status of the message
 * definition
* [NamingSystem](namingsystem.html): The current status of the
 * naming system
* [OperationDefinition](operationdefinition.html): The current
 * status of the operation definition
* [SearchParameter](searchparameter.html):
 * The current status of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The current status of the
 * structure definition
* [StructureMap](structuremap.html): The current status of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The current status of the terminology capabilities
* [ValueSet](valueset.html):
 * The current status of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.status | CodeSystem.status | CompartmentDefinition.status | ConceptMap.status | GraphDefinition.status | ImplementationGuide.status | MessageDefinition.status | NamingSystem.status | OperationDefinition.status | SearchParameter.status | StructureDefinition.status | StructureMap.status | TerminologyCapabilities.status | ValueSet.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * human-friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): The human-friendly name of the code system
*
 * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
*
 * [ImplementationGuide](implementationguide.html): The human-friendly name of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The
 * human-friendly name of the message definition
*
 * [OperationDefinition](operationdefinition.html): The human-friendly name of the
 * operation definition
* [StructureDefinition](structuredefinition.html): The
 * human-friendly name of the structure definition
*
 * [StructureMap](structuremap.html): The human-friendly name of the structure
 * map
* [TerminologyCapabilities](terminologycapabilities.html): The
 * human-friendly name of the terminology capabilities
*
 * [ValueSet](valueset.html): The human-friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.title | CodeSystem.title | ConceptMap.title | ImplementationGuide.title | MessageDefinition.title | OperationDefinition.title | StructureDefinition.title | StructureMap.title | TerminologyCapabilities.title | ValueSet.title`
 */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * uri that identifies the capability statement
* [CodeSystem](codesystem.html):
 * The uri that identifies the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the
 * compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies
 * the concept map
* [GraphDefinition](graphdefinition.html): The uri that
 * identifies the graph definition
*
 * [ImplementationGuide](implementationguide.html): The uri that identifies the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The uri
 * that identifies the message definition
*
 * [OperationDefinition](operationdefinition.html): The uri that identifies the
 * operation definition
* [SearchParameter](searchparameter.html): The uri that
 * identifies the search parameter
*
 * [StructureDefinition](structuredefinition.html): The uri that identifies the
 * structure definition
* [StructureMap](structuremap.html): The uri that
 * identifies the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies
 * the terminology capabilities
* [ValueSet](valueset.html): The uri that
 * identifies the value set
 * @fhirSearchType `uri`
 * @fhirPath `CapabilityStatement.url | CodeSystem.url | CompartmentDefinition.url | ConceptMap.url | GraphDefinition.url | ImplementationGuide.url | MessageDefinition.url | OperationDefinition.url | SearchParameter.url | StructureDefinition.url | StructureMap.url | TerminologyCapabilities.url | ValueSet.url`
 */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * business version of the capability statement
* [CodeSystem](codesystem.html):
 * The business version of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The business version of the
 * compartment definition
* [ConceptMap](conceptmap.html): The business version of
 * the concept map
* [GraphDefinition](graphdefinition.html): The business version
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * business version of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The business version of the message
 * definition
* [OperationDefinition](operationdefinition.html): The business
 * version of the operation definition
* [SearchParameter](searchparameter.html):
 * The business version of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The business version of the
 * structure definition
* [StructureMap](structuremap.html): The business version
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The business version of the terminology capabilities
*
 * [ValueSet](valueset.html): The business version of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.version | CodeSystem.version | CompartmentDefinition.version | ConceptMap.version | GraphDefinition.version | ImplementationGuide.version | MessageDefinition.version | OperationDefinition.version | SearchParameter.version | StructureDefinition.version | StructureMap.version | TerminologyCapabilities.version | ValueSet.version`
 */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | MessageDefinitionSortOrder
      | MessageDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type MessageHeaderSortOrder =
  | DomainResourceSortOrder
  | "author"
  | "-author"
  | "code"
  | "-code"
  | "destination-uri"
  | "-destination-uri"
  | "destination"
  | "-destination"
  | "enterer"
  | "-enterer"
  | "event"
  | "-event"
  | "focus"
  | "-focus"
  | "receiver"
  | "-receiver"
  | "response-id"
  | "-response-id"
  | "responsible"
  | "-responsible"
  | "sender"
  | "-sender"
  | "source-uri"
  | "-source-uri"
  | "source"
  | "-source"
  | "target"
  | "-target";

export class MessageHeaderFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "MessageHeader";

  /**
   * The source of the decision
   * @fhirSearchType `reference`
   * @fhirPath `MessageHeader.author`
   */
  author(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("author", ...args);
  }
  /**
   * ok | transient-error | fatal-error
   * @fhirSearchType `token`
   * @fhirPath `MessageHeader.response.code`
   */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
   * Actual destination address or id
   * @fhirSearchType `uri`
   * @fhirPath `MessageHeader.destination.endpoint`
   */
  destinationUri(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("destination-uri", ...args);
  }
  /**
   * Name of system
   * @fhirSearchType `string`
   * @fhirPath `MessageHeader.destination.name`
   */
  destination(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("destination", ...args);
  }
  /**
   * The source of the data entry
   * @fhirSearchType `reference`
   * @fhirPath `MessageHeader.enterer`
   */
  enterer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("enterer", ...args);
  }
  /**
   * Code for the event this message represents or link to event definition
   * @fhirSearchType `token`
   * @fhirPath `MessageHeader.event`
   */
  event(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("event", ...args);
  }
  /**
   * The actual content of the message
   * @fhirSearchType `reference`
   * @fhirPath `MessageHeader.focus`
   */
  focus(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("focus", ...args);
  }
  /**
   * Intended "real-world" recipient for the data
   * @fhirSearchType `reference`
   * @fhirPath `MessageHeader.destination.receiver`
   */
  receiver(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("receiver", ...args);
  }
  /**
   * Id of original message
   * @fhirSearchType `token`
   * @fhirPath `MessageHeader.response.identifier`
   */
  responseId(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("response-id", ...args);
  }
  /**
   * Final responsibility for event
   * @fhirSearchType `reference`
   * @fhirPath `MessageHeader.responsible`
   */
  responsible(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("responsible", ...args);
  }
  /**
   * Real world sender of the message
   * @fhirSearchType `reference`
   * @fhirPath `MessageHeader.sender`
   */
  sender(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("sender", ...args);
  }
  /**
   * Actual message source address or id
   * @fhirSearchType `uri`
   * @fhirPath `MessageHeader.source.endpoint`
   */
  sourceUri(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("source-uri", ...args);
  }
  /**
   * Name of system
   * @fhirSearchType `string`
   * @fhirPath `MessageHeader.source.name`
   */
  source(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("source", ...args);
  }
  /**
   * Particular delivery destination within the destination
   * @fhirSearchType `reference`
   * @fhirPath `MessageHeader.destination.target`
   */
  target(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("target", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | MessageHeaderSortOrder
      | MessageHeaderSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type MolecularSequenceSortOrder =
  | DomainResourceSortOrder
  | "chromosome-variant-coordinate"
  | "-chromosome-variant-coordinate"
  | "chromosome-window-coordinate"
  | "-chromosome-window-coordinate"
  | "chromosome"
  | "-chromosome"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient"
  | "referenceseqid-variant-coordinate"
  | "-referenceseqid-variant-coordinate"
  | "referenceseqid-window-coordinate"
  | "-referenceseqid-window-coordinate"
  | "referenceseqid"
  | "-referenceseqid"
  | "type"
  | "-type"
  | "variant-end"
  | "-variant-end"
  | "variant-start"
  | "-variant-start"
  | "window-end"
  | "-window-end"
  | "window-start"
  | "-window-start";

export class MolecularSequenceFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "MolecularSequence";

  /**
   * Search parameter by chromosome and variant coordinate. This will refer to part
   * of a locus or part of a gene where search region will be represented in 1-based
   * system. Since the coordinateSystem can either be 0-based or 1-based, this search
   * query will include the result of both coordinateSystem that contains the
   * equivalent segment of the gene or whole genome sequence. For example, a search
   * for sequence can be represented as
   * `chromosome-variant-coordinate=1$lt345$gt123`, this means it will search for the
   * MolecularSequence resource with variants on chromosome 1 and with position >123
   * and <345, where in 1-based system resource, all strings within region 1:124-344
   * will be revealed, while in 0-based system resource, all strings within region
   * 1:123-344 will be revealed. You may want to check detail about 0-based v.s.
   * 1-based above.
   * @fhirSearchType `composite`
   * @fhirPath `MolecularSequence.variant`
   */
  chromosomeVariantCoordinate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("chromosome-variant-coordinate", ...args);
  }
  /**
   * Search parameter by chromosome and window. This will refer to part of a locus or
   * part of a gene where search region will be represented in 1-based system. Since
   * the coordinateSystem can either be 0-based or 1-based, this search query will
   * include the result of both coordinateSystem that contains the equivalent segment
   * of the gene or whole genome sequence. For example, a search for sequence can be
   * represented as `chromosome-window-coordinate=1$lt345$gt123`, this means it will
   * search for the MolecularSequence resource with a window on chromosome 1 and with
   * position >123 and <345, where in 1-based system resource, all strings within
   * region 1:124-344 will be revealed, while in 0-based system resource, all strings
   * within region 1:123-344 will be revealed. You may want to check detail about
   * 0-based v.s. 1-based above.
   * @fhirSearchType `composite`
   * @fhirPath `MolecularSequence.referenceSeq`
   */
  chromosomeWindowCoordinate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("chromosome-window-coordinate", ...args);
  }
  /**
   * Chromosome number of the reference sequence
   * @fhirSearchType `token`
   * @fhirPath `MolecularSequence.referenceSeq.chromosome`
   */
  chromosome(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("chromosome", ...args);
  }
  /**
   * The unique identity for a particular sequence
   * @fhirSearchType `token`
   * @fhirPath `MolecularSequence.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The subject that the observation is about
   * @fhirSearchType `reference`
   * @fhirPath `MolecularSequence.patient`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * Search parameter by reference sequence and variant coordinate. This will refer
   * to part of a locus or part of a gene where search region will be represented in
   * 1-based system. Since the coordinateSystem can either be 0-based or 1-based,
   * this search query will include the result of both coordinateSystem that contains
   * the equivalent segment of the gene or whole genome sequence. For example, a
   * search for sequence can be represented as
   * `referenceSeqId-variant-coordinate=NC_000001.11$lt345$gt123`, this means it will
   * search for the MolecularSequence resource with variants on NC_000001.11 and with
   * position >123 and <345, where in 1-based system resource, all strings within
   * region NC_000001.11:124-344 will be revealed, while in 0-based system resource,
   * all strings within region NC_000001.11:123-344 will be revealed. You may want to
   * check detail about 0-based v.s. 1-based above.
   * @fhirSearchType `composite`
   * @fhirPath `MolecularSequence.variant`
   */
  referenceseqidVariantCoordinate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("referenceseqid-variant-coordinate", ...args);
  }
  /**
   * Search parameter by reference sequence and window. This will refer to part of a
   * locus or part of a gene where search region will be represented in 1-based
   * system. Since the coordinateSystem can either be 0-based or 1-based, this search
   * query will include the result of both coordinateSystem that contains the
   * equivalent segment of the gene or whole genome sequence. For example, a search
   * for sequence can be represented as
   * `referenceSeqId-window-coordinate=NC_000001.11$lt345$gt123`, this means it will
   * search for the MolecularSequence resource with a window on NC_000001.11 and with
   * position >123 and <345, where in 1-based system resource, all strings within
   * region NC_000001.11:124-344 will be revealed, while in 0-based system resource,
   * all strings within region NC_000001.11:123-344 will be revealed. You may want to
   * check detail about 0-based v.s. 1-based above.
   * @fhirSearchType `composite`
   * @fhirPath `MolecularSequence.referenceSeq`
   */
  referenceseqidWindowCoordinate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("referenceseqid-window-coordinate", ...args);
  }
  /**
   * Reference Sequence of the sequence
   * @fhirSearchType `token`
   * @fhirPath `MolecularSequence.referenceSeq.referenceSeqId`
   */
  referenceseqid(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("referenceseqid", ...args);
  }
  /**
   * Amino Acid Sequence/ DNA Sequence / RNA Sequence
   * @fhirSearchType `token`
   * @fhirPath `MolecularSequence.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }
  /**
   * End position (0-based exclusive, which menas the acid at this position will not
   * be included, 1-based inclusive, which means the acid at this position will be
   * included) of the variant.
   * @fhirSearchType `number`
   * @fhirPath `MolecularSequence.variant.end`
   */
  variantEnd(
    ...args: DropFirst<Parameters<FhirSearchBuilder["numberParam"]>>
  ): this {
    return this.numberParam("variant-end", ...args);
  }
  /**
   * Start position (0-based inclusive, 1-based inclusive, that means the nucleic
   * acid or amino acid at this position will be included) of the variant.
   * @fhirSearchType `number`
   * @fhirPath `MolecularSequence.variant.start`
   */
  variantStart(
    ...args: DropFirst<Parameters<FhirSearchBuilder["numberParam"]>>
  ): this {
    return this.numberParam("variant-start", ...args);
  }
  /**
   * End position (0-based exclusive, which menas the acid at this position will not
   * be included, 1-based inclusive, which means the acid at this position will be
   * included) of the reference sequence.
   * @fhirSearchType `number`
   * @fhirPath `MolecularSequence.referenceSeq.windowEnd`
   */
  windowEnd(
    ...args: DropFirst<Parameters<FhirSearchBuilder["numberParam"]>>
  ): this {
    return this.numberParam("window-end", ...args);
  }
  /**
   * Start position (0-based inclusive, 1-based inclusive, that means the nucleic
   * acid or amino acid at this position will be included) of the reference sequence.
   * @fhirSearchType `number`
   * @fhirPath `MolecularSequence.referenceSeq.windowStart`
   */
  windowStart(
    ...args: DropFirst<Parameters<FhirSearchBuilder["numberParam"]>>
  ): this {
    return this.numberParam("window-start", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | MolecularSequenceSortOrder
      | MolecularSequenceSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type NamingSystemSortOrder =
  | DomainResourceSortOrder
  | "contact"
  | "-contact"
  | "id-type"
  | "-id-type"
  | "kind"
  | "-kind"
  | "period"
  | "-period"
  | "responsible"
  | "-responsible"
  | "telecom"
  | "-telecom"
  | "type"
  | "-type"
  | "value"
  | "-value"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status";

export class NamingSystemFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "NamingSystem";

  /**
   * Name of an individual to contact
   * @fhirSearchType `string`
   * @fhirPath `NamingSystem.contact.name`
   */
  contact(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("contact", ...args);
  }
  /**
   * oid | uuid | uri | other
   * @fhirSearchType `token`
   * @fhirPath `NamingSystem.uniqueId.type`
   */
  idType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("id-type", ...args);
  }
  /**
   * codesystem | identifier | root
   * @fhirSearchType `token`
   * @fhirPath `NamingSystem.kind`
   */
  kind(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("kind", ...args);
  }
  /**
   * When is identifier valid?
   * @fhirSearchType `date`
   * @fhirPath `NamingSystem.uniqueId.period`
   */
  period(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("period", ...args);
  }
  /**
   * Who maintains system namespace?
   * @fhirSearchType `string`
   * @fhirPath `NamingSystem.responsible`
   */
  responsible(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("responsible", ...args);
  }
  /**
   * Contact details for individual or organization
   * @fhirSearchType `token`
   * @fhirPath `NamingSystem.contact.telecom`
   */
  telecom(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("telecom", ...args);
  }
  /**
   * e.g. driver,  provider,  patient, bank etc.
   * @fhirSearchType `token`
   * @fhirPath `NamingSystem.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }
  /**
   * The unique identifier
   * @fhirSearchType `string`
   * @fhirPath `NamingSystem.uniqueId.value`
   */
  value(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("value", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * quantity- or range-valued use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned
 * to the code system
* [CompartmentDefinition](compartmentdefinition.html): A
 * quantity- or range-valued use context assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned
 * to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or
 * range-valued use context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use
 * context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A quantity- or range-valued use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use
 * context assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A quantity- or range-valued use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use
 * context assigned to the structure definition
*
 * [StructureMap](structuremap.html): A quantity- or range-valued use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or
 * range-valued use context assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to
 * the value set
 * @fhirSearchType `quantity`
 * @fhirPath `(CapabilityStatement.useContext.value as Quantity) | (CapabilityStatement.useContext.value as Range) | (CodeSystem.useContext.value as Quantity) | (CodeSystem.useContext.value as Range) | (CompartmentDefinition.useContext.value as Quantity) | (CompartmentDefinition.useContext.value as Range) | (ConceptMap.useContext.value as Quantity) | (ConceptMap.useContext.value as Range) | (GraphDefinition.useContext.value as Quantity) | (GraphDefinition.useContext.value as Range) | (ImplementationGuide.useContext.value as Quantity) | (ImplementationGuide.useContext.value as Range) | (MessageDefinition.useContext.value as Quantity) | (MessageDefinition.useContext.value as Range) | (NamingSystem.useContext.value as Quantity) | (NamingSystem.useContext.value as Range) | (OperationDefinition.useContext.value as Quantity) | (OperationDefinition.useContext.value as Range) | (SearchParameter.useContext.value as Quantity) | (SearchParameter.useContext.value as Range) | (StructureDefinition.useContext.value as Quantity) | (StructureDefinition.useContext.value as Range) | (StructureMap.useContext.value as Quantity) | (StructureMap.useContext.value as Range) | (TerminologyCapabilities.useContext.value as Quantity) | (TerminologyCapabilities.useContext.value as Range) | (ValueSet.useContext.value as Quantity) | (ValueSet.useContext.value as Range)`
 */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and quantity- or range-based value assigned to the capability
 * statement
* [CodeSystem](codesystem.html): A use context type and quantity- or
 * range-based value assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context type and
 * quantity- or range-based value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based
 * value assigned to the concept map
* [GraphDefinition](graphdefinition.html): A
 * use context type and quantity- or range-based value assigned to the graph
 * definition
* [ImplementationGuide](implementationguide.html): A use context
 * type and quantity- or range-based value assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and quantity- or
 * range-based value assigned to the message definition
*
 * [NamingSystem](namingsystem.html): A use context type and quantity- or
 * range-based value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and
 * quantity- or range-based value assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A use context type and quantity- or
 * range-based value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and
 * quantity- or range-based value assigned to the structure definition
*
 * [StructureMap](structuremap.html): A use context type and quantity- or
 * range-based value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * quantity- or range-based value assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A use context type and quantity- or range-based value
 * assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and value assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A use context type and value assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A use context
 * type and value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and value assigned to the
 * concept map
* [GraphDefinition](graphdefinition.html): A use context type and
 * value assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context type and value
 * assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and value
 * assigned to the message definition
* [NamingSystem](namingsystem.html): A use
 * context type and value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and value
 * assigned to the operation definition
* [SearchParameter](searchparameter.html):
 * A use context type and value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and value
 * assigned to the structure definition
* [StructureMap](structuremap.html): A use
 * context type and value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * value assigned to the terminology capabilities
* [ValueSet](valueset.html): A
 * use context type and value assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * type of use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A type of use context assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A type of use
 * context assigned to the compartment definition
* [ConceptMap](conceptmap.html):
 * A type of use context assigned to the concept map
*
 * [GraphDefinition](graphdefinition.html): A type of use context assigned to the
 * graph definition
* [ImplementationGuide](implementationguide.html): A type of
 * use context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A type of use context assigned to
 * the message definition
* [NamingSystem](namingsystem.html): A type of use
 * context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A type of use context assigned
 * to the operation definition
* [SearchParameter](searchparameter.html): A type
 * of use context assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A type of use context assigned
 * to the structure definition
* [StructureMap](structuremap.html): A type of use
 * context assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A type of use context
 * assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of
 * use context assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.useContext.code | CodeSystem.useContext.code | CompartmentDefinition.useContext.code | ConceptMap.useContext.code | GraphDefinition.useContext.code | ImplementationGuide.useContext.code | MessageDefinition.useContext.code | NamingSystem.useContext.code | OperationDefinition.useContext.code | SearchParameter.useContext.code | StructureDefinition.useContext.code | StructureMap.useContext.code | TerminologyCapabilities.useContext.code | ValueSet.useContext.code`
 */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context assigned to the capability statement
* [CodeSystem](codesystem.html): A
 * use context assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to
 * the compartment definition
* [ConceptMap](conceptmap.html): A use context
 * assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use
 * context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context assigned to the
 * implementation guide
* [MessageDefinition](messagedefinition.html): A use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context assigned to the
 * operation definition
* [SearchParameter](searchparameter.html): A use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context assigned to the
 * structure definition
* [StructureMap](structuremap.html): A use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned
 * to the terminology capabilities
* [ValueSet](valueset.html): A use context
 * assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `(CapabilityStatement.useContext.value as CodeableConcept) | (CodeSystem.useContext.value as CodeableConcept) | (CompartmentDefinition.useContext.value as CodeableConcept) | (ConceptMap.useContext.value as CodeableConcept) | (GraphDefinition.useContext.value as CodeableConcept) | (ImplementationGuide.useContext.value as CodeableConcept) | (MessageDefinition.useContext.value as CodeableConcept) | (NamingSystem.useContext.value as CodeableConcept) | (OperationDefinition.useContext.value as CodeableConcept) | (SearchParameter.useContext.value as CodeableConcept) | (StructureDefinition.useContext.value as CodeableConcept) | (StructureMap.useContext.value as CodeableConcept) | (TerminologyCapabilities.useContext.value as CodeableConcept) | (ValueSet.useContext.value as CodeableConcept)`
 */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * capability statement publication date
* [CodeSystem](codesystem.html): The code
 * system publication date
* [CompartmentDefinition](compartmentdefinition.html):
 * The compartment definition publication date
* [ConceptMap](conceptmap.html):
 * The concept map publication date
* [GraphDefinition](graphdefinition.html): The
 * graph definition publication date
*
 * [ImplementationGuide](implementationguide.html): The implementation guide
 * publication date
* [MessageDefinition](messagedefinition.html): The message
 * definition publication date
* [NamingSystem](namingsystem.html): The naming
 * system publication date
* [OperationDefinition](operationdefinition.html): The
 * operation definition publication date
*
 * [SearchParameter](searchparameter.html): The search parameter publication
 * date
* [StructureDefinition](structuredefinition.html): The structure
 * definition publication date
* [StructureMap](structuremap.html): The structure
 * map publication date
* [TerminologyCapabilities](terminologycapabilities.html):
 * The terminology capabilities publication date
* [ValueSet](valueset.html): The
 * value set publication date
 * @fhirSearchType `date`
 * @fhirPath `CapabilityStatement.date | CodeSystem.date | CompartmentDefinition.date | ConceptMap.date | GraphDefinition.date | ImplementationGuide.date | MessageDefinition.date | NamingSystem.date | OperationDefinition.date | SearchParameter.date | StructureDefinition.date | StructureMap.date | TerminologyCapabilities.date | ValueSet.date`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * description of the capability statement
* [CodeSystem](codesystem.html): The
 * description of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The description of the
 * compartment definition
* [ConceptMap](conceptmap.html): The description of the
 * concept map
* [GraphDefinition](graphdefinition.html): The description of the
 * graph definition
* [ImplementationGuide](implementationguide.html): The
 * description of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The description of the message
 * definition
* [NamingSystem](namingsystem.html): The description of the naming
 * system
* [OperationDefinition](operationdefinition.html): The description of
 * the operation definition
* [SearchParameter](searchparameter.html): The
 * description of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The description of the
 * structure definition
* [StructureMap](structuremap.html): The description of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The description of the terminology capabilities
* [ValueSet](valueset.html):
 * The description of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.description | CodeSystem.description | CompartmentDefinition.description | ConceptMap.description | GraphDefinition.description | ImplementationGuide.description | MessageDefinition.description | NamingSystem.description | OperationDefinition.description | SearchParameter.description | StructureDefinition.description | StructureMap.description | TerminologyCapabilities.description | ValueSet.description`
 */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Intended jurisdiction for the capability statement
*
 * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
*
 * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
*
 * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph
 * definition
* [ImplementationGuide](implementationguide.html): Intended
 * jurisdiction for the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the
 * message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction
 * for the naming system
* [OperationDefinition](operationdefinition.html):
 * Intended jurisdiction for the operation definition
*
 * [SearchParameter](searchparameter.html): Intended jurisdiction for the search
 * parameter
* [StructureDefinition](structuredefinition.html): Intended
 * jurisdiction for the structure definition
* [StructureMap](structuremap.html):
 * Intended jurisdiction for the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction
 * for the terminology capabilities
* [ValueSet](valueset.html): Intended
 * jurisdiction for the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.jurisdiction | CodeSystem.jurisdiction | ConceptMap.jurisdiction | GraphDefinition.jurisdiction | ImplementationGuide.jurisdiction | MessageDefinition.jurisdiction | NamingSystem.jurisdiction | OperationDefinition.jurisdiction | SearchParameter.jurisdiction | StructureDefinition.jurisdiction | StructureMap.jurisdiction | TerminologyCapabilities.jurisdiction | ValueSet.jurisdiction`
 */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Computationally friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): Computationally friendly name of the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): Computationally
 * friendly name of the compartment definition
* [ConceptMap](conceptmap.html):
 * Computationally friendly name of the concept map
*
 * [GraphDefinition](graphdefinition.html): Computationally friendly name of the
 * graph definition
* [ImplementationGuide](implementationguide.html):
 * Computationally friendly name of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Computationally friendly name of
 * the message definition
* [NamingSystem](namingsystem.html): Computationally
 * friendly name of the naming system
*
 * [OperationDefinition](operationdefinition.html): Computationally friendly name
 * of the operation definition
* [SearchParameter](searchparameter.html):
 * Computationally friendly name of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Computationally friendly name
 * of the structure definition
* [StructureMap](structuremap.html):
 * Computationally friendly name of the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Computationally
 * friendly name of the terminology capabilities
* [ValueSet](valueset.html):
 * Computationally friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.name | CodeSystem.name | CompartmentDefinition.name | ConceptMap.name | GraphDefinition.name | ImplementationGuide.name | MessageDefinition.name | NamingSystem.name | OperationDefinition.name | SearchParameter.name | StructureDefinition.name | StructureMap.name | TerminologyCapabilities.name | ValueSet.name`
 */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name
 * of the publisher of the capability statement
* [CodeSystem](codesystem.html):
 * Name of the publisher of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of
 * the compartment definition
* [ConceptMap](conceptmap.html): Name of the
 * publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of
 * the publisher of the graph definition
*
 * [ImplementationGuide](implementationguide.html): Name of the publisher of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): Name of the
 * publisher of the message definition
* [NamingSystem](namingsystem.html): Name
 * of the publisher of the naming system
*
 * [OperationDefinition](operationdefinition.html): Name of the publisher of the
 * operation definition
* [SearchParameter](searchparameter.html): Name of the
 * publisher of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Name of the publisher of the
 * structure definition
* [StructureMap](structuremap.html): Name of the publisher
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * Name of the publisher of the terminology capabilities
*
 * [ValueSet](valueset.html): Name of the publisher of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.publisher | CodeSystem.publisher | CompartmentDefinition.publisher | ConceptMap.publisher | GraphDefinition.publisher | ImplementationGuide.publisher | MessageDefinition.publisher | NamingSystem.publisher | OperationDefinition.publisher | SearchParameter.publisher | StructureDefinition.publisher | StructureMap.publisher | TerminologyCapabilities.publisher | ValueSet.publisher`
 */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * current status of the capability statement
* [CodeSystem](codesystem.html): The
 * current status of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The current status of the
 * compartment definition
* [ConceptMap](conceptmap.html): The current status of
 * the concept map
* [GraphDefinition](graphdefinition.html): The current status
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * current status of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The current status of the message
 * definition
* [NamingSystem](namingsystem.html): The current status of the
 * naming system
* [OperationDefinition](operationdefinition.html): The current
 * status of the operation definition
* [SearchParameter](searchparameter.html):
 * The current status of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The current status of the
 * structure definition
* [StructureMap](structuremap.html): The current status of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The current status of the terminology capabilities
* [ValueSet](valueset.html):
 * The current status of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.status | CodeSystem.status | CompartmentDefinition.status | ConceptMap.status | GraphDefinition.status | ImplementationGuide.status | MessageDefinition.status | NamingSystem.status | OperationDefinition.status | SearchParameter.status | StructureDefinition.status | StructureMap.status | TerminologyCapabilities.status | ValueSet.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | NamingSystemSortOrder
      | NamingSystemSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type NutritionOrderSortOrder =
  | DomainResourceSortOrder
  | "additive"
  | "-additive"
  | "datetime"
  | "-datetime"
  | "formula"
  | "-formula"
  | "instantiates-canonical"
  | "-instantiates-canonical"
  | "instantiates-uri"
  | "-instantiates-uri"
  | "oraldiet"
  | "-oraldiet"
  | "provider"
  | "-provider"
  | "status"
  | "-status"
  | "supplement"
  | "-supplement"
  | "encounter"
  | "-encounter"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class NutritionOrderFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "NutritionOrder";

  /**
   * Type of module component to add to the feeding
   * @fhirSearchType `token`
   * @fhirPath `NutritionOrder.enteralFormula.additiveType`
   */
  additive(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("additive", ...args);
  }
  /**
   * Return nutrition orders requested on this date
   * @fhirSearchType `date`
   * @fhirPath `NutritionOrder.dateTime`
   */
  datetime(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("datetime", ...args);
  }
  /**
   * Type of enteral or infant formula
   * @fhirSearchType `token`
   * @fhirPath `NutritionOrder.enteralFormula.baseFormulaType`
   */
  formula(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("formula", ...args);
  }
  /**
   * Instantiates FHIR protocol or definition
   * @fhirSearchType `reference`
   * @fhirPath `NutritionOrder.instantiatesCanonical`
   */
  instantiatesCanonical(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("instantiates-canonical", ...args);
  }
  /**
   * Instantiates external protocol or definition
   * @fhirSearchType `uri`
   * @fhirPath `NutritionOrder.instantiatesUri`
   */
  instantiatesUri(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("instantiates-uri", ...args);
  }
  /**
   * Type of diet that can be consumed orally (i.e., take via the mouth).
   * @fhirSearchType `token`
   * @fhirPath `NutritionOrder.oralDiet.type`
   */
  oraldiet(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("oraldiet", ...args);
  }
  /**
   * The identity of the provider who placed the nutrition order
   * @fhirSearchType `reference`
   * @fhirPath `NutritionOrder.orderer`
   */
  provider(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("provider", ...args);
  }
  /**
   * Status of the nutrition order.
   * @fhirSearchType `token`
   * @fhirPath `NutritionOrder.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Type of supplement product requested
   * @fhirSearchType `token`
   * @fhirPath `NutritionOrder.supplement.type`
   */
  supplement(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("supplement", ...args);
  }
  /**
 * Multiple Resources: 

* [Composition](composition.html): Context of the
 * Composition
* [DeviceRequest](devicerequest.html): Encounter during which
 * request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter
 * when the order was made
* [DocumentReference](documentreference.html): Context
 * of the document  content
* [Flag](flag.html): Alert relevant during
 * encounter
* [List](list.html): Context in which list created
*
 * [NutritionOrder](nutritionorder.html): Return nutrition orders with this
 * encounter identifier
* [Observation](observation.html): Encounter related to
 * the observation
* [Procedure](procedure.html): Encounter created as part of
*
 * [RiskAssessment](riskassessment.html): Where was assessment performed?
*
 * [ServiceRequest](servicerequest.html): An encounter in which this request is
 * made
* [VisionPrescription](visionprescription.html): Return prescriptions with
 * this encounter identifier
 * @fhirSearchType `reference`
 * @fhirPath `Composition.encounter | DeviceRequest.encounter | DiagnosticReport.encounter | DocumentReference.context.encounter.where(resolve() is Encounter) | Flag.encounter | List.encounter | NutritionOrder.encounter | Observation.encounter | Procedure.encounter | RiskAssessment.encounter | ServiceRequest.encounter | VisionPrescription.encounter`
 */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | NutritionOrderSortOrder
      | NutritionOrderSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type NutritionProductSortOrder =
  | DomainResourceSortOrder
  | "identifier"
  | "-identifier"
  | "status"
  | "-status";

export class NutritionProductFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "NutritionProduct";

  /**
   * The identifier for the physical instance, typically a serial number
   * @fhirSearchType `token`
   * @fhirPath `NutritionProduct.instance.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * active | inactive | entered-in-error
   * @fhirSearchType `token`
   * @fhirPath `NutritionProduct.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | NutritionProductSortOrder
      | NutritionProductSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ObservationSortOrder =
  | DomainResourceSortOrder
  | "based-on"
  | "-based-on"
  | "category"
  | "-category"
  | "code-value-concept"
  | "-code-value-concept"
  | "code-value-date"
  | "-code-value-date"
  | "code-value-quantity"
  | "-code-value-quantity"
  | "code-value-string"
  | "-code-value-string"
  | "combo-code-value-concept"
  | "-combo-code-value-concept"
  | "combo-code-value-quantity"
  | "-combo-code-value-quantity"
  | "combo-code"
  | "-combo-code"
  | "combo-data-absent-reason"
  | "-combo-data-absent-reason"
  | "combo-value-concept"
  | "-combo-value-concept"
  | "combo-value-quantity"
  | "-combo-value-quantity"
  | "component-code-value-concept"
  | "-component-code-value-concept"
  | "component-code-value-quantity"
  | "-component-code-value-quantity"
  | "component-code"
  | "-component-code"
  | "component-data-absent-reason"
  | "-component-data-absent-reason"
  | "component-value-concept"
  | "-component-value-concept"
  | "component-value-quantity"
  | "-component-value-quantity"
  | "data-absent-reason"
  | "-data-absent-reason"
  | "derived-from"
  | "-derived-from"
  | "device"
  | "-device"
  | "focus"
  | "-focus"
  | "has-member"
  | "-has-member"
  | "method"
  | "-method"
  | "part-of"
  | "-part-of"
  | "performer"
  | "-performer"
  | "specimen"
  | "-specimen"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "value-concept"
  | "-value-concept"
  | "value-date"
  | "-value-date"
  | "value-quantity"
  | "-value-quantity"
  | "value-string"
  | "-value-string"
  | "code"
  | "-code"
  | "date"
  | "-date"
  | "encounter"
  | "-encounter"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class ObservationFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Observation";

  /**
   * Reference to the service request.
   * @fhirSearchType `reference`
   * @fhirPath `Observation.basedOn`
   */
  basedOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("based-on", ...args);
  }
  /**
   * The classification of the type of observation
   * @fhirSearchType `token`
   * @fhirPath `Observation.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * Code and coded value parameter pair
   * @fhirSearchType `composite`
   * @fhirPath `Observation`
   */
  codeValueConcept(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("code-value-concept", ...args);
  }
  /**
   * Code and date/time value parameter pair
   * @fhirSearchType `composite`
   * @fhirPath `Observation`
   */
  codeValueDate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("code-value-date", ...args);
  }
  /**
   * Code and quantity value parameter pair
   * @fhirSearchType `composite`
   * @fhirPath `Observation`
   */
  codeValueQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("code-value-quantity", ...args);
  }
  /**
   * Code and string value parameter pair
   * @fhirSearchType `composite`
   * @fhirPath `Observation`
   */
  codeValueString(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("code-value-string", ...args);
  }
  /**
   * Code and coded value parameter pair, including in components
   * @fhirSearchType `composite`
   * @fhirPath `Observation | Observation.component`
   */
  comboCodeValueConcept(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("combo-code-value-concept", ...args);
  }
  /**
   * Code and quantity value parameter pair, including in components
   * @fhirSearchType `composite`
   * @fhirPath `Observation | Observation.component`
   */
  comboCodeValueQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("combo-code-value-quantity", ...args);
  }
  /**
   * The code of the observation type or component type
   * @fhirSearchType `token`
   * @fhirPath `Observation.code | Observation.component.code`
   */
  comboCode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("combo-code", ...args);
  }
  /**
   * The reason why the expected value in the element Observation.value[x] or
   * Observation.component.value[x] is missing.
   * @fhirSearchType `token`
   * @fhirPath `Observation.dataAbsentReason | Observation.component.dataAbsentReason`
   */
  comboDataAbsentReason(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("combo-data-absent-reason", ...args);
  }
  /**
   * The value or component value of the observation, if the value is a
   * CodeableConcept
   * @fhirSearchType `token`
   * @fhirPath `(Observation.value as CodeableConcept) | (Observation.component.value as CodeableConcept)`
   */
  comboValueConcept(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("combo-value-concept", ...args);
  }
  /**
   * The value or component value of the observation, if the value is a Quantity, or
   * a SampledData (just search on the bounds of the values in sampled data)
   * @fhirSearchType `quantity`
   * @fhirPath `(Observation.value as Quantity) | (Observation.value as SampledData) | (Observation.component.value as Quantity) | (Observation.component.value as SampledData)`
   */
  comboValueQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("combo-value-quantity", ...args);
  }
  /**
   * Component code and component coded value parameter pair
   * @fhirSearchType `composite`
   * @fhirPath `Observation.component`
   */
  componentCodeValueConcept(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("component-code-value-concept", ...args);
  }
  /**
   * Component code and component quantity value parameter pair
   * @fhirSearchType `composite`
   * @fhirPath `Observation.component`
   */
  componentCodeValueQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("component-code-value-quantity", ...args);
  }
  /**
   * The component code of the observation type
   * @fhirSearchType `token`
   * @fhirPath `Observation.component.code`
   */
  componentCode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("component-code", ...args);
  }
  /**
   * The reason why the expected value in the element Observation.component.value[x]
   * is missing.
   * @fhirSearchType `token`
   * @fhirPath `Observation.component.dataAbsentReason`
   */
  componentDataAbsentReason(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("component-data-absent-reason", ...args);
  }
  /**
   * The value of the component observation, if the value is a CodeableConcept
   * @fhirSearchType `token`
   * @fhirPath `(Observation.component.value as CodeableConcept)`
   */
  componentValueConcept(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("component-value-concept", ...args);
  }
  /**
   * The value of the component observation, if the value is a Quantity, or a
   * SampledData (just search on the bounds of the values in sampled data)
   * @fhirSearchType `quantity`
   * @fhirPath `(Observation.component.value as Quantity) | (Observation.component.value as SampledData)`
   */
  componentValueQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("component-value-quantity", ...args);
  }
  /**
   * The reason why the expected value in the element Observation.value[x] is
   * missing.
   * @fhirSearchType `token`
   * @fhirPath `Observation.dataAbsentReason`
   */
  dataAbsentReason(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("data-absent-reason", ...args);
  }
  /**
   * Related measurements the observation is made from
   * @fhirSearchType `reference`
   * @fhirPath `Observation.derivedFrom`
   */
  derivedFrom(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("derived-from", ...args);
  }
  /**
   * The Device that generated the observation data.
   * @fhirSearchType `reference`
   * @fhirPath `Observation.device`
   */
  device(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("device", ...args);
  }
  /**
   * The focus of an observation when the focus is not the patient of record.
   * @fhirSearchType `reference`
   * @fhirPath `Observation.focus`
   */
  focus(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("focus", ...args);
  }
  /**
   * Related resource that belongs to the Observation group
   * @fhirSearchType `reference`
   * @fhirPath `Observation.hasMember`
   */
  hasMember(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("has-member", ...args);
  }
  /**
   * The method used for the observation
   * @fhirSearchType `token`
   * @fhirPath `Observation.method`
   */
  method(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("method", ...args);
  }
  /**
   * Part of referenced event
   * @fhirSearchType `reference`
   * @fhirPath `Observation.partOf`
   */
  partOf(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("part-of", ...args);
  }
  /**
   * Who performed the observation
   * @fhirSearchType `reference`
   * @fhirPath `Observation.performer`
   */
  performer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("performer", ...args);
  }
  /**
   * Specimen used for this observation
   * @fhirSearchType `reference`
   * @fhirPath `Observation.specimen`
   */
  specimen(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("specimen", ...args);
  }
  /**
   * The status of the observation
   * @fhirSearchType `token`
   * @fhirPath `Observation.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The subject that the observation is about
   * @fhirSearchType `reference`
   * @fhirPath `Observation.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
   * The value of the observation, if the value is a CodeableConcept
   * @fhirSearchType `token`
   * @fhirPath `(Observation.value as CodeableConcept)`
   */
  valueConcept(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("value-concept", ...args);
  }
  /**
   * The value of the observation, if the value is a date or period of time
   * @fhirSearchType `date`
   * @fhirPath `(Observation.value as dateTime) | (Observation.value as Period)`
   */
  valueDate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("value-date", ...args);
  }
  /**
   * The value of the observation, if the value is a Quantity, or a SampledData (just
   * search on the bounds of the values in sampled data)
   * @fhirSearchType `quantity`
   * @fhirPath `(Observation.value as Quantity) | (Observation.value as SampledData)`
   */
  valueQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("value-quantity", ...args);
  }
  /**
   * The value of the observation, if the value is a string, and also searches in
   * CodeableConcept.text
   * @fhirSearchType `string`
   * @fhirPath `(Observation.value as string) | (Observation.value as CodeableConcept).text`
   */
  valueString(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("value-string", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code
 * that identifies the allergy or intolerance
* [Condition](condition.html): Code
 * for the condition
* [DeviceRequest](devicerequest.html): Code for what is being
 * requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the
 * report, as opposed to codes for the atomic results, which are the names on the
 * observation resource referred to from the result
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
*
 * [List](list.html): What the purpose of this list is
*
 * [Medication](medication.html): Returns medications for a specific code
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication code
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine code
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions of this medication code
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication code
* [Observation](observation.html): The code of the observation
 * type
* [Procedure](procedure.html): A code to identify a  procedure
*
 * [ServiceRequest](servicerequest.html): What is being requested/ordered
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.code | AllergyIntolerance.reaction.substance | Condition.code | (DeviceRequest.code as CodeableConcept) | DiagnosticReport.code | FamilyMemberHistory.condition.code | List.code | Medication.code | (MedicationAdministration.medication as CodeableConcept) | (MedicationDispense.medication as CodeableConcept) | (MedicationRequest.medication as CodeableConcept) | (MedicationStatement.medication as CodeableConcept) | Observation.code | Procedure.code | ServiceRequest.code`
 */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date
 * first version of the resource instance was recorded
*
 * [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html):
 * Time period team covers
* [ClinicalImpression](clinicalimpression.html): When
 * the assessment was documented
* [Composition](composition.html): Composition
 * editing time
* [Consent](consent.html): When this Consent was created or
 * indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant
 * time of the report
* [Encounter](encounter.html): A date within the period the
 * Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date
 * search value falls within the episode of care's period
*
 * [FamilyMemberHistory](familymemberhistory.html): When history was recorded or
 * last updated
* [Flag](flag.html): Time period when flag is active
*
 * [Immunization](immunization.html): Vaccination  (non)-Administration Date
*
 * [List](list.html): When the list was prepared
*
 * [Observation](observation.html): Obtained date/time. If the obtained element is
 * a period, a date that falls in the period
* [Procedure](procedure.html): When
 * the procedure was performed
* [RiskAssessment](riskassessment.html): When was
 * assessment made?
* [SupplyRequest](supplyrequest.html): When the request was
 * made
 * @fhirSearchType `date`
 * @fhirPath `AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [Composition](composition.html): Context of the
 * Composition
* [DeviceRequest](devicerequest.html): Encounter during which
 * request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter
 * when the order was made
* [DocumentReference](documentreference.html): Context
 * of the document  content
* [Flag](flag.html): Alert relevant during
 * encounter
* [List](list.html): Context in which list created
*
 * [NutritionOrder](nutritionorder.html): Return nutrition orders with this
 * encounter identifier
* [Observation](observation.html): Encounter related to
 * the observation
* [Procedure](procedure.html): Encounter created as part of
*
 * [RiskAssessment](riskassessment.html): Where was assessment performed?
*
 * [ServiceRequest](servicerequest.html): An encounter in which this request is
 * made
* [VisionPrescription](visionprescription.html): Return prescriptions with
 * this encounter identifier
 * @fhirSearchType `reference`
 * @fhirPath `Composition.encounter | DeviceRequest.encounter | DiagnosticReport.encounter | DocumentReference.context.encounter.where(resolve() is Encounter) | Flag.encounter | List.encounter | NutritionOrder.encounter | Observation.encounter | Procedure.encounter | RiskAssessment.encounter | ServiceRequest.encounter | VisionPrescription.encounter`
 */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ObservationSortOrder
      | ObservationSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ObservationDefinitionSortOrder = DomainResourceSortOrder;

export class ObservationDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ObservationDefinition";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ObservationDefinitionSortOrder
      | ObservationDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type OperationDefinitionSortOrder =
  | DomainResourceSortOrder
  | "base"
  | "-base"
  | "code"
  | "-code"
  | "input-profile"
  | "-input-profile"
  | "instance"
  | "-instance"
  | "kind"
  | "-kind"
  | "output-profile"
  | "-output-profile"
  | "system"
  | "-system"
  | "type"
  | "-type"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class OperationDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "OperationDefinition";

  /**
   * Marks this as a profile of the base
   * @fhirSearchType `reference`
   * @fhirPath `OperationDefinition.base`
   */
  base(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("base", ...args);
  }
  /**
   * Name used to invoke the operation
   * @fhirSearchType `token`
   * @fhirPath `OperationDefinition.code`
   */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
   * Validation information for in parameters
   * @fhirSearchType `reference`
   * @fhirPath `OperationDefinition.inputProfile`
   */
  inputProfile(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("input-profile", ...args);
  }
  /**
   * Invoke on an instance?
   * @fhirSearchType `token`
   * @fhirPath `OperationDefinition.instance`
   */
  instance(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("instance", ...args);
  }
  /**
   * operation | query
   * @fhirSearchType `token`
   * @fhirPath `OperationDefinition.kind`
   */
  kind(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("kind", ...args);
  }
  /**
   * Validation information for out parameters
   * @fhirSearchType `reference`
   * @fhirPath `OperationDefinition.outputProfile`
   */
  outputProfile(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("output-profile", ...args);
  }
  /**
   * Invoke at the system level?
   * @fhirSearchType `token`
   * @fhirPath `OperationDefinition.system`
   */
  system(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("system", ...args);
  }
  /**
   * Invoke at the type level?
   * @fhirSearchType `token`
   * @fhirPath `OperationDefinition.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * quantity- or range-valued use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned
 * to the code system
* [CompartmentDefinition](compartmentdefinition.html): A
 * quantity- or range-valued use context assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned
 * to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or
 * range-valued use context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use
 * context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A quantity- or range-valued use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use
 * context assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A quantity- or range-valued use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use
 * context assigned to the structure definition
*
 * [StructureMap](structuremap.html): A quantity- or range-valued use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or
 * range-valued use context assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to
 * the value set
 * @fhirSearchType `quantity`
 * @fhirPath `(CapabilityStatement.useContext.value as Quantity) | (CapabilityStatement.useContext.value as Range) | (CodeSystem.useContext.value as Quantity) | (CodeSystem.useContext.value as Range) | (CompartmentDefinition.useContext.value as Quantity) | (CompartmentDefinition.useContext.value as Range) | (ConceptMap.useContext.value as Quantity) | (ConceptMap.useContext.value as Range) | (GraphDefinition.useContext.value as Quantity) | (GraphDefinition.useContext.value as Range) | (ImplementationGuide.useContext.value as Quantity) | (ImplementationGuide.useContext.value as Range) | (MessageDefinition.useContext.value as Quantity) | (MessageDefinition.useContext.value as Range) | (NamingSystem.useContext.value as Quantity) | (NamingSystem.useContext.value as Range) | (OperationDefinition.useContext.value as Quantity) | (OperationDefinition.useContext.value as Range) | (SearchParameter.useContext.value as Quantity) | (SearchParameter.useContext.value as Range) | (StructureDefinition.useContext.value as Quantity) | (StructureDefinition.useContext.value as Range) | (StructureMap.useContext.value as Quantity) | (StructureMap.useContext.value as Range) | (TerminologyCapabilities.useContext.value as Quantity) | (TerminologyCapabilities.useContext.value as Range) | (ValueSet.useContext.value as Quantity) | (ValueSet.useContext.value as Range)`
 */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and quantity- or range-based value assigned to the capability
 * statement
* [CodeSystem](codesystem.html): A use context type and quantity- or
 * range-based value assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context type and
 * quantity- or range-based value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based
 * value assigned to the concept map
* [GraphDefinition](graphdefinition.html): A
 * use context type and quantity- or range-based value assigned to the graph
 * definition
* [ImplementationGuide](implementationguide.html): A use context
 * type and quantity- or range-based value assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and quantity- or
 * range-based value assigned to the message definition
*
 * [NamingSystem](namingsystem.html): A use context type and quantity- or
 * range-based value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and
 * quantity- or range-based value assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A use context type and quantity- or
 * range-based value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and
 * quantity- or range-based value assigned to the structure definition
*
 * [StructureMap](structuremap.html): A use context type and quantity- or
 * range-based value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * quantity- or range-based value assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A use context type and quantity- or range-based value
 * assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and value assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A use context type and value assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A use context
 * type and value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and value assigned to the
 * concept map
* [GraphDefinition](graphdefinition.html): A use context type and
 * value assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context type and value
 * assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and value
 * assigned to the message definition
* [NamingSystem](namingsystem.html): A use
 * context type and value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and value
 * assigned to the operation definition
* [SearchParameter](searchparameter.html):
 * A use context type and value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and value
 * assigned to the structure definition
* [StructureMap](structuremap.html): A use
 * context type and value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * value assigned to the terminology capabilities
* [ValueSet](valueset.html): A
 * use context type and value assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * type of use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A type of use context assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A type of use
 * context assigned to the compartment definition
* [ConceptMap](conceptmap.html):
 * A type of use context assigned to the concept map
*
 * [GraphDefinition](graphdefinition.html): A type of use context assigned to the
 * graph definition
* [ImplementationGuide](implementationguide.html): A type of
 * use context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A type of use context assigned to
 * the message definition
* [NamingSystem](namingsystem.html): A type of use
 * context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A type of use context assigned
 * to the operation definition
* [SearchParameter](searchparameter.html): A type
 * of use context assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A type of use context assigned
 * to the structure definition
* [StructureMap](structuremap.html): A type of use
 * context assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A type of use context
 * assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of
 * use context assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.useContext.code | CodeSystem.useContext.code | CompartmentDefinition.useContext.code | ConceptMap.useContext.code | GraphDefinition.useContext.code | ImplementationGuide.useContext.code | MessageDefinition.useContext.code | NamingSystem.useContext.code | OperationDefinition.useContext.code | SearchParameter.useContext.code | StructureDefinition.useContext.code | StructureMap.useContext.code | TerminologyCapabilities.useContext.code | ValueSet.useContext.code`
 */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context assigned to the capability statement
* [CodeSystem](codesystem.html): A
 * use context assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to
 * the compartment definition
* [ConceptMap](conceptmap.html): A use context
 * assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use
 * context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context assigned to the
 * implementation guide
* [MessageDefinition](messagedefinition.html): A use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context assigned to the
 * operation definition
* [SearchParameter](searchparameter.html): A use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context assigned to the
 * structure definition
* [StructureMap](structuremap.html): A use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned
 * to the terminology capabilities
* [ValueSet](valueset.html): A use context
 * assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `(CapabilityStatement.useContext.value as CodeableConcept) | (CodeSystem.useContext.value as CodeableConcept) | (CompartmentDefinition.useContext.value as CodeableConcept) | (ConceptMap.useContext.value as CodeableConcept) | (GraphDefinition.useContext.value as CodeableConcept) | (ImplementationGuide.useContext.value as CodeableConcept) | (MessageDefinition.useContext.value as CodeableConcept) | (NamingSystem.useContext.value as CodeableConcept) | (OperationDefinition.useContext.value as CodeableConcept) | (SearchParameter.useContext.value as CodeableConcept) | (StructureDefinition.useContext.value as CodeableConcept) | (StructureMap.useContext.value as CodeableConcept) | (TerminologyCapabilities.useContext.value as CodeableConcept) | (ValueSet.useContext.value as CodeableConcept)`
 */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * capability statement publication date
* [CodeSystem](codesystem.html): The code
 * system publication date
* [CompartmentDefinition](compartmentdefinition.html):
 * The compartment definition publication date
* [ConceptMap](conceptmap.html):
 * The concept map publication date
* [GraphDefinition](graphdefinition.html): The
 * graph definition publication date
*
 * [ImplementationGuide](implementationguide.html): The implementation guide
 * publication date
* [MessageDefinition](messagedefinition.html): The message
 * definition publication date
* [NamingSystem](namingsystem.html): The naming
 * system publication date
* [OperationDefinition](operationdefinition.html): The
 * operation definition publication date
*
 * [SearchParameter](searchparameter.html): The search parameter publication
 * date
* [StructureDefinition](structuredefinition.html): The structure
 * definition publication date
* [StructureMap](structuremap.html): The structure
 * map publication date
* [TerminologyCapabilities](terminologycapabilities.html):
 * The terminology capabilities publication date
* [ValueSet](valueset.html): The
 * value set publication date
 * @fhirSearchType `date`
 * @fhirPath `CapabilityStatement.date | CodeSystem.date | CompartmentDefinition.date | ConceptMap.date | GraphDefinition.date | ImplementationGuide.date | MessageDefinition.date | NamingSystem.date | OperationDefinition.date | SearchParameter.date | StructureDefinition.date | StructureMap.date | TerminologyCapabilities.date | ValueSet.date`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * description of the capability statement
* [CodeSystem](codesystem.html): The
 * description of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The description of the
 * compartment definition
* [ConceptMap](conceptmap.html): The description of the
 * concept map
* [GraphDefinition](graphdefinition.html): The description of the
 * graph definition
* [ImplementationGuide](implementationguide.html): The
 * description of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The description of the message
 * definition
* [NamingSystem](namingsystem.html): The description of the naming
 * system
* [OperationDefinition](operationdefinition.html): The description of
 * the operation definition
* [SearchParameter](searchparameter.html): The
 * description of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The description of the
 * structure definition
* [StructureMap](structuremap.html): The description of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The description of the terminology capabilities
* [ValueSet](valueset.html):
 * The description of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.description | CodeSystem.description | CompartmentDefinition.description | ConceptMap.description | GraphDefinition.description | ImplementationGuide.description | MessageDefinition.description | NamingSystem.description | OperationDefinition.description | SearchParameter.description | StructureDefinition.description | StructureMap.description | TerminologyCapabilities.description | ValueSet.description`
 */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Intended jurisdiction for the capability statement
*
 * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
*
 * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
*
 * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph
 * definition
* [ImplementationGuide](implementationguide.html): Intended
 * jurisdiction for the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the
 * message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction
 * for the naming system
* [OperationDefinition](operationdefinition.html):
 * Intended jurisdiction for the operation definition
*
 * [SearchParameter](searchparameter.html): Intended jurisdiction for the search
 * parameter
* [StructureDefinition](structuredefinition.html): Intended
 * jurisdiction for the structure definition
* [StructureMap](structuremap.html):
 * Intended jurisdiction for the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction
 * for the terminology capabilities
* [ValueSet](valueset.html): Intended
 * jurisdiction for the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.jurisdiction | CodeSystem.jurisdiction | ConceptMap.jurisdiction | GraphDefinition.jurisdiction | ImplementationGuide.jurisdiction | MessageDefinition.jurisdiction | NamingSystem.jurisdiction | OperationDefinition.jurisdiction | SearchParameter.jurisdiction | StructureDefinition.jurisdiction | StructureMap.jurisdiction | TerminologyCapabilities.jurisdiction | ValueSet.jurisdiction`
 */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Computationally friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): Computationally friendly name of the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): Computationally
 * friendly name of the compartment definition
* [ConceptMap](conceptmap.html):
 * Computationally friendly name of the concept map
*
 * [GraphDefinition](graphdefinition.html): Computationally friendly name of the
 * graph definition
* [ImplementationGuide](implementationguide.html):
 * Computationally friendly name of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Computationally friendly name of
 * the message definition
* [NamingSystem](namingsystem.html): Computationally
 * friendly name of the naming system
*
 * [OperationDefinition](operationdefinition.html): Computationally friendly name
 * of the operation definition
* [SearchParameter](searchparameter.html):
 * Computationally friendly name of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Computationally friendly name
 * of the structure definition
* [StructureMap](structuremap.html):
 * Computationally friendly name of the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Computationally
 * friendly name of the terminology capabilities
* [ValueSet](valueset.html):
 * Computationally friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.name | CodeSystem.name | CompartmentDefinition.name | ConceptMap.name | GraphDefinition.name | ImplementationGuide.name | MessageDefinition.name | NamingSystem.name | OperationDefinition.name | SearchParameter.name | StructureDefinition.name | StructureMap.name | TerminologyCapabilities.name | ValueSet.name`
 */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name
 * of the publisher of the capability statement
* [CodeSystem](codesystem.html):
 * Name of the publisher of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of
 * the compartment definition
* [ConceptMap](conceptmap.html): Name of the
 * publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of
 * the publisher of the graph definition
*
 * [ImplementationGuide](implementationguide.html): Name of the publisher of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): Name of the
 * publisher of the message definition
* [NamingSystem](namingsystem.html): Name
 * of the publisher of the naming system
*
 * [OperationDefinition](operationdefinition.html): Name of the publisher of the
 * operation definition
* [SearchParameter](searchparameter.html): Name of the
 * publisher of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Name of the publisher of the
 * structure definition
* [StructureMap](structuremap.html): Name of the publisher
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * Name of the publisher of the terminology capabilities
*
 * [ValueSet](valueset.html): Name of the publisher of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.publisher | CodeSystem.publisher | CompartmentDefinition.publisher | ConceptMap.publisher | GraphDefinition.publisher | ImplementationGuide.publisher | MessageDefinition.publisher | NamingSystem.publisher | OperationDefinition.publisher | SearchParameter.publisher | StructureDefinition.publisher | StructureMap.publisher | TerminologyCapabilities.publisher | ValueSet.publisher`
 */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * current status of the capability statement
* [CodeSystem](codesystem.html): The
 * current status of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The current status of the
 * compartment definition
* [ConceptMap](conceptmap.html): The current status of
 * the concept map
* [GraphDefinition](graphdefinition.html): The current status
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * current status of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The current status of the message
 * definition
* [NamingSystem](namingsystem.html): The current status of the
 * naming system
* [OperationDefinition](operationdefinition.html): The current
 * status of the operation definition
* [SearchParameter](searchparameter.html):
 * The current status of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The current status of the
 * structure definition
* [StructureMap](structuremap.html): The current status of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The current status of the terminology capabilities
* [ValueSet](valueset.html):
 * The current status of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.status | CodeSystem.status | CompartmentDefinition.status | ConceptMap.status | GraphDefinition.status | ImplementationGuide.status | MessageDefinition.status | NamingSystem.status | OperationDefinition.status | SearchParameter.status | StructureDefinition.status | StructureMap.status | TerminologyCapabilities.status | ValueSet.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * human-friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): The human-friendly name of the code system
*
 * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
*
 * [ImplementationGuide](implementationguide.html): The human-friendly name of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The
 * human-friendly name of the message definition
*
 * [OperationDefinition](operationdefinition.html): The human-friendly name of the
 * operation definition
* [StructureDefinition](structuredefinition.html): The
 * human-friendly name of the structure definition
*
 * [StructureMap](structuremap.html): The human-friendly name of the structure
 * map
* [TerminologyCapabilities](terminologycapabilities.html): The
 * human-friendly name of the terminology capabilities
*
 * [ValueSet](valueset.html): The human-friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.title | CodeSystem.title | ConceptMap.title | ImplementationGuide.title | MessageDefinition.title | OperationDefinition.title | StructureDefinition.title | StructureMap.title | TerminologyCapabilities.title | ValueSet.title`
 */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * uri that identifies the capability statement
* [CodeSystem](codesystem.html):
 * The uri that identifies the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the
 * compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies
 * the concept map
* [GraphDefinition](graphdefinition.html): The uri that
 * identifies the graph definition
*
 * [ImplementationGuide](implementationguide.html): The uri that identifies the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The uri
 * that identifies the message definition
*
 * [OperationDefinition](operationdefinition.html): The uri that identifies the
 * operation definition
* [SearchParameter](searchparameter.html): The uri that
 * identifies the search parameter
*
 * [StructureDefinition](structuredefinition.html): The uri that identifies the
 * structure definition
* [StructureMap](structuremap.html): The uri that
 * identifies the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies
 * the terminology capabilities
* [ValueSet](valueset.html): The uri that
 * identifies the value set
 * @fhirSearchType `uri`
 * @fhirPath `CapabilityStatement.url | CodeSystem.url | CompartmentDefinition.url | ConceptMap.url | GraphDefinition.url | ImplementationGuide.url | MessageDefinition.url | OperationDefinition.url | SearchParameter.url | StructureDefinition.url | StructureMap.url | TerminologyCapabilities.url | ValueSet.url`
 */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * business version of the capability statement
* [CodeSystem](codesystem.html):
 * The business version of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The business version of the
 * compartment definition
* [ConceptMap](conceptmap.html): The business version of
 * the concept map
* [GraphDefinition](graphdefinition.html): The business version
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * business version of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The business version of the message
 * definition
* [OperationDefinition](operationdefinition.html): The business
 * version of the operation definition
* [SearchParameter](searchparameter.html):
 * The business version of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The business version of the
 * structure definition
* [StructureMap](structuremap.html): The business version
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The business version of the terminology capabilities
*
 * [ValueSet](valueset.html): The business version of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.version | CodeSystem.version | CompartmentDefinition.version | ConceptMap.version | GraphDefinition.version | ImplementationGuide.version | MessageDefinition.version | OperationDefinition.version | SearchParameter.version | StructureDefinition.version | StructureMap.version | TerminologyCapabilities.version | ValueSet.version`
 */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | OperationDefinitionSortOrder
      | OperationDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type OperationOutcomeSortOrder = DomainResourceSortOrder;

export class OperationOutcomeFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "OperationOutcome";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | OperationOutcomeSortOrder
      | OperationOutcomeSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type OrganizationSortOrder =
  | DomainResourceSortOrder
  | "active"
  | "-active"
  | "address-city"
  | "-address-city"
  | "address-country"
  | "-address-country"
  | "address-postalcode"
  | "-address-postalcode"
  | "address-state"
  | "-address-state"
  | "address-use"
  | "-address-use"
  | "address"
  | "-address"
  | "endpoint"
  | "-endpoint"
  | "identifier"
  | "-identifier"
  | "name"
  | "-name"
  | "partof"
  | "-partof"
  | "phonetic"
  | "-phonetic"
  | "type"
  | "-type";

export class OrganizationFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Organization";

  /**
   * Is the Organization record active
   * @fhirSearchType `token`
   * @fhirPath `Organization.active`
   */
  active(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("active", ...args);
  }
  /**
   * A city specified in an address
   * @fhirSearchType `string`
   * @fhirPath `Organization.address.city`
   */
  addressCity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-city", ...args);
  }
  /**
   * A country specified in an address
   * @fhirSearchType `string`
   * @fhirPath `Organization.address.country`
   */
  addressCountry(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-country", ...args);
  }
  /**
   * A postal code specified in an address
   * @fhirSearchType `string`
   * @fhirPath `Organization.address.postalCode`
   */
  addressPostalcode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-postalcode", ...args);
  }
  /**
   * A state specified in an address
   * @fhirSearchType `string`
   * @fhirPath `Organization.address.state`
   */
  addressState(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-state", ...args);
  }
  /**
   * A use code specified in an address
   * @fhirSearchType `token`
   * @fhirPath `Organization.address.use`
   */
  addressUse(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("address-use", ...args);
  }
  /**
   * A server defined search that may match any of the string fields in the Address,
   * including line, city, district, state, country, postalCode, and/or text
   * @fhirSearchType `string`
   * @fhirPath `Organization.address`
   */
  address(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address", ...args);
  }
  /**
   * Technical endpoints providing access to services operated for the organization
   * @fhirSearchType `reference`
   * @fhirPath `Organization.endpoint`
   */
  endpoint(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("endpoint", ...args);
  }
  /**
   * Any identifier for the organization (not the accreditation issuer's identifier)
   * @fhirSearchType `token`
   * @fhirPath `Organization.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * A portion of the organization's name or alias
   * @fhirSearchType `string`
   * @fhirPath `Organization.name | Organization.alias`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * An organization of which this organization forms a part
   * @fhirSearchType `reference`
   * @fhirPath `Organization.partOf`
   */
  partof(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("partof", ...args);
  }
  /**
   * A portion of the organization's name using some kind of phonetic matching
   * algorithm
   * @fhirSearchType `string`
   * @fhirPath `Organization.name`
   */
  phonetic(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("phonetic", ...args);
  }
  /**
   * A code for the type of organization
   * @fhirSearchType `token`
   * @fhirPath `Organization.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | OrganizationSortOrder
      | OrganizationSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type OrganizationAffiliationSortOrder =
  | DomainResourceSortOrder
  | "active"
  | "-active"
  | "date"
  | "-date"
  | "email"
  | "-email"
  | "endpoint"
  | "-endpoint"
  | "identifier"
  | "-identifier"
  | "location"
  | "-location"
  | "network"
  | "-network"
  | "participating-organization"
  | "-participating-organization"
  | "phone"
  | "-phone"
  | "primary-organization"
  | "-primary-organization"
  | "role"
  | "-role"
  | "service"
  | "-service"
  | "specialty"
  | "-specialty"
  | "telecom"
  | "-telecom";

export class OrganizationAffiliationFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "OrganizationAffiliation";

  /**
   * Whether this organization affiliation record is in active use
   * @fhirSearchType `token`
   * @fhirPath `OrganizationAffiliation.active`
   */
  active(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("active", ...args);
  }
  /**
   * The period during which the participatingOrganization is affiliated with the
   * primary organization
   * @fhirSearchType `date`
   * @fhirPath `OrganizationAffiliation.period`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * A value in an email contact
   * @fhirSearchType `token`
   * @fhirPath `OrganizationAffiliation.telecom.where(system='email')`
   */
  email(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("email", ...args);
  }
  /**
   * Technical endpoints providing access to services operated for this role
   * @fhirSearchType `reference`
   * @fhirPath `OrganizationAffiliation.endpoint`
   */
  endpoint(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("endpoint", ...args);
  }
  /**
   * An organization affiliation's Identifier
   * @fhirSearchType `token`
   * @fhirPath `OrganizationAffiliation.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The location(s) at which the role occurs
   * @fhirSearchType `reference`
   * @fhirPath `OrganizationAffiliation.location`
   */
  location(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("location", ...args);
  }
  /**
   * Health insurance provider network in which the participatingOrganization
   * provides the role's services (if defined) at the indicated locations (if
   * defined)
   * @fhirSearchType `reference`
   * @fhirPath `OrganizationAffiliation.network`
   */
  network(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("network", ...args);
  }
  /**
   * The organization that provides services to the primary organization
   * @fhirSearchType `reference`
   * @fhirPath `OrganizationAffiliation.participatingOrganization`
   */
  participatingOrganization(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("participating-organization", ...args);
  }
  /**
   * A value in a phone contact
   * @fhirSearchType `token`
   * @fhirPath `OrganizationAffiliation.telecom.where(system='phone')`
   */
  phone(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("phone", ...args);
  }
  /**
   * The organization that receives the services from the participating organization
   * @fhirSearchType `reference`
   * @fhirPath `OrganizationAffiliation.organization`
   */
  primaryOrganization(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("primary-organization", ...args);
  }
  /**
   * Definition of the role the participatingOrganization plays
   * @fhirSearchType `token`
   * @fhirPath `OrganizationAffiliation.code`
   */
  role(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("role", ...args);
  }
  /**
   * Healthcare services provided through the role
   * @fhirSearchType `reference`
   * @fhirPath `OrganizationAffiliation.healthcareService`
   */
  service(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("service", ...args);
  }
  /**
   * Specific specialty of the participatingOrganization in the context of the role
   * @fhirSearchType `token`
   * @fhirPath `OrganizationAffiliation.specialty`
   */
  specialty(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("specialty", ...args);
  }
  /**
   * The value in any kind of contact
   * @fhirSearchType `token`
   * @fhirPath `OrganizationAffiliation.telecom`
   */
  telecom(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("telecom", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | OrganizationAffiliationSortOrder
      | OrganizationAffiliationSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type PackagedProductDefinitionSortOrder =
  | DomainResourceSortOrder
  | "biological"
  | "-biological"
  | "contained-item"
  | "-contained-item"
  | "device"
  | "-device"
  | "identifier"
  | "-identifier"
  | "manufactured-item"
  | "-manufactured-item"
  | "medication"
  | "-medication"
  | "name"
  | "-name"
  | "nutrition"
  | "-nutrition"
  | "package-for"
  | "-package-for"
  | "package"
  | "-package"
  | "status"
  | "-status";

export class PackagedProductDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "PackagedProductDefinition";

  /**
   * A biologically derived product within this packaged product
   * @fhirSearchType `reference`
   * @fhirPath `PackagedProductDefinition.package.containedItem.item.reference`
   */
  biological(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("biological", ...args);
  }
  /**
   * Any of the contained items within this packaged product
   * @fhirSearchType `reference`
   * @fhirPath `PackagedProductDefinition.package.containedItem.item.reference`
   */
  containedItem(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("contained-item", ...args);
  }
  /**
   * A device within this packaged product
   * @fhirSearchType `reference`
   * @fhirPath `PackagedProductDefinition.package.containedItem.item.reference`
   */
  device(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("device", ...args);
  }
  /**
   * Unique identifier
   * @fhirSearchType `token`
   * @fhirPath `PackagedProductDefinition.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * A manufactured item of medication within this packaged product
   * @fhirSearchType `reference`
   * @fhirPath `PackagedProductDefinition.package.containedItem.item.reference`
   */
  manufacturedItem(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("manufactured-item", ...args);
  }
  /**
   * A manufactured item of medication within this packaged product
   * @fhirSearchType `reference`
   * @fhirPath `PackagedProductDefinition.package.containedItem.item.reference`
   */
  medication(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("medication", ...args);
  }
  /**
   * A name for this package. Typically what it would be listed as in a drug
   * formulary or catalogue, inventory etc
   * @fhirSearchType `token`
   * @fhirPath `PackagedProductDefinition.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("name", ...args);
  }
  /**
   * A nutrition product within this packaged product
   * @fhirSearchType `reference`
   * @fhirPath `PackagedProductDefinition.package.containedItem.item.reference`
   */
  nutrition(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("nutrition", ...args);
  }
  /**
   * The product that this is a pack for
   * @fhirSearchType `reference`
   * @fhirPath `PackagedProductDefinition.packageFor`
   */
  packageFor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("package-for", ...args);
  }
  /**
   * A complete packaged product within this packaged product
   * @fhirSearchType `reference`
   * @fhirPath `PackagedProductDefinition.package.containedItem.item.reference`
   */
  package(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("package", ...args);
  }
  /**
   * The status within the lifecycle of this item. A high level status, this is not
   * intended to duplicate details carried elsewhere such as legal status, or
   * authorization or marketing status
   * @fhirSearchType `token`
   * @fhirPath `PackagedProductDefinition.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | PackagedProductDefinitionSortOrder
      | PackagedProductDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ParametersSortOrder = ResourceSortOrder;

export class ParametersFhirSearchBuilder extends ResourceFhirSearchBuilder {
  readonly resourceType = "Parameters";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: ParametersSortOrder | ParametersSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type PatientSortOrder =
  | DomainResourceSortOrder
  | "active"
  | "-active"
  | "death-date"
  | "-death-date"
  | "deceased"
  | "-deceased"
  | "general-practitioner"
  | "-general-practitioner"
  | "identifier"
  | "-identifier"
  | "language"
  | "-language"
  | "link"
  | "-link"
  | "name"
  | "-name"
  | "organization"
  | "-organization"
  | "address-city"
  | "-address-city"
  | "address-country"
  | "-address-country"
  | "address-postalcode"
  | "-address-postalcode"
  | "address-state"
  | "-address-state"
  | "address-use"
  | "-address-use"
  | "address"
  | "-address"
  | "birthdate"
  | "-birthdate"
  | "email"
  | "-email"
  | "family"
  | "-family"
  | "gender"
  | "-gender"
  | "given"
  | "-given"
  | "phone"
  | "-phone"
  | "phonetic"
  | "-phonetic"
  | "telecom"
  | "-telecom";

export class PatientFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Patient";

  /**
   * Whether the patient record is active
   * @fhirSearchType `token`
   * @fhirPath `Patient.active`
   */
  active(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("active", ...args);
  }
  /**
   * The date of death has been provided and satisfies this search value
   * @fhirSearchType `date`
   * @fhirPath `(Patient.deceased as dateTime)`
   */
  deathDate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("death-date", ...args);
  }
  /**
   * This patient has been marked as deceased, or has a death date entered
   * @fhirSearchType `token`
   * @fhirPath `Patient.deceased.exists() and Patient.deceased != false`
   */
  deceased(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("deceased", ...args);
  }
  /**
   * Patient's nominated general practitioner, not the organization that manages the
   * record
   * @fhirSearchType `reference`
   * @fhirPath `Patient.generalPractitioner`
   */
  generalPractitioner(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("general-practitioner", ...args);
  }
  /**
   * A patient identifier
   * @fhirSearchType `token`
   * @fhirPath `Patient.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Language code (irrespective of use value)
   * @fhirSearchType `token`
   * @fhirPath `Patient.communication.language`
   */
  language(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("language", ...args);
  }
  /**
   * All patients linked to the given patient
   * @fhirSearchType `reference`
   * @fhirPath `Patient.link.other`
   */
  link(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("link", ...args);
  }
  /**
   * A server defined search that may match any of the string fields in the
   * HumanName, including family, give, prefix, suffix, suffix, and/or text
   * @fhirSearchType `string`
   * @fhirPath `Patient.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * The organization that is the custodian of the patient record
   * @fhirSearchType `reference`
   * @fhirPath `Patient.managingOrganization`
   */
  organization(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("organization", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A city specified in an
 * address
* [Person](person.html): A city specified in an address
*
 * [Practitioner](practitioner.html): A city specified in an address
*
 * [RelatedPerson](relatedperson.html): A city specified in an address
 * @fhirSearchType `string`
 * @fhirPath `Patient.address.city | Person.address.city | Practitioner.address.city | RelatedPerson.address.city`
 */
  addressCity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-city", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A country specified in an
 * address
* [Person](person.html): A country specified in an address
*
 * [Practitioner](practitioner.html): A country specified in an address
*
 * [RelatedPerson](relatedperson.html): A country specified in an address
 * @fhirSearchType `string`
 * @fhirPath `Patient.address.country | Person.address.country | Practitioner.address.country | RelatedPerson.address.country`
 */
  addressCountry(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-country", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A postalCode specified in an
 * address
* [Person](person.html): A postal code specified in an address
*
 * [Practitioner](practitioner.html): A postalCode specified in an address
*
 * [RelatedPerson](relatedperson.html): A postal code specified in an address
 * @fhirSearchType `string`
 * @fhirPath `Patient.address.postalCode | Person.address.postalCode | Practitioner.address.postalCode | RelatedPerson.address.postalCode`
 */
  addressPostalcode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-postalcode", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A state specified in an
 * address
* [Person](person.html): A state specified in an address
*
 * [Practitioner](practitioner.html): A state specified in an address
*
 * [RelatedPerson](relatedperson.html): A state specified in an address
 * @fhirSearchType `string`
 * @fhirPath `Patient.address.state | Person.address.state | Practitioner.address.state | RelatedPerson.address.state`
 */
  addressState(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-state", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A use code specified in an
 * address
* [Person](person.html): A use code specified in an address
*
 * [Practitioner](practitioner.html): A use code specified in an address
*
 * [RelatedPerson](relatedperson.html): A use code specified in an address
 * @fhirSearchType `token`
 * @fhirPath `Patient.address.use | Person.address.use | Practitioner.address.use | RelatedPerson.address.use`
 */
  addressUse(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("address-use", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A server defined search that
 * may match any of the string fields in the Address, including line, city,
 * district, state, country, postalCode, and/or text
* [Person](person.html): A
 * server defined search that may match any of the string fields in the Address,
 * including line, city, district, state, country, postalCode, and/or text
*
 * [Practitioner](practitioner.html): A server defined search that may match any of
 * the string fields in the Address, including line, city, district, state,
 * country, postalCode, and/or text
* [RelatedPerson](relatedperson.html): A
 * server defined search that may match any of the string fields in the Address,
 * including line, city, district, state, country, postalCode, and/or text
 * @fhirSearchType `string`
 * @fhirPath `Patient.address | Person.address | Practitioner.address | RelatedPerson.address`
 */
  address(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): The patient's date of
 * birth
* [Person](person.html): The person's date of birth
*
 * [RelatedPerson](relatedperson.html): The Related Person's date of birth
 * @fhirSearchType `date`
 * @fhirPath `Patient.birthDate | Person.birthDate | RelatedPerson.birthDate`
 */
  birthdate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("birthdate", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A value in an email
 * contact
* [Person](person.html): A value in an email contact
*
 * [Practitioner](practitioner.html): A value in an email contact
*
 * [PractitionerRole](practitionerrole.html): A value in an email contact
*
 * [RelatedPerson](relatedperson.html): A value in an email contact
 * @fhirSearchType `token`
 * @fhirPath `Patient.telecom.where(system='email') | Person.telecom.where(system='email') | Practitioner.telecom.where(system='email') | PractitionerRole.telecom.where(system='email') | RelatedPerson.telecom.where(system='email')`
 */
  email(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("email", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A portion of the family name
 * of the patient
* [Practitioner](practitioner.html): A portion of the family
 * name
 * @fhirSearchType `string`
 * @fhirPath `Patient.name.family | Practitioner.name.family`
 */
  family(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("family", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): Gender of the patient
*
 * [Person](person.html): The gender of the person
*
 * [Practitioner](practitioner.html): Gender of the practitioner
*
 * [RelatedPerson](relatedperson.html): Gender of the related person
 * @fhirSearchType `token`
 * @fhirPath `Patient.gender | Person.gender | Practitioner.gender | RelatedPerson.gender`
 */
  gender(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("gender", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A portion of the given name
 * of the patient
* [Practitioner](practitioner.html): A portion of the given
 * name
 * @fhirSearchType `string`
 * @fhirPath `Patient.name.given | Practitioner.name.given`
 */
  given(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("given", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A value in a phone contact
*
 * [Person](person.html): A value in a phone contact
*
 * [Practitioner](practitioner.html): A value in a phone contact
*
 * [PractitionerRole](practitionerrole.html): A value in a phone contact
*
 * [RelatedPerson](relatedperson.html): A value in a phone contact
 * @fhirSearchType `token`
 * @fhirPath `Patient.telecom.where(system='phone') | Person.telecom.where(system='phone') | Practitioner.telecom.where(system='phone') | PractitionerRole.telecom.where(system='phone') | RelatedPerson.telecom.where(system='phone')`
 */
  phone(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("phone", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A portion of either family or
 * given name using some kind of phonetic matching algorithm
*
 * [Person](person.html): A portion of name using some kind of phonetic matching
 * algorithm
* [Practitioner](practitioner.html): A portion of either family or
 * given name using some kind of phonetic matching algorithm
*
 * [RelatedPerson](relatedperson.html): A portion of name using some kind of
 * phonetic matching algorithm
 * @fhirSearchType `string`
 * @fhirPath `Patient.name | Person.name | Practitioner.name | RelatedPerson.name`
 */
  phonetic(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("phonetic", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): The value in any kind of
 * telecom details of the patient
* [Person](person.html): The value in any kind
 * of contact
* [Practitioner](practitioner.html): The value in any kind of
 * contact
* [PractitionerRole](practitionerrole.html): The value in any kind of
 * contact
* [RelatedPerson](relatedperson.html): The value in any kind of
 * contact
 * @fhirSearchType `token`
 * @fhirPath `Patient.telecom | Person.telecom | Practitioner.telecom | PractitionerRole.telecom | RelatedPerson.telecom`
 */
  telecom(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("telecom", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: PatientSortOrder | PatientSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type PaymentNoticeSortOrder =
  | DomainResourceSortOrder
  | "created"
  | "-created"
  | "identifier"
  | "-identifier"
  | "payment-status"
  | "-payment-status"
  | "provider"
  | "-provider"
  | "request"
  | "-request"
  | "response"
  | "-response"
  | "status"
  | "-status";

export class PaymentNoticeFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "PaymentNotice";

  /**
   * Creation date fro the notice
   * @fhirSearchType `date`
   * @fhirPath `PaymentNotice.created`
   */
  created(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("created", ...args);
  }
  /**
   * The business identifier of the notice
   * @fhirSearchType `token`
   * @fhirPath `PaymentNotice.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The type of payment notice
   * @fhirSearchType `token`
   * @fhirPath `PaymentNotice.paymentStatus`
   */
  paymentStatus(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("payment-status", ...args);
  }
  /**
   * The reference to the provider
   * @fhirSearchType `reference`
   * @fhirPath `PaymentNotice.provider`
   */
  provider(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("provider", ...args);
  }
  /**
   * The Claim
   * @fhirSearchType `reference`
   * @fhirPath `PaymentNotice.request`
   */
  request(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("request", ...args);
  }
  /**
   * The ClaimResponse
   * @fhirSearchType `reference`
   * @fhirPath `PaymentNotice.response`
   */
  response(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("response", ...args);
  }
  /**
   * The status of the payment notice
   * @fhirSearchType `token`
   * @fhirPath `PaymentNotice.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | PaymentNoticeSortOrder
      | PaymentNoticeSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type PaymentReconciliationSortOrder =
  | DomainResourceSortOrder
  | "created"
  | "-created"
  | "disposition"
  | "-disposition"
  | "identifier"
  | "-identifier"
  | "outcome"
  | "-outcome"
  | "payment-issuer"
  | "-payment-issuer"
  | "request"
  | "-request"
  | "requestor"
  | "-requestor"
  | "status"
  | "-status";

export class PaymentReconciliationFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "PaymentReconciliation";

  /**
   * The creation date
   * @fhirSearchType `date`
   * @fhirPath `PaymentReconciliation.created`
   */
  created(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("created", ...args);
  }
  /**
   * The contents of the disposition message
   * @fhirSearchType `string`
   * @fhirPath `PaymentReconciliation.disposition`
   */
  disposition(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("disposition", ...args);
  }
  /**
   * The business identifier of the ExplanationOfBenefit
   * @fhirSearchType `token`
   * @fhirPath `PaymentReconciliation.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The processing outcome
   * @fhirSearchType `token`
   * @fhirPath `PaymentReconciliation.outcome`
   */
  outcome(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("outcome", ...args);
  }
  /**
   * The organization which generated this resource
   * @fhirSearchType `reference`
   * @fhirPath `PaymentReconciliation.paymentIssuer`
   */
  paymentIssuer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("payment-issuer", ...args);
  }
  /**
   * The reference to the claim
   * @fhirSearchType `reference`
   * @fhirPath `PaymentReconciliation.request`
   */
  request(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("request", ...args);
  }
  /**
   * The reference to the provider who submitted the claim
   * @fhirSearchType `reference`
   * @fhirPath `PaymentReconciliation.requestor`
   */
  requestor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("requestor", ...args);
  }
  /**
   * The status of the payment reconciliation
   * @fhirSearchType `token`
   * @fhirPath `PaymentReconciliation.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | PaymentReconciliationSortOrder
      | PaymentReconciliationSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type PersonSortOrder =
  | DomainResourceSortOrder
  | "identifier"
  | "-identifier"
  | "link"
  | "-link"
  | "name"
  | "-name"
  | "organization"
  | "-organization"
  | "patient"
  | "-patient"
  | "practitioner"
  | "-practitioner"
  | "relatedperson"
  | "-relatedperson"
  | "address-city"
  | "-address-city"
  | "address-country"
  | "-address-country"
  | "address-postalcode"
  | "-address-postalcode"
  | "address-state"
  | "-address-state"
  | "address-use"
  | "-address-use"
  | "address"
  | "-address"
  | "birthdate"
  | "-birthdate"
  | "email"
  | "-email"
  | "gender"
  | "-gender"
  | "phone"
  | "-phone"
  | "phonetic"
  | "-phonetic"
  | "telecom"
  | "-telecom";

export class PersonFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Person";

  /**
   * A person Identifier
   * @fhirSearchType `token`
   * @fhirPath `Person.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Any link has this Patient, Person, RelatedPerson or Practitioner reference
   * @fhirSearchType `reference`
   * @fhirPath `Person.link.target`
   */
  link(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("link", ...args);
  }
  /**
   * A server defined search that may match any of the string fields in the
   * HumanName, including family, give, prefix, suffix, suffix, and/or text
   * @fhirSearchType `string`
   * @fhirPath `Person.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * The organization at which this person record is being managed
   * @fhirSearchType `reference`
   * @fhirPath `Person.managingOrganization`
   */
  organization(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("organization", ...args);
  }
  /**
   * The Person links to this Patient
   * @fhirSearchType `reference`
   * @fhirPath `Person.link.target.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * The Person links to this Practitioner
   * @fhirSearchType `reference`
   * @fhirPath `Person.link.target.where(resolve() is Practitioner)`
   */
  practitioner(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("practitioner", ...args);
  }
  /**
   * The Person links to this RelatedPerson
   * @fhirSearchType `reference`
   * @fhirPath `Person.link.target.where(resolve() is RelatedPerson)`
   */
  relatedperson(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("relatedperson", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A city specified in an
 * address
* [Person](person.html): A city specified in an address
*
 * [Practitioner](practitioner.html): A city specified in an address
*
 * [RelatedPerson](relatedperson.html): A city specified in an address
 * @fhirSearchType `string`
 * @fhirPath `Patient.address.city | Person.address.city | Practitioner.address.city | RelatedPerson.address.city`
 */
  addressCity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-city", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A country specified in an
 * address
* [Person](person.html): A country specified in an address
*
 * [Practitioner](practitioner.html): A country specified in an address
*
 * [RelatedPerson](relatedperson.html): A country specified in an address
 * @fhirSearchType `string`
 * @fhirPath `Patient.address.country | Person.address.country | Practitioner.address.country | RelatedPerson.address.country`
 */
  addressCountry(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-country", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A postalCode specified in an
 * address
* [Person](person.html): A postal code specified in an address
*
 * [Practitioner](practitioner.html): A postalCode specified in an address
*
 * [RelatedPerson](relatedperson.html): A postal code specified in an address
 * @fhirSearchType `string`
 * @fhirPath `Patient.address.postalCode | Person.address.postalCode | Practitioner.address.postalCode | RelatedPerson.address.postalCode`
 */
  addressPostalcode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-postalcode", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A state specified in an
 * address
* [Person](person.html): A state specified in an address
*
 * [Practitioner](practitioner.html): A state specified in an address
*
 * [RelatedPerson](relatedperson.html): A state specified in an address
 * @fhirSearchType `string`
 * @fhirPath `Patient.address.state | Person.address.state | Practitioner.address.state | RelatedPerson.address.state`
 */
  addressState(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-state", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A use code specified in an
 * address
* [Person](person.html): A use code specified in an address
*
 * [Practitioner](practitioner.html): A use code specified in an address
*
 * [RelatedPerson](relatedperson.html): A use code specified in an address
 * @fhirSearchType `token`
 * @fhirPath `Patient.address.use | Person.address.use | Practitioner.address.use | RelatedPerson.address.use`
 */
  addressUse(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("address-use", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A server defined search that
 * may match any of the string fields in the Address, including line, city,
 * district, state, country, postalCode, and/or text
* [Person](person.html): A
 * server defined search that may match any of the string fields in the Address,
 * including line, city, district, state, country, postalCode, and/or text
*
 * [Practitioner](practitioner.html): A server defined search that may match any of
 * the string fields in the Address, including line, city, district, state,
 * country, postalCode, and/or text
* [RelatedPerson](relatedperson.html): A
 * server defined search that may match any of the string fields in the Address,
 * including line, city, district, state, country, postalCode, and/or text
 * @fhirSearchType `string`
 * @fhirPath `Patient.address | Person.address | Practitioner.address | RelatedPerson.address`
 */
  address(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): The patient's date of
 * birth
* [Person](person.html): The person's date of birth
*
 * [RelatedPerson](relatedperson.html): The Related Person's date of birth
 * @fhirSearchType `date`
 * @fhirPath `Patient.birthDate | Person.birthDate | RelatedPerson.birthDate`
 */
  birthdate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("birthdate", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A value in an email
 * contact
* [Person](person.html): A value in an email contact
*
 * [Practitioner](practitioner.html): A value in an email contact
*
 * [PractitionerRole](practitionerrole.html): A value in an email contact
*
 * [RelatedPerson](relatedperson.html): A value in an email contact
 * @fhirSearchType `token`
 * @fhirPath `Patient.telecom.where(system='email') | Person.telecom.where(system='email') | Practitioner.telecom.where(system='email') | PractitionerRole.telecom.where(system='email') | RelatedPerson.telecom.where(system='email')`
 */
  email(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("email", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): Gender of the patient
*
 * [Person](person.html): The gender of the person
*
 * [Practitioner](practitioner.html): Gender of the practitioner
*
 * [RelatedPerson](relatedperson.html): Gender of the related person
 * @fhirSearchType `token`
 * @fhirPath `Patient.gender | Person.gender | Practitioner.gender | RelatedPerson.gender`
 */
  gender(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("gender", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A value in a phone contact
*
 * [Person](person.html): A value in a phone contact
*
 * [Practitioner](practitioner.html): A value in a phone contact
*
 * [PractitionerRole](practitionerrole.html): A value in a phone contact
*
 * [RelatedPerson](relatedperson.html): A value in a phone contact
 * @fhirSearchType `token`
 * @fhirPath `Patient.telecom.where(system='phone') | Person.telecom.where(system='phone') | Practitioner.telecom.where(system='phone') | PractitionerRole.telecom.where(system='phone') | RelatedPerson.telecom.where(system='phone')`
 */
  phone(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("phone", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A portion of either family or
 * given name using some kind of phonetic matching algorithm
*
 * [Person](person.html): A portion of name using some kind of phonetic matching
 * algorithm
* [Practitioner](practitioner.html): A portion of either family or
 * given name using some kind of phonetic matching algorithm
*
 * [RelatedPerson](relatedperson.html): A portion of name using some kind of
 * phonetic matching algorithm
 * @fhirSearchType `string`
 * @fhirPath `Patient.name | Person.name | Practitioner.name | RelatedPerson.name`
 */
  phonetic(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("phonetic", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): The value in any kind of
 * telecom details of the patient
* [Person](person.html): The value in any kind
 * of contact
* [Practitioner](practitioner.html): The value in any kind of
 * contact
* [PractitionerRole](practitionerrole.html): The value in any kind of
 * contact
* [RelatedPerson](relatedperson.html): The value in any kind of
 * contact
 * @fhirSearchType `token`
 * @fhirPath `Patient.telecom | Person.telecom | Practitioner.telecom | PractitionerRole.telecom | RelatedPerson.telecom`
 */
  telecom(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("telecom", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: PersonSortOrder | PersonSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type PlanDefinitionSortOrder =
  | DomainResourceSortOrder
  | "composed-of"
  | "-composed-of"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "definition"
  | "-definition"
  | "depends-on"
  | "-depends-on"
  | "derived-from"
  | "-derived-from"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "predecessor"
  | "-predecessor"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "successor"
  | "-successor"
  | "title"
  | "-title"
  | "topic"
  | "-topic"
  | "type"
  | "-type"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class PlanDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "PlanDefinition";

  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `PlanDefinition.relatedArtifact.where(type='composed-of').resource`
   */
  composedOf(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("composed-of", ...args);
  }
  /**
   * A quantity- or range-valued use context assigned to the plan definition
   * @fhirSearchType `quantity`
   * @fhirPath `(PlanDefinition.useContext.value as Quantity) | (PlanDefinition.useContext.value as Range)`
   */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
   * A use context type and quantity- or range-based value assigned to the plan
   * definition
   * @fhirSearchType `composite`
   * @fhirPath `PlanDefinition.useContext`
   */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
   * A use context type and value assigned to the plan definition
   * @fhirSearchType `composite`
   * @fhirPath `PlanDefinition.useContext`
   */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
   * A type of use context assigned to the plan definition
   * @fhirSearchType `token`
   * @fhirPath `PlanDefinition.useContext.code`
   */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
   * A use context assigned to the plan definition
   * @fhirSearchType `token`
   * @fhirPath `(PlanDefinition.useContext.value as CodeableConcept)`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
   * The plan definition publication date
   * @fhirSearchType `date`
   * @fhirPath `PlanDefinition.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * Activity or plan definitions used by plan definition
   * @fhirSearchType `reference`
   * @fhirPath `PlanDefinition.action.definition`
   */
  definition(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("definition", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `PlanDefinition.relatedArtifact.where(type='depends-on').resource | PlanDefinition.library`
   */
  dependsOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("depends-on", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `PlanDefinition.relatedArtifact.where(type='derived-from').resource`
   */
  derivedFrom(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("derived-from", ...args);
  }
  /**
   * The description of the plan definition
   * @fhirSearchType `string`
   * @fhirPath `PlanDefinition.description`
   */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
   * The time during which the plan definition is intended to be in use
   * @fhirSearchType `date`
   * @fhirPath `PlanDefinition.effectivePeriod`
   */
  effective(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("effective", ...args);
  }
  /**
   * External identifier for the plan definition
   * @fhirSearchType `token`
   * @fhirPath `PlanDefinition.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Intended jurisdiction for the plan definition
   * @fhirSearchType `token`
   * @fhirPath `PlanDefinition.jurisdiction`
   */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
   * Computationally friendly name of the plan definition
   * @fhirSearchType `string`
   * @fhirPath `PlanDefinition.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `PlanDefinition.relatedArtifact.where(type='predecessor').resource`
   */
  predecessor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("predecessor", ...args);
  }
  /**
   * Name of the publisher of the plan definition
   * @fhirSearchType `string`
   * @fhirPath `PlanDefinition.publisher`
   */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
   * The current status of the plan definition
   * @fhirSearchType `token`
   * @fhirPath `PlanDefinition.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `PlanDefinition.relatedArtifact.where(type='successor').resource`
   */
  successor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("successor", ...args);
  }
  /**
   * The human-friendly name of the plan definition
   * @fhirSearchType `string`
   * @fhirPath `PlanDefinition.title`
   */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
   * Topics associated with the module
   * @fhirSearchType `token`
   * @fhirPath `PlanDefinition.topic`
   */
  topic(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("topic", ...args);
  }
  /**
   * The type of artifact the plan (e.g. order-set, eca-rule, protocol)
   * @fhirSearchType `token`
   * @fhirPath `PlanDefinition.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }
  /**
   * The uri that identifies the plan definition
   * @fhirSearchType `uri`
   * @fhirPath `PlanDefinition.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
   * The business version of the plan definition
   * @fhirSearchType `token`
   * @fhirPath `PlanDefinition.version`
   */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | PlanDefinitionSortOrder
      | PlanDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type PractitionerSortOrder =
  | DomainResourceSortOrder
  | "active"
  | "-active"
  | "communication"
  | "-communication"
  | "identifier"
  | "-identifier"
  | "name"
  | "-name"
  | "address-city"
  | "-address-city"
  | "address-country"
  | "-address-country"
  | "address-postalcode"
  | "-address-postalcode"
  | "address-state"
  | "-address-state"
  | "address-use"
  | "-address-use"
  | "address"
  | "-address"
  | "email"
  | "-email"
  | "family"
  | "-family"
  | "gender"
  | "-gender"
  | "given"
  | "-given"
  | "phone"
  | "-phone"
  | "phonetic"
  | "-phonetic"
  | "telecom"
  | "-telecom";

export class PractitionerFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Practitioner";

  /**
   * Whether the practitioner record is active
   * @fhirSearchType `token`
   * @fhirPath `Practitioner.active`
   */
  active(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("active", ...args);
  }
  /**
   * One of the languages that the practitioner can communicate with
   * @fhirSearchType `token`
   * @fhirPath `Practitioner.communication`
   */
  communication(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("communication", ...args);
  }
  /**
   * A practitioner's Identifier
   * @fhirSearchType `token`
   * @fhirPath `Practitioner.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * A server defined search that may match any of the string fields in the
   * HumanName, including family, give, prefix, suffix, suffix, and/or text
   * @fhirSearchType `string`
   * @fhirPath `Practitioner.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A city specified in an
 * address
* [Person](person.html): A city specified in an address
*
 * [Practitioner](practitioner.html): A city specified in an address
*
 * [RelatedPerson](relatedperson.html): A city specified in an address
 * @fhirSearchType `string`
 * @fhirPath `Patient.address.city | Person.address.city | Practitioner.address.city | RelatedPerson.address.city`
 */
  addressCity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-city", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A country specified in an
 * address
* [Person](person.html): A country specified in an address
*
 * [Practitioner](practitioner.html): A country specified in an address
*
 * [RelatedPerson](relatedperson.html): A country specified in an address
 * @fhirSearchType `string`
 * @fhirPath `Patient.address.country | Person.address.country | Practitioner.address.country | RelatedPerson.address.country`
 */
  addressCountry(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-country", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A postalCode specified in an
 * address
* [Person](person.html): A postal code specified in an address
*
 * [Practitioner](practitioner.html): A postalCode specified in an address
*
 * [RelatedPerson](relatedperson.html): A postal code specified in an address
 * @fhirSearchType `string`
 * @fhirPath `Patient.address.postalCode | Person.address.postalCode | Practitioner.address.postalCode | RelatedPerson.address.postalCode`
 */
  addressPostalcode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-postalcode", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A state specified in an
 * address
* [Person](person.html): A state specified in an address
*
 * [Practitioner](practitioner.html): A state specified in an address
*
 * [RelatedPerson](relatedperson.html): A state specified in an address
 * @fhirSearchType `string`
 * @fhirPath `Patient.address.state | Person.address.state | Practitioner.address.state | RelatedPerson.address.state`
 */
  addressState(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-state", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A use code specified in an
 * address
* [Person](person.html): A use code specified in an address
*
 * [Practitioner](practitioner.html): A use code specified in an address
*
 * [RelatedPerson](relatedperson.html): A use code specified in an address
 * @fhirSearchType `token`
 * @fhirPath `Patient.address.use | Person.address.use | Practitioner.address.use | RelatedPerson.address.use`
 */
  addressUse(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("address-use", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A server defined search that
 * may match any of the string fields in the Address, including line, city,
 * district, state, country, postalCode, and/or text
* [Person](person.html): A
 * server defined search that may match any of the string fields in the Address,
 * including line, city, district, state, country, postalCode, and/or text
*
 * [Practitioner](practitioner.html): A server defined search that may match any of
 * the string fields in the Address, including line, city, district, state,
 * country, postalCode, and/or text
* [RelatedPerson](relatedperson.html): A
 * server defined search that may match any of the string fields in the Address,
 * including line, city, district, state, country, postalCode, and/or text
 * @fhirSearchType `string`
 * @fhirPath `Patient.address | Person.address | Practitioner.address | RelatedPerson.address`
 */
  address(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A value in an email
 * contact
* [Person](person.html): A value in an email contact
*
 * [Practitioner](practitioner.html): A value in an email contact
*
 * [PractitionerRole](practitionerrole.html): A value in an email contact
*
 * [RelatedPerson](relatedperson.html): A value in an email contact
 * @fhirSearchType `token`
 * @fhirPath `Patient.telecom.where(system='email') | Person.telecom.where(system='email') | Practitioner.telecom.where(system='email') | PractitionerRole.telecom.where(system='email') | RelatedPerson.telecom.where(system='email')`
 */
  email(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("email", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A portion of the family name
 * of the patient
* [Practitioner](practitioner.html): A portion of the family
 * name
 * @fhirSearchType `string`
 * @fhirPath `Patient.name.family | Practitioner.name.family`
 */
  family(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("family", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): Gender of the patient
*
 * [Person](person.html): The gender of the person
*
 * [Practitioner](practitioner.html): Gender of the practitioner
*
 * [RelatedPerson](relatedperson.html): Gender of the related person
 * @fhirSearchType `token`
 * @fhirPath `Patient.gender | Person.gender | Practitioner.gender | RelatedPerson.gender`
 */
  gender(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("gender", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A portion of the given name
 * of the patient
* [Practitioner](practitioner.html): A portion of the given
 * name
 * @fhirSearchType `string`
 * @fhirPath `Patient.name.given | Practitioner.name.given`
 */
  given(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("given", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A value in a phone contact
*
 * [Person](person.html): A value in a phone contact
*
 * [Practitioner](practitioner.html): A value in a phone contact
*
 * [PractitionerRole](practitionerrole.html): A value in a phone contact
*
 * [RelatedPerson](relatedperson.html): A value in a phone contact
 * @fhirSearchType `token`
 * @fhirPath `Patient.telecom.where(system='phone') | Person.telecom.where(system='phone') | Practitioner.telecom.where(system='phone') | PractitionerRole.telecom.where(system='phone') | RelatedPerson.telecom.where(system='phone')`
 */
  phone(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("phone", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A portion of either family or
 * given name using some kind of phonetic matching algorithm
*
 * [Person](person.html): A portion of name using some kind of phonetic matching
 * algorithm
* [Practitioner](practitioner.html): A portion of either family or
 * given name using some kind of phonetic matching algorithm
*
 * [RelatedPerson](relatedperson.html): A portion of name using some kind of
 * phonetic matching algorithm
 * @fhirSearchType `string`
 * @fhirPath `Patient.name | Person.name | Practitioner.name | RelatedPerson.name`
 */
  phonetic(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("phonetic", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): The value in any kind of
 * telecom details of the patient
* [Person](person.html): The value in any kind
 * of contact
* [Practitioner](practitioner.html): The value in any kind of
 * contact
* [PractitionerRole](practitionerrole.html): The value in any kind of
 * contact
* [RelatedPerson](relatedperson.html): The value in any kind of
 * contact
 * @fhirSearchType `token`
 * @fhirPath `Patient.telecom | Person.telecom | Practitioner.telecom | PractitionerRole.telecom | RelatedPerson.telecom`
 */
  telecom(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("telecom", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | PractitionerSortOrder
      | PractitionerSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type PractitionerRoleSortOrder =
  | DomainResourceSortOrder
  | "active"
  | "-active"
  | "date"
  | "-date"
  | "endpoint"
  | "-endpoint"
  | "identifier"
  | "-identifier"
  | "location"
  | "-location"
  | "organization"
  | "-organization"
  | "practitioner"
  | "-practitioner"
  | "role"
  | "-role"
  | "service"
  | "-service"
  | "specialty"
  | "-specialty"
  | "email"
  | "-email"
  | "phone"
  | "-phone"
  | "telecom"
  | "-telecom";

export class PractitionerRoleFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "PractitionerRole";

  /**
   * Whether this practitioner role record is in active use
   * @fhirSearchType `token`
   * @fhirPath `PractitionerRole.active`
   */
  active(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("active", ...args);
  }
  /**
   * The period during which the practitioner is authorized to perform in these
   * role(s)
   * @fhirSearchType `date`
   * @fhirPath `PractitionerRole.period`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * Technical endpoints providing access to services operated for the practitioner
   * with this role
   * @fhirSearchType `reference`
   * @fhirPath `PractitionerRole.endpoint`
   */
  endpoint(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("endpoint", ...args);
  }
  /**
   * A practitioner's Identifier
   * @fhirSearchType `token`
   * @fhirPath `PractitionerRole.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * One of the locations at which this practitioner provides care
   * @fhirSearchType `reference`
   * @fhirPath `PractitionerRole.location`
   */
  location(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("location", ...args);
  }
  /**
   * The identity of the organization the practitioner represents / acts on behalf of
   * @fhirSearchType `reference`
   * @fhirPath `PractitionerRole.organization`
   */
  organization(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("organization", ...args);
  }
  /**
   * Practitioner that is able to provide the defined services for the organization
   * @fhirSearchType `reference`
   * @fhirPath `PractitionerRole.practitioner`
   */
  practitioner(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("practitioner", ...args);
  }
  /**
   * The practitioner can perform this role at for the organization
   * @fhirSearchType `token`
   * @fhirPath `PractitionerRole.code`
   */
  role(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("role", ...args);
  }
  /**
   * The list of healthcare services that this worker provides for this role's
   * Organization/Location(s)
   * @fhirSearchType `reference`
   * @fhirPath `PractitionerRole.healthcareService`
   */
  service(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("service", ...args);
  }
  /**
   * The practitioner has this specialty at an organization
   * @fhirSearchType `token`
   * @fhirPath `PractitionerRole.specialty`
   */
  specialty(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("specialty", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A value in an email
 * contact
* [Person](person.html): A value in an email contact
*
 * [Practitioner](practitioner.html): A value in an email contact
*
 * [PractitionerRole](practitionerrole.html): A value in an email contact
*
 * [RelatedPerson](relatedperson.html): A value in an email contact
 * @fhirSearchType `token`
 * @fhirPath `Patient.telecom.where(system='email') | Person.telecom.where(system='email') | Practitioner.telecom.where(system='email') | PractitionerRole.telecom.where(system='email') | RelatedPerson.telecom.where(system='email')`
 */
  email(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("email", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A value in a phone contact
*
 * [Person](person.html): A value in a phone contact
*
 * [Practitioner](practitioner.html): A value in a phone contact
*
 * [PractitionerRole](practitionerrole.html): A value in a phone contact
*
 * [RelatedPerson](relatedperson.html): A value in a phone contact
 * @fhirSearchType `token`
 * @fhirPath `Patient.telecom.where(system='phone') | Person.telecom.where(system='phone') | Practitioner.telecom.where(system='phone') | PractitionerRole.telecom.where(system='phone') | RelatedPerson.telecom.where(system='phone')`
 */
  phone(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("phone", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): The value in any kind of
 * telecom details of the patient
* [Person](person.html): The value in any kind
 * of contact
* [Practitioner](practitioner.html): The value in any kind of
 * contact
* [PractitionerRole](practitionerrole.html): The value in any kind of
 * contact
* [RelatedPerson](relatedperson.html): The value in any kind of
 * contact
 * @fhirSearchType `token`
 * @fhirPath `Patient.telecom | Person.telecom | Practitioner.telecom | PractitionerRole.telecom | RelatedPerson.telecom`
 */
  telecom(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("telecom", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | PractitionerRoleSortOrder
      | PractitionerRoleSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ProcedureSortOrder =
  | DomainResourceSortOrder
  | "based-on"
  | "-based-on"
  | "category"
  | "-category"
  | "instantiates-canonical"
  | "-instantiates-canonical"
  | "instantiates-uri"
  | "-instantiates-uri"
  | "location"
  | "-location"
  | "part-of"
  | "-part-of"
  | "performer"
  | "-performer"
  | "reason-code"
  | "-reason-code"
  | "reason-reference"
  | "-reason-reference"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "code"
  | "-code"
  | "date"
  | "-date"
  | "encounter"
  | "-encounter"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class ProcedureFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Procedure";

  /**
   * A request for this procedure
   * @fhirSearchType `reference`
   * @fhirPath `Procedure.basedOn`
   */
  basedOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("based-on", ...args);
  }
  /**
   * Classification of the procedure
   * @fhirSearchType `token`
   * @fhirPath `Procedure.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * Instantiates FHIR protocol or definition
   * @fhirSearchType `reference`
   * @fhirPath `Procedure.instantiatesCanonical`
   */
  instantiatesCanonical(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("instantiates-canonical", ...args);
  }
  /**
   * Instantiates external protocol or definition
   * @fhirSearchType `uri`
   * @fhirPath `Procedure.instantiatesUri`
   */
  instantiatesUri(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("instantiates-uri", ...args);
  }
  /**
   * Where the procedure happened
   * @fhirSearchType `reference`
   * @fhirPath `Procedure.location`
   */
  location(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("location", ...args);
  }
  /**
   * Part of referenced event
   * @fhirSearchType `reference`
   * @fhirPath `Procedure.partOf`
   */
  partOf(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("part-of", ...args);
  }
  /**
   * The reference to the practitioner
   * @fhirSearchType `reference`
   * @fhirPath `Procedure.performer.actor`
   */
  performer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("performer", ...args);
  }
  /**
   * Coded reason procedure performed
   * @fhirSearchType `token`
   * @fhirPath `Procedure.reasonCode`
   */
  reasonCode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("reason-code", ...args);
  }
  /**
   * The justification that the procedure was performed
   * @fhirSearchType `reference`
   * @fhirPath `Procedure.reasonReference`
   */
  reasonReference(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("reason-reference", ...args);
  }
  /**
   * preparation | in-progress | not-done | on-hold | stopped | completed |
   * entered-in-error | unknown
   * @fhirSearchType `token`
   * @fhirPath `Procedure.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Search by subject
   * @fhirSearchType `reference`
   * @fhirPath `Procedure.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code
 * that identifies the allergy or intolerance
* [Condition](condition.html): Code
 * for the condition
* [DeviceRequest](devicerequest.html): Code for what is being
 * requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the
 * report, as opposed to codes for the atomic results, which are the names on the
 * observation resource referred to from the result
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
*
 * [List](list.html): What the purpose of this list is
*
 * [Medication](medication.html): Returns medications for a specific code
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication code
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine code
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions of this medication code
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication code
* [Observation](observation.html): The code of the observation
 * type
* [Procedure](procedure.html): A code to identify a  procedure
*
 * [ServiceRequest](servicerequest.html): What is being requested/ordered
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.code | AllergyIntolerance.reaction.substance | Condition.code | (DeviceRequest.code as CodeableConcept) | DiagnosticReport.code | FamilyMemberHistory.condition.code | List.code | Medication.code | (MedicationAdministration.medication as CodeableConcept) | (MedicationDispense.medication as CodeableConcept) | (MedicationRequest.medication as CodeableConcept) | (MedicationStatement.medication as CodeableConcept) | Observation.code | Procedure.code | ServiceRequest.code`
 */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date
 * first version of the resource instance was recorded
*
 * [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html):
 * Time period team covers
* [ClinicalImpression](clinicalimpression.html): When
 * the assessment was documented
* [Composition](composition.html): Composition
 * editing time
* [Consent](consent.html): When this Consent was created or
 * indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant
 * time of the report
* [Encounter](encounter.html): A date within the period the
 * Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date
 * search value falls within the episode of care's period
*
 * [FamilyMemberHistory](familymemberhistory.html): When history was recorded or
 * last updated
* [Flag](flag.html): Time period when flag is active
*
 * [Immunization](immunization.html): Vaccination  (non)-Administration Date
*
 * [List](list.html): When the list was prepared
*
 * [Observation](observation.html): Obtained date/time. If the obtained element is
 * a period, a date that falls in the period
* [Procedure](procedure.html): When
 * the procedure was performed
* [RiskAssessment](riskassessment.html): When was
 * assessment made?
* [SupplyRequest](supplyrequest.html): When the request was
 * made
 * @fhirSearchType `date`
 * @fhirPath `AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [Composition](composition.html): Context of the
 * Composition
* [DeviceRequest](devicerequest.html): Encounter during which
 * request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter
 * when the order was made
* [DocumentReference](documentreference.html): Context
 * of the document  content
* [Flag](flag.html): Alert relevant during
 * encounter
* [List](list.html): Context in which list created
*
 * [NutritionOrder](nutritionorder.html): Return nutrition orders with this
 * encounter identifier
* [Observation](observation.html): Encounter related to
 * the observation
* [Procedure](procedure.html): Encounter created as part of
*
 * [RiskAssessment](riskassessment.html): Where was assessment performed?
*
 * [ServiceRequest](servicerequest.html): An encounter in which this request is
 * made
* [VisionPrescription](visionprescription.html): Return prescriptions with
 * this encounter identifier
 * @fhirSearchType `reference`
 * @fhirPath `Composition.encounter | DeviceRequest.encounter | DiagnosticReport.encounter | DocumentReference.context.encounter.where(resolve() is Encounter) | Flag.encounter | List.encounter | NutritionOrder.encounter | Observation.encounter | Procedure.encounter | RiskAssessment.encounter | ServiceRequest.encounter | VisionPrescription.encounter`
 */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: ProcedureSortOrder | ProcedureSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ProvenanceSortOrder =
  | DomainResourceSortOrder
  | "agent-role"
  | "-agent-role"
  | "agent-type"
  | "-agent-type"
  | "agent"
  | "-agent"
  | "entity"
  | "-entity"
  | "location"
  | "-location"
  | "patient"
  | "-patient"
  | "recorded"
  | "-recorded"
  | "signature-type"
  | "-signature-type"
  | "target"
  | "-target"
  | "when"
  | "-when";

export class ProvenanceFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Provenance";

  /**
   * What the agents role was
   * @fhirSearchType `token`
   * @fhirPath `Provenance.agent.role`
   */
  agentRole(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("agent-role", ...args);
  }
  /**
   * How the agent participated
   * @fhirSearchType `token`
   * @fhirPath `Provenance.agent.type`
   */
  agentType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("agent-type", ...args);
  }
  /**
   * Who participated
   * @fhirSearchType `reference`
   * @fhirPath `Provenance.agent.who`
   */
  agent(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("agent", ...args);
  }
  /**
   * Identity of entity
   * @fhirSearchType `reference`
   * @fhirPath `Provenance.entity.what`
   */
  entity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("entity", ...args);
  }
  /**
   * Where the activity occurred, if relevant
   * @fhirSearchType `reference`
   * @fhirPath `Provenance.location`
   */
  location(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("location", ...args);
  }
  /**
   * Target Reference(s) (usually version specific)
   * @fhirSearchType `reference`
   * @fhirPath `Provenance.target.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * When the activity was recorded / updated
   * @fhirSearchType `date`
   * @fhirPath `Provenance.recorded`
   */
  recorded(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("recorded", ...args);
  }
  /**
   * Indication of the reason the entity signed the object(s)
   * @fhirSearchType `token`
   * @fhirPath `Provenance.signature.type`
   */
  signatureType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("signature-type", ...args);
  }
  /**
   * Target Reference(s) (usually version specific)
   * @fhirSearchType `reference`
   * @fhirPath `Provenance.target`
   */
  target(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("target", ...args);
  }
  /**
   * When the activity occurred
   * @fhirSearchType `date`
   * @fhirPath `(Provenance.occurred as dateTime)`
   */
  when(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("when", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: ProvenanceSortOrder | ProvenanceSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type QuestionnaireSortOrder =
  | DomainResourceSortOrder
  | "code"
  | "-code"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "definition"
  | "-definition"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "subject-type"
  | "-subject-type"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class QuestionnaireFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Questionnaire";

  /**
   * A code that corresponds to one of its items in the questionnaire
   * @fhirSearchType `token`
   * @fhirPath `Questionnaire.item.code`
   */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
   * A quantity- or range-valued use context assigned to the questionnaire
   * @fhirSearchType `quantity`
   * @fhirPath `(Questionnaire.useContext.value as Quantity) | (Questionnaire.useContext.value as Range)`
   */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
   * A use context type and quantity- or range-based value assigned to the
   * questionnaire
   * @fhirSearchType `composite`
   * @fhirPath `Questionnaire.useContext`
   */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
   * A use context type and value assigned to the questionnaire
   * @fhirSearchType `composite`
   * @fhirPath `Questionnaire.useContext`
   */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
   * A type of use context assigned to the questionnaire
   * @fhirSearchType `token`
   * @fhirPath `Questionnaire.useContext.code`
   */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
   * A use context assigned to the questionnaire
   * @fhirSearchType `token`
   * @fhirPath `(Questionnaire.useContext.value as CodeableConcept)`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
   * The questionnaire publication date
   * @fhirSearchType `date`
   * @fhirPath `Questionnaire.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * ElementDefinition - details for the item
   * @fhirSearchType `uri`
   * @fhirPath `Questionnaire.item.definition`
   */
  definition(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("definition", ...args);
  }
  /**
   * The description of the questionnaire
   * @fhirSearchType `string`
   * @fhirPath `Questionnaire.description`
   */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
   * The time during which the questionnaire is intended to be in use
   * @fhirSearchType `date`
   * @fhirPath `Questionnaire.effectivePeriod`
   */
  effective(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("effective", ...args);
  }
  /**
   * External identifier for the questionnaire
   * @fhirSearchType `token`
   * @fhirPath `Questionnaire.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Intended jurisdiction for the questionnaire
   * @fhirSearchType `token`
   * @fhirPath `Questionnaire.jurisdiction`
   */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
   * Computationally friendly name of the questionnaire
   * @fhirSearchType `string`
   * @fhirPath `Questionnaire.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * Name of the publisher of the questionnaire
   * @fhirSearchType `string`
   * @fhirPath `Questionnaire.publisher`
   */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
   * The current status of the questionnaire
   * @fhirSearchType `token`
   * @fhirPath `Questionnaire.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Resource that can be subject of QuestionnaireResponse
   * @fhirSearchType `token`
   * @fhirPath `Questionnaire.subjectType`
   */
  subjectType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("subject-type", ...args);
  }
  /**
   * The human-friendly name of the questionnaire
   * @fhirSearchType `string`
   * @fhirPath `Questionnaire.title`
   */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
   * The uri that identifies the questionnaire
   * @fhirSearchType `uri`
   * @fhirPath `Questionnaire.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
   * The business version of the questionnaire
   * @fhirSearchType `token`
   * @fhirPath `Questionnaire.version`
   */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | QuestionnaireSortOrder
      | QuestionnaireSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type QuestionnaireResponseSortOrder =
  | DomainResourceSortOrder
  | "author"
  | "-author"
  | "authored"
  | "-authored"
  | "based-on"
  | "-based-on"
  | "encounter"
  | "-encounter"
  | "identifier"
  | "-identifier"
  | "part-of"
  | "-part-of"
  | "patient"
  | "-patient"
  | "questionnaire"
  | "-questionnaire"
  | "source"
  | "-source"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

export class QuestionnaireResponseFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "QuestionnaireResponse";

  /**
   * The author of the questionnaire response
   * @fhirSearchType `reference`
   * @fhirPath `QuestionnaireResponse.author`
   */
  author(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("author", ...args);
  }
  /**
   * When the questionnaire response was last changed
   * @fhirSearchType `date`
   * @fhirPath `QuestionnaireResponse.authored`
   */
  authored(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("authored", ...args);
  }
  /**
   * Plan/proposal/order fulfilled by this questionnaire response
   * @fhirSearchType `reference`
   * @fhirPath `QuestionnaireResponse.basedOn`
   */
  basedOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("based-on", ...args);
  }
  /**
   * Encounter associated with the questionnaire response
   * @fhirSearchType `reference`
   * @fhirPath `QuestionnaireResponse.encounter`
   */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
   * The unique identifier for the questionnaire response
   * @fhirSearchType `token`
   * @fhirPath `QuestionnaireResponse.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Procedure or observation this questionnaire response was performed as a part of
   * @fhirSearchType `reference`
   * @fhirPath `QuestionnaireResponse.partOf`
   */
  partOf(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("part-of", ...args);
  }
  /**
   * The patient that is the subject of the questionnaire response
   * @fhirSearchType `reference`
   * @fhirPath `QuestionnaireResponse.subject.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * The questionnaire the answers are provided for
   * @fhirSearchType `reference`
   * @fhirPath `QuestionnaireResponse.questionnaire`
   */
  questionnaire(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("questionnaire", ...args);
  }
  /**
   * The individual providing the information reflected in the questionnaire respose
   * @fhirSearchType `reference`
   * @fhirPath `QuestionnaireResponse.source`
   */
  source(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("source", ...args);
  }
  /**
   * The status of the questionnaire response
   * @fhirSearchType `token`
   * @fhirPath `QuestionnaireResponse.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The subject of the questionnaire response
   * @fhirSearchType `reference`
   * @fhirPath `QuestionnaireResponse.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | QuestionnaireResponseSortOrder
      | QuestionnaireResponseSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type RegulatedAuthorizationSortOrder =
  | DomainResourceSortOrder
  | "case-type"
  | "-case-type"
  | "case"
  | "-case"
  | "holder"
  | "-holder"
  | "identifier"
  | "-identifier"
  | "region"
  | "-region"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

export class RegulatedAuthorizationFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "RegulatedAuthorization";

  /**
   * The defining type of case
   * @fhirSearchType `token`
   * @fhirPath `RegulatedAuthorization.case.type`
   */
  caseType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("case-type", ...args);
  }
  /**
   * The case or procedure number
   * @fhirSearchType `token`
   * @fhirPath `RegulatedAuthorization.case.identifier`
   */
  case(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("case", ...args);
  }
  /**
   * The organization that holds the granted authorization
   * @fhirSearchType `reference`
   * @fhirPath `RegulatedAuthorization.holder`
   */
  holder(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("holder", ...args);
  }
  /**
   * Business identifier for the authorization, typically assigned by the authorizing
   * body
   * @fhirSearchType `token`
   * @fhirPath `RegulatedAuthorization.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The territory (e.g., country, jurisdiction etc.) in which the authorization has
   * been granted
   * @fhirSearchType `token`
   * @fhirPath `RegulatedAuthorization.region`
   */
  region(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("region", ...args);
  }
  /**
   * The status that is authorised e.g. approved. Intermediate states can be tracked
   * with cases and applications
   * @fhirSearchType `token`
   * @fhirPath `RegulatedAuthorization.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The type of regulated product, treatment, facility or activity that is being
   * authorized
   * @fhirSearchType `reference`
   * @fhirPath `RegulatedAuthorization.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | RegulatedAuthorizationSortOrder
      | RegulatedAuthorizationSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type RelatedPersonSortOrder =
  | DomainResourceSortOrder
  | "active"
  | "-active"
  | "identifier"
  | "-identifier"
  | "name"
  | "-name"
  | "patient"
  | "-patient"
  | "relationship"
  | "-relationship"
  | "address-city"
  | "-address-city"
  | "address-country"
  | "-address-country"
  | "address-postalcode"
  | "-address-postalcode"
  | "address-state"
  | "-address-state"
  | "address-use"
  | "-address-use"
  | "address"
  | "-address"
  | "birthdate"
  | "-birthdate"
  | "email"
  | "-email"
  | "gender"
  | "-gender"
  | "phone"
  | "-phone"
  | "phonetic"
  | "-phonetic"
  | "telecom"
  | "-telecom";

export class RelatedPersonFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "RelatedPerson";

  /**
   * Indicates if the related person record is active
   * @fhirSearchType `token`
   * @fhirPath `RelatedPerson.active`
   */
  active(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("active", ...args);
  }
  /**
   * An Identifier of the RelatedPerson
   * @fhirSearchType `token`
   * @fhirPath `RelatedPerson.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * A server defined search that may match any of the string fields in the
   * HumanName, including family, give, prefix, suffix, suffix, and/or text
   * @fhirSearchType `string`
   * @fhirPath `RelatedPerson.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * The patient this related person is related to
   * @fhirSearchType `reference`
   * @fhirPath `RelatedPerson.patient`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * The relationship between the patient and the relatedperson
   * @fhirSearchType `token`
   * @fhirPath `RelatedPerson.relationship`
   */
  relationship(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("relationship", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A city specified in an
 * address
* [Person](person.html): A city specified in an address
*
 * [Practitioner](practitioner.html): A city specified in an address
*
 * [RelatedPerson](relatedperson.html): A city specified in an address
 * @fhirSearchType `string`
 * @fhirPath `Patient.address.city | Person.address.city | Practitioner.address.city | RelatedPerson.address.city`
 */
  addressCity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-city", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A country specified in an
 * address
* [Person](person.html): A country specified in an address
*
 * [Practitioner](practitioner.html): A country specified in an address
*
 * [RelatedPerson](relatedperson.html): A country specified in an address
 * @fhirSearchType `string`
 * @fhirPath `Patient.address.country | Person.address.country | Practitioner.address.country | RelatedPerson.address.country`
 */
  addressCountry(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-country", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A postalCode specified in an
 * address
* [Person](person.html): A postal code specified in an address
*
 * [Practitioner](practitioner.html): A postalCode specified in an address
*
 * [RelatedPerson](relatedperson.html): A postal code specified in an address
 * @fhirSearchType `string`
 * @fhirPath `Patient.address.postalCode | Person.address.postalCode | Practitioner.address.postalCode | RelatedPerson.address.postalCode`
 */
  addressPostalcode(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-postalcode", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A state specified in an
 * address
* [Person](person.html): A state specified in an address
*
 * [Practitioner](practitioner.html): A state specified in an address
*
 * [RelatedPerson](relatedperson.html): A state specified in an address
 * @fhirSearchType `string`
 * @fhirPath `Patient.address.state | Person.address.state | Practitioner.address.state | RelatedPerson.address.state`
 */
  addressState(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address-state", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A use code specified in an
 * address
* [Person](person.html): A use code specified in an address
*
 * [Practitioner](practitioner.html): A use code specified in an address
*
 * [RelatedPerson](relatedperson.html): A use code specified in an address
 * @fhirSearchType `token`
 * @fhirPath `Patient.address.use | Person.address.use | Practitioner.address.use | RelatedPerson.address.use`
 */
  addressUse(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("address-use", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A server defined search that
 * may match any of the string fields in the Address, including line, city,
 * district, state, country, postalCode, and/or text
* [Person](person.html): A
 * server defined search that may match any of the string fields in the Address,
 * including line, city, district, state, country, postalCode, and/or text
*
 * [Practitioner](practitioner.html): A server defined search that may match any of
 * the string fields in the Address, including line, city, district, state,
 * country, postalCode, and/or text
* [RelatedPerson](relatedperson.html): A
 * server defined search that may match any of the string fields in the Address,
 * including line, city, district, state, country, postalCode, and/or text
 * @fhirSearchType `string`
 * @fhirPath `Patient.address | Person.address | Practitioner.address | RelatedPerson.address`
 */
  address(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("address", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): The patient's date of
 * birth
* [Person](person.html): The person's date of birth
*
 * [RelatedPerson](relatedperson.html): The Related Person's date of birth
 * @fhirSearchType `date`
 * @fhirPath `Patient.birthDate | Person.birthDate | RelatedPerson.birthDate`
 */
  birthdate(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("birthdate", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A value in an email
 * contact
* [Person](person.html): A value in an email contact
*
 * [Practitioner](practitioner.html): A value in an email contact
*
 * [PractitionerRole](practitionerrole.html): A value in an email contact
*
 * [RelatedPerson](relatedperson.html): A value in an email contact
 * @fhirSearchType `token`
 * @fhirPath `Patient.telecom.where(system='email') | Person.telecom.where(system='email') | Practitioner.telecom.where(system='email') | PractitionerRole.telecom.where(system='email') | RelatedPerson.telecom.where(system='email')`
 */
  email(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("email", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): Gender of the patient
*
 * [Person](person.html): The gender of the person
*
 * [Practitioner](practitioner.html): Gender of the practitioner
*
 * [RelatedPerson](relatedperson.html): Gender of the related person
 * @fhirSearchType `token`
 * @fhirPath `Patient.gender | Person.gender | Practitioner.gender | RelatedPerson.gender`
 */
  gender(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("gender", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A value in a phone contact
*
 * [Person](person.html): A value in a phone contact
*
 * [Practitioner](practitioner.html): A value in a phone contact
*
 * [PractitionerRole](practitionerrole.html): A value in a phone contact
*
 * [RelatedPerson](relatedperson.html): A value in a phone contact
 * @fhirSearchType `token`
 * @fhirPath `Patient.telecom.where(system='phone') | Person.telecom.where(system='phone') | Practitioner.telecom.where(system='phone') | PractitionerRole.telecom.where(system='phone') | RelatedPerson.telecom.where(system='phone')`
 */
  phone(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("phone", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): A portion of either family or
 * given name using some kind of phonetic matching algorithm
*
 * [Person](person.html): A portion of name using some kind of phonetic matching
 * algorithm
* [Practitioner](practitioner.html): A portion of either family or
 * given name using some kind of phonetic matching algorithm
*
 * [RelatedPerson](relatedperson.html): A portion of name using some kind of
 * phonetic matching algorithm
 * @fhirSearchType `string`
 * @fhirPath `Patient.name | Person.name | Practitioner.name | RelatedPerson.name`
 */
  phonetic(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("phonetic", ...args);
  }
  /**
 * Multiple Resources: 

* [Patient](patient.html): The value in any kind of
 * telecom details of the patient
* [Person](person.html): The value in any kind
 * of contact
* [Practitioner](practitioner.html): The value in any kind of
 * contact
* [PractitionerRole](practitionerrole.html): The value in any kind of
 * contact
* [RelatedPerson](relatedperson.html): The value in any kind of
 * contact
 * @fhirSearchType `token`
 * @fhirPath `Patient.telecom | Person.telecom | Practitioner.telecom | PractitionerRole.telecom | RelatedPerson.telecom`
 */
  telecom(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("telecom", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | RelatedPersonSortOrder
      | RelatedPersonSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type RequestGroupSortOrder =
  | DomainResourceSortOrder
  | "author"
  | "-author"
  | "authored"
  | "-authored"
  | "code"
  | "-code"
  | "encounter"
  | "-encounter"
  | "group-identifier"
  | "-group-identifier"
  | "identifier"
  | "-identifier"
  | "instantiates-canonical"
  | "-instantiates-canonical"
  | "instantiates-uri"
  | "-instantiates-uri"
  | "intent"
  | "-intent"
  | "participant"
  | "-participant"
  | "patient"
  | "-patient"
  | "priority"
  | "-priority"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

export class RequestGroupFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "RequestGroup";

  /**
   * The author of the request group
   * @fhirSearchType `reference`
   * @fhirPath `RequestGroup.author`
   */
  author(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("author", ...args);
  }
  /**
   * The date the request group was authored
   * @fhirSearchType `date`
   * @fhirPath `RequestGroup.authoredOn`
   */
  authored(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("authored", ...args);
  }
  /**
   * The code of the request group
   * @fhirSearchType `token`
   * @fhirPath `RequestGroup.code`
   */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
   * The encounter the request group applies to
   * @fhirSearchType `reference`
   * @fhirPath `RequestGroup.encounter`
   */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
   * The group identifier for the request group
   * @fhirSearchType `token`
   * @fhirPath `RequestGroup.groupIdentifier`
   */
  groupIdentifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("group-identifier", ...args);
  }
  /**
   * External identifiers for the request group
   * @fhirSearchType `token`
   * @fhirPath `RequestGroup.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The FHIR-based definition from which the request group is realized
   * @fhirSearchType `reference`
   * @fhirPath `RequestGroup.instantiatesCanonical`
   */
  instantiatesCanonical(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("instantiates-canonical", ...args);
  }
  /**
   * The external definition from which the request group is realized
   * @fhirSearchType `uri`
   * @fhirPath `RequestGroup.instantiatesUri`
   */
  instantiatesUri(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("instantiates-uri", ...args);
  }
  /**
   * The intent of the request group
   * @fhirSearchType `token`
   * @fhirPath `RequestGroup.intent`
   */
  intent(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("intent", ...args);
  }
  /**
   * The participant in the requests in the group
   * @fhirSearchType `reference`
   * @fhirPath `RequestGroup.action.participant`
   */
  participant(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("participant", ...args);
  }
  /**
   * The identity of a patient to search for request groups
   * @fhirSearchType `reference`
   * @fhirPath `RequestGroup.subject.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * The priority of the request group
   * @fhirSearchType `token`
   * @fhirPath `RequestGroup.priority`
   */
  priority(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("priority", ...args);
  }
  /**
   * The status of the request group
   * @fhirSearchType `token`
   * @fhirPath `RequestGroup.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The subject that the request group is about
   * @fhirSearchType `reference`
   * @fhirPath `RequestGroup.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | RequestGroupSortOrder
      | RequestGroupSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ResearchDefinitionSortOrder =
  | DomainResourceSortOrder
  | "composed-of"
  | "-composed-of"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "depends-on"
  | "-depends-on"
  | "derived-from"
  | "-derived-from"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "predecessor"
  | "-predecessor"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "successor"
  | "-successor"
  | "title"
  | "-title"
  | "topic"
  | "-topic"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class ResearchDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ResearchDefinition";

  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `ResearchDefinition.relatedArtifact.where(type='composed-of').resource`
   */
  composedOf(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("composed-of", ...args);
  }
  /**
   * A quantity- or range-valued use context assigned to the research definition
   * @fhirSearchType `quantity`
   * @fhirPath `(ResearchDefinition.useContext.value as Quantity) | (ResearchDefinition.useContext.value as Range)`
   */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
   * A use context type and quantity- or range-based value assigned to the research
   * definition
   * @fhirSearchType `composite`
   * @fhirPath `ResearchDefinition.useContext`
   */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
   * A use context type and value assigned to the research definition
   * @fhirSearchType `composite`
   * @fhirPath `ResearchDefinition.useContext`
   */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
   * A type of use context assigned to the research definition
   * @fhirSearchType `token`
   * @fhirPath `ResearchDefinition.useContext.code`
   */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
   * A use context assigned to the research definition
   * @fhirSearchType `token`
   * @fhirPath `(ResearchDefinition.useContext.value as CodeableConcept)`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
   * The research definition publication date
   * @fhirSearchType `date`
   * @fhirPath `ResearchDefinition.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `ResearchDefinition.relatedArtifact.where(type='depends-on').resource | ResearchDefinition.library`
   */
  dependsOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("depends-on", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `ResearchDefinition.relatedArtifact.where(type='derived-from').resource`
   */
  derivedFrom(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("derived-from", ...args);
  }
  /**
   * The description of the research definition
   * @fhirSearchType `string`
   * @fhirPath `ResearchDefinition.description`
   */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
   * The time during which the research definition is intended to be in use
   * @fhirSearchType `date`
   * @fhirPath `ResearchDefinition.effectivePeriod`
   */
  effective(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("effective", ...args);
  }
  /**
   * External identifier for the research definition
   * @fhirSearchType `token`
   * @fhirPath `ResearchDefinition.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Intended jurisdiction for the research definition
   * @fhirSearchType `token`
   * @fhirPath `ResearchDefinition.jurisdiction`
   */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
   * Computationally friendly name of the research definition
   * @fhirSearchType `string`
   * @fhirPath `ResearchDefinition.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `ResearchDefinition.relatedArtifact.where(type='predecessor').resource`
   */
  predecessor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("predecessor", ...args);
  }
  /**
   * Name of the publisher of the research definition
   * @fhirSearchType `string`
   * @fhirPath `ResearchDefinition.publisher`
   */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
   * The current status of the research definition
   * @fhirSearchType `token`
   * @fhirPath `ResearchDefinition.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `ResearchDefinition.relatedArtifact.where(type='successor').resource`
   */
  successor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("successor", ...args);
  }
  /**
   * The human-friendly name of the research definition
   * @fhirSearchType `string`
   * @fhirPath `ResearchDefinition.title`
   */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
   * Topics associated with the ResearchDefinition
   * @fhirSearchType `token`
   * @fhirPath `ResearchDefinition.topic`
   */
  topic(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("topic", ...args);
  }
  /**
   * The uri that identifies the research definition
   * @fhirSearchType `uri`
   * @fhirPath `ResearchDefinition.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
   * The business version of the research definition
   * @fhirSearchType `token`
   * @fhirPath `ResearchDefinition.version`
   */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ResearchDefinitionSortOrder
      | ResearchDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ResearchElementDefinitionSortOrder =
  | DomainResourceSortOrder
  | "composed-of"
  | "-composed-of"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "depends-on"
  | "-depends-on"
  | "derived-from"
  | "-derived-from"
  | "description"
  | "-description"
  | "effective"
  | "-effective"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "predecessor"
  | "-predecessor"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "successor"
  | "-successor"
  | "title"
  | "-title"
  | "topic"
  | "-topic"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class ResearchElementDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ResearchElementDefinition";

  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `ResearchElementDefinition.relatedArtifact.where(type='composed-of').resource`
   */
  composedOf(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("composed-of", ...args);
  }
  /**
   * A quantity- or range-valued use context assigned to the research element
   * definition
   * @fhirSearchType `quantity`
   * @fhirPath `(ResearchElementDefinition.useContext.value as Quantity) | (ResearchElementDefinition.useContext.value as Range)`
   */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
   * A use context type and quantity- or range-based value assigned to the research
   * element definition
   * @fhirSearchType `composite`
   * @fhirPath `ResearchElementDefinition.useContext`
   */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
   * A use context type and value assigned to the research element definition
   * @fhirSearchType `composite`
   * @fhirPath `ResearchElementDefinition.useContext`
   */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
   * A type of use context assigned to the research element definition
   * @fhirSearchType `token`
   * @fhirPath `ResearchElementDefinition.useContext.code`
   */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
   * A use context assigned to the research element definition
   * @fhirSearchType `token`
   * @fhirPath `(ResearchElementDefinition.useContext.value as CodeableConcept)`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
   * The research element definition publication date
   * @fhirSearchType `date`
   * @fhirPath `ResearchElementDefinition.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `ResearchElementDefinition.relatedArtifact.where(type='depends-on').resource | ResearchElementDefinition.library`
   */
  dependsOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("depends-on", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `ResearchElementDefinition.relatedArtifact.where(type='derived-from').resource`
   */
  derivedFrom(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("derived-from", ...args);
  }
  /**
   * The description of the research element definition
   * @fhirSearchType `string`
   * @fhirPath `ResearchElementDefinition.description`
   */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
   * The time during which the research element definition is intended to be in use
   * @fhirSearchType `date`
   * @fhirPath `ResearchElementDefinition.effectivePeriod`
   */
  effective(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("effective", ...args);
  }
  /**
   * External identifier for the research element definition
   * @fhirSearchType `token`
   * @fhirPath `ResearchElementDefinition.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Intended jurisdiction for the research element definition
   * @fhirSearchType `token`
   * @fhirPath `ResearchElementDefinition.jurisdiction`
   */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
   * Computationally friendly name of the research element definition
   * @fhirSearchType `string`
   * @fhirPath `ResearchElementDefinition.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `ResearchElementDefinition.relatedArtifact.where(type='predecessor').resource`
   */
  predecessor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("predecessor", ...args);
  }
  /**
   * Name of the publisher of the research element definition
   * @fhirSearchType `string`
   * @fhirPath `ResearchElementDefinition.publisher`
   */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
   * The current status of the research element definition
   * @fhirSearchType `token`
   * @fhirPath `ResearchElementDefinition.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * What resource is being referenced
   * @fhirSearchType `reference`
   * @fhirPath `ResearchElementDefinition.relatedArtifact.where(type='successor').resource`
   */
  successor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("successor", ...args);
  }
  /**
   * The human-friendly name of the research element definition
   * @fhirSearchType `string`
   * @fhirPath `ResearchElementDefinition.title`
   */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
   * Topics associated with the ResearchElementDefinition
   * @fhirSearchType `token`
   * @fhirPath `ResearchElementDefinition.topic`
   */
  topic(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("topic", ...args);
  }
  /**
   * The uri that identifies the research element definition
   * @fhirSearchType `uri`
   * @fhirPath `ResearchElementDefinition.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
   * The business version of the research element definition
   * @fhirSearchType `token`
   * @fhirPath `ResearchElementDefinition.version`
   */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ResearchElementDefinitionSortOrder
      | ResearchElementDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ResearchStudySortOrder =
  | DomainResourceSortOrder
  | "category"
  | "-category"
  | "date"
  | "-date"
  | "focus"
  | "-focus"
  | "identifier"
  | "-identifier"
  | "keyword"
  | "-keyword"
  | "location"
  | "-location"
  | "partof"
  | "-partof"
  | "principalinvestigator"
  | "-principalinvestigator"
  | "protocol"
  | "-protocol"
  | "site"
  | "-site"
  | "sponsor"
  | "-sponsor"
  | "status"
  | "-status"
  | "title"
  | "-title";

export class ResearchStudyFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ResearchStudy";

  /**
   * Classifications for the study
   * @fhirSearchType `token`
   * @fhirPath `ResearchStudy.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * When the study began and ended
   * @fhirSearchType `date`
   * @fhirPath `ResearchStudy.period`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * Drugs, devices, etc. under study
   * @fhirSearchType `token`
   * @fhirPath `ResearchStudy.focus`
   */
  focus(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("focus", ...args);
  }
  /**
   * Business Identifier for study
   * @fhirSearchType `token`
   * @fhirPath `ResearchStudy.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Used to search for the study
   * @fhirSearchType `token`
   * @fhirPath `ResearchStudy.keyword`
   */
  keyword(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("keyword", ...args);
  }
  /**
   * Geographic region(s) for study
   * @fhirSearchType `token`
   * @fhirPath `ResearchStudy.location`
   */
  location(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("location", ...args);
  }
  /**
   * Part of larger study
   * @fhirSearchType `reference`
   * @fhirPath `ResearchStudy.partOf`
   */
  partof(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("partof", ...args);
  }
  /**
   * Researcher who oversees multiple aspects of the study
   * @fhirSearchType `reference`
   * @fhirPath `ResearchStudy.principalInvestigator`
   */
  principalinvestigator(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("principalinvestigator", ...args);
  }
  /**
   * Steps followed in executing study
   * @fhirSearchType `reference`
   * @fhirPath `ResearchStudy.protocol`
   */
  protocol(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("protocol", ...args);
  }
  /**
   * Facility where study activities are conducted
   * @fhirSearchType `reference`
   * @fhirPath `ResearchStudy.site`
   */
  site(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("site", ...args);
  }
  /**
   * Organization that initiates and is legally responsible for the study
   * @fhirSearchType `reference`
   * @fhirPath `ResearchStudy.sponsor`
   */
  sponsor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("sponsor", ...args);
  }
  /**
   * active | administratively-completed | approved | closed-to-accrual |
   * closed-to-accrual-and-intervention | completed | disapproved | in-review |
   * temporarily-closed-to-accrual | temporarily-closed-to-accrual-and-intervention |
   * withdrawn
   * @fhirSearchType `token`
   * @fhirPath `ResearchStudy.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Name for this study
   * @fhirSearchType `string`
   * @fhirPath `ResearchStudy.title`
   */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ResearchStudySortOrder
      | ResearchStudySortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ResearchSubjectSortOrder =
  | DomainResourceSortOrder
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "individual"
  | "-individual"
  | "patient"
  | "-patient"
  | "status"
  | "-status"
  | "study"
  | "-study";

export class ResearchSubjectFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ResearchSubject";

  /**
   * Start and end of participation
   * @fhirSearchType `date`
   * @fhirPath `ResearchSubject.period`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * Business Identifier for research subject in a study
   * @fhirSearchType `token`
   * @fhirPath `ResearchSubject.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Who is part of study
   * @fhirSearchType `reference`
   * @fhirPath `ResearchSubject.individual`
   */
  individual(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("individual", ...args);
  }
  /**
   * Who is part of study
   * @fhirSearchType `reference`
   * @fhirPath `ResearchSubject.individual`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * candidate | eligible | follow-up | ineligible | not-registered | off-study |
   * on-study | on-study-intervention | on-study-observation | pending-on-study |
   * potential-candidate | screening | withdrawn
   * @fhirSearchType `token`
   * @fhirPath `ResearchSubject.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Study subject is part of
   * @fhirSearchType `reference`
   * @fhirPath `ResearchSubject.study`
   */
  study(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("study", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ResearchSubjectSortOrder
      | ResearchSubjectSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type RiskAssessmentSortOrder =
  | DomainResourceSortOrder
  | "condition"
  | "-condition"
  | "method"
  | "-method"
  | "performer"
  | "-performer"
  | "probability"
  | "-probability"
  | "risk"
  | "-risk"
  | "subject"
  | "-subject"
  | "date"
  | "-date"
  | "encounter"
  | "-encounter"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class RiskAssessmentFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "RiskAssessment";

  /**
   * Condition assessed
   * @fhirSearchType `reference`
   * @fhirPath `RiskAssessment.condition`
   */
  condition(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("condition", ...args);
  }
  /**
   * Evaluation mechanism
   * @fhirSearchType `token`
   * @fhirPath `RiskAssessment.method`
   */
  method(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("method", ...args);
  }
  /**
   * Who did assessment?
   * @fhirSearchType `reference`
   * @fhirPath `RiskAssessment.performer`
   */
  performer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("performer", ...args);
  }
  /**
   * Likelihood of specified outcome
   * @fhirSearchType `number`
   * @fhirPath `RiskAssessment.prediction.probability`
   */
  probability(
    ...args: DropFirst<Parameters<FhirSearchBuilder["numberParam"]>>
  ): this {
    return this.numberParam("probability", ...args);
  }
  /**
   * Likelihood of specified outcome as a qualitative value
   * @fhirSearchType `token`
   * @fhirPath `RiskAssessment.prediction.qualitativeRisk`
   */
  risk(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("risk", ...args);
  }
  /**
   * Who/what does assessment apply to?
   * @fhirSearchType `reference`
   * @fhirPath `RiskAssessment.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date
 * first version of the resource instance was recorded
*
 * [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html):
 * Time period team covers
* [ClinicalImpression](clinicalimpression.html): When
 * the assessment was documented
* [Composition](composition.html): Composition
 * editing time
* [Consent](consent.html): When this Consent was created or
 * indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant
 * time of the report
* [Encounter](encounter.html): A date within the period the
 * Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date
 * search value falls within the episode of care's period
*
 * [FamilyMemberHistory](familymemberhistory.html): When history was recorded or
 * last updated
* [Flag](flag.html): Time period when flag is active
*
 * [Immunization](immunization.html): Vaccination  (non)-Administration Date
*
 * [List](list.html): When the list was prepared
*
 * [Observation](observation.html): Obtained date/time. If the obtained element is
 * a period, a date that falls in the period
* [Procedure](procedure.html): When
 * the procedure was performed
* [RiskAssessment](riskassessment.html): When was
 * assessment made?
* [SupplyRequest](supplyrequest.html): When the request was
 * made
 * @fhirSearchType `date`
 * @fhirPath `AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [Composition](composition.html): Context of the
 * Composition
* [DeviceRequest](devicerequest.html): Encounter during which
 * request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter
 * when the order was made
* [DocumentReference](documentreference.html): Context
 * of the document  content
* [Flag](flag.html): Alert relevant during
 * encounter
* [List](list.html): Context in which list created
*
 * [NutritionOrder](nutritionorder.html): Return nutrition orders with this
 * encounter identifier
* [Observation](observation.html): Encounter related to
 * the observation
* [Procedure](procedure.html): Encounter created as part of
*
 * [RiskAssessment](riskassessment.html): Where was assessment performed?
*
 * [ServiceRequest](servicerequest.html): An encounter in which this request is
 * made
* [VisionPrescription](visionprescription.html): Return prescriptions with
 * this encounter identifier
 * @fhirSearchType `reference`
 * @fhirPath `Composition.encounter | DeviceRequest.encounter | DiagnosticReport.encounter | DocumentReference.context.encounter.where(resolve() is Encounter) | Flag.encounter | List.encounter | NutritionOrder.encounter | Observation.encounter | Procedure.encounter | RiskAssessment.encounter | ServiceRequest.encounter | VisionPrescription.encounter`
 */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | RiskAssessmentSortOrder
      | RiskAssessmentSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ScheduleSortOrder =
  | DomainResourceSortOrder
  | "active"
  | "-active"
  | "actor"
  | "-actor"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier"
  | "service-category"
  | "-service-category"
  | "service-type"
  | "-service-type"
  | "specialty"
  | "-specialty";

export class ScheduleFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Schedule";

  /**
   * Is the schedule in active use
   * @fhirSearchType `token`
   * @fhirPath `Schedule.active`
   */
  active(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("active", ...args);
  }
  /**
   * The individual(HealthcareService, Practitioner, Location, ...) to find a
   * Schedule for
   * @fhirSearchType `reference`
   * @fhirPath `Schedule.actor`
   */
  actor(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("actor", ...args);
  }
  /**
   * Search for Schedule resources that have a period that contains this date
   * specified
   * @fhirSearchType `date`
   * @fhirPath `Schedule.planningHorizon`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * A Schedule Identifier
   * @fhirSearchType `token`
   * @fhirPath `Schedule.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * High-level category
   * @fhirSearchType `token`
   * @fhirPath `Schedule.serviceCategory`
   */
  serviceCategory(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("service-category", ...args);
  }
  /**
   * The type of appointments that can be booked into associated slot(s)
   * @fhirSearchType `token`
   * @fhirPath `Schedule.serviceType`
   */
  serviceType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("service-type", ...args);
  }
  /**
   * Type of specialty needed
   * @fhirSearchType `token`
   * @fhirPath `Schedule.specialty`
   */
  specialty(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("specialty", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: ScheduleSortOrder | ScheduleSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type SearchParameterSortOrder =
  | DomainResourceSortOrder
  | "base"
  | "-base"
  | "code"
  | "-code"
  | "component"
  | "-component"
  | "derived-from"
  | "-derived-from"
  | "target"
  | "-target"
  | "type"
  | "-type"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class SearchParameterFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "SearchParameter";

  /**
   * The resource type(s) this search parameter applies to
   * @fhirSearchType `token`
   * @fhirPath `SearchParameter.base`
   */
  base(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("base", ...args);
  }
  /**
   * Code used in URL
   * @fhirSearchType `token`
   * @fhirPath `SearchParameter.code`
   */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
   * Defines how the part works
   * @fhirSearchType `reference`
   * @fhirPath `SearchParameter.component.definition`
   */
  component(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("component", ...args);
  }
  /**
   * Original definition for the search parameter
   * @fhirSearchType `reference`
   * @fhirPath `SearchParameter.derivedFrom`
   */
  derivedFrom(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("derived-from", ...args);
  }
  /**
   * Types of resource (if a resource reference)
   * @fhirSearchType `token`
   * @fhirPath `SearchParameter.target`
   */
  target(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("target", ...args);
  }
  /**
   * number | date | string | token | reference | composite | quantity | uri |
   * special
   * @fhirSearchType `token`
   * @fhirPath `SearchParameter.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * quantity- or range-valued use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned
 * to the code system
* [CompartmentDefinition](compartmentdefinition.html): A
 * quantity- or range-valued use context assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned
 * to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or
 * range-valued use context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use
 * context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A quantity- or range-valued use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use
 * context assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A quantity- or range-valued use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use
 * context assigned to the structure definition
*
 * [StructureMap](structuremap.html): A quantity- or range-valued use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or
 * range-valued use context assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to
 * the value set
 * @fhirSearchType `quantity`
 * @fhirPath `(CapabilityStatement.useContext.value as Quantity) | (CapabilityStatement.useContext.value as Range) | (CodeSystem.useContext.value as Quantity) | (CodeSystem.useContext.value as Range) | (CompartmentDefinition.useContext.value as Quantity) | (CompartmentDefinition.useContext.value as Range) | (ConceptMap.useContext.value as Quantity) | (ConceptMap.useContext.value as Range) | (GraphDefinition.useContext.value as Quantity) | (GraphDefinition.useContext.value as Range) | (ImplementationGuide.useContext.value as Quantity) | (ImplementationGuide.useContext.value as Range) | (MessageDefinition.useContext.value as Quantity) | (MessageDefinition.useContext.value as Range) | (NamingSystem.useContext.value as Quantity) | (NamingSystem.useContext.value as Range) | (OperationDefinition.useContext.value as Quantity) | (OperationDefinition.useContext.value as Range) | (SearchParameter.useContext.value as Quantity) | (SearchParameter.useContext.value as Range) | (StructureDefinition.useContext.value as Quantity) | (StructureDefinition.useContext.value as Range) | (StructureMap.useContext.value as Quantity) | (StructureMap.useContext.value as Range) | (TerminologyCapabilities.useContext.value as Quantity) | (TerminologyCapabilities.useContext.value as Range) | (ValueSet.useContext.value as Quantity) | (ValueSet.useContext.value as Range)`
 */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and quantity- or range-based value assigned to the capability
 * statement
* [CodeSystem](codesystem.html): A use context type and quantity- or
 * range-based value assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context type and
 * quantity- or range-based value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based
 * value assigned to the concept map
* [GraphDefinition](graphdefinition.html): A
 * use context type and quantity- or range-based value assigned to the graph
 * definition
* [ImplementationGuide](implementationguide.html): A use context
 * type and quantity- or range-based value assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and quantity- or
 * range-based value assigned to the message definition
*
 * [NamingSystem](namingsystem.html): A use context type and quantity- or
 * range-based value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and
 * quantity- or range-based value assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A use context type and quantity- or
 * range-based value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and
 * quantity- or range-based value assigned to the structure definition
*
 * [StructureMap](structuremap.html): A use context type and quantity- or
 * range-based value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * quantity- or range-based value assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A use context type and quantity- or range-based value
 * assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and value assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A use context type and value assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A use context
 * type and value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and value assigned to the
 * concept map
* [GraphDefinition](graphdefinition.html): A use context type and
 * value assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context type and value
 * assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and value
 * assigned to the message definition
* [NamingSystem](namingsystem.html): A use
 * context type and value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and value
 * assigned to the operation definition
* [SearchParameter](searchparameter.html):
 * A use context type and value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and value
 * assigned to the structure definition
* [StructureMap](structuremap.html): A use
 * context type and value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * value assigned to the terminology capabilities
* [ValueSet](valueset.html): A
 * use context type and value assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * type of use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A type of use context assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A type of use
 * context assigned to the compartment definition
* [ConceptMap](conceptmap.html):
 * A type of use context assigned to the concept map
*
 * [GraphDefinition](graphdefinition.html): A type of use context assigned to the
 * graph definition
* [ImplementationGuide](implementationguide.html): A type of
 * use context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A type of use context assigned to
 * the message definition
* [NamingSystem](namingsystem.html): A type of use
 * context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A type of use context assigned
 * to the operation definition
* [SearchParameter](searchparameter.html): A type
 * of use context assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A type of use context assigned
 * to the structure definition
* [StructureMap](structuremap.html): A type of use
 * context assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A type of use context
 * assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of
 * use context assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.useContext.code | CodeSystem.useContext.code | CompartmentDefinition.useContext.code | ConceptMap.useContext.code | GraphDefinition.useContext.code | ImplementationGuide.useContext.code | MessageDefinition.useContext.code | NamingSystem.useContext.code | OperationDefinition.useContext.code | SearchParameter.useContext.code | StructureDefinition.useContext.code | StructureMap.useContext.code | TerminologyCapabilities.useContext.code | ValueSet.useContext.code`
 */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context assigned to the capability statement
* [CodeSystem](codesystem.html): A
 * use context assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to
 * the compartment definition
* [ConceptMap](conceptmap.html): A use context
 * assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use
 * context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context assigned to the
 * implementation guide
* [MessageDefinition](messagedefinition.html): A use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context assigned to the
 * operation definition
* [SearchParameter](searchparameter.html): A use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context assigned to the
 * structure definition
* [StructureMap](structuremap.html): A use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned
 * to the terminology capabilities
* [ValueSet](valueset.html): A use context
 * assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `(CapabilityStatement.useContext.value as CodeableConcept) | (CodeSystem.useContext.value as CodeableConcept) | (CompartmentDefinition.useContext.value as CodeableConcept) | (ConceptMap.useContext.value as CodeableConcept) | (GraphDefinition.useContext.value as CodeableConcept) | (ImplementationGuide.useContext.value as CodeableConcept) | (MessageDefinition.useContext.value as CodeableConcept) | (NamingSystem.useContext.value as CodeableConcept) | (OperationDefinition.useContext.value as CodeableConcept) | (SearchParameter.useContext.value as CodeableConcept) | (StructureDefinition.useContext.value as CodeableConcept) | (StructureMap.useContext.value as CodeableConcept) | (TerminologyCapabilities.useContext.value as CodeableConcept) | (ValueSet.useContext.value as CodeableConcept)`
 */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * capability statement publication date
* [CodeSystem](codesystem.html): The code
 * system publication date
* [CompartmentDefinition](compartmentdefinition.html):
 * The compartment definition publication date
* [ConceptMap](conceptmap.html):
 * The concept map publication date
* [GraphDefinition](graphdefinition.html): The
 * graph definition publication date
*
 * [ImplementationGuide](implementationguide.html): The implementation guide
 * publication date
* [MessageDefinition](messagedefinition.html): The message
 * definition publication date
* [NamingSystem](namingsystem.html): The naming
 * system publication date
* [OperationDefinition](operationdefinition.html): The
 * operation definition publication date
*
 * [SearchParameter](searchparameter.html): The search parameter publication
 * date
* [StructureDefinition](structuredefinition.html): The structure
 * definition publication date
* [StructureMap](structuremap.html): The structure
 * map publication date
* [TerminologyCapabilities](terminologycapabilities.html):
 * The terminology capabilities publication date
* [ValueSet](valueset.html): The
 * value set publication date
 * @fhirSearchType `date`
 * @fhirPath `CapabilityStatement.date | CodeSystem.date | CompartmentDefinition.date | ConceptMap.date | GraphDefinition.date | ImplementationGuide.date | MessageDefinition.date | NamingSystem.date | OperationDefinition.date | SearchParameter.date | StructureDefinition.date | StructureMap.date | TerminologyCapabilities.date | ValueSet.date`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * description of the capability statement
* [CodeSystem](codesystem.html): The
 * description of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The description of the
 * compartment definition
* [ConceptMap](conceptmap.html): The description of the
 * concept map
* [GraphDefinition](graphdefinition.html): The description of the
 * graph definition
* [ImplementationGuide](implementationguide.html): The
 * description of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The description of the message
 * definition
* [NamingSystem](namingsystem.html): The description of the naming
 * system
* [OperationDefinition](operationdefinition.html): The description of
 * the operation definition
* [SearchParameter](searchparameter.html): The
 * description of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The description of the
 * structure definition
* [StructureMap](structuremap.html): The description of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The description of the terminology capabilities
* [ValueSet](valueset.html):
 * The description of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.description | CodeSystem.description | CompartmentDefinition.description | ConceptMap.description | GraphDefinition.description | ImplementationGuide.description | MessageDefinition.description | NamingSystem.description | OperationDefinition.description | SearchParameter.description | StructureDefinition.description | StructureMap.description | TerminologyCapabilities.description | ValueSet.description`
 */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Intended jurisdiction for the capability statement
*
 * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
*
 * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
*
 * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph
 * definition
* [ImplementationGuide](implementationguide.html): Intended
 * jurisdiction for the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the
 * message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction
 * for the naming system
* [OperationDefinition](operationdefinition.html):
 * Intended jurisdiction for the operation definition
*
 * [SearchParameter](searchparameter.html): Intended jurisdiction for the search
 * parameter
* [StructureDefinition](structuredefinition.html): Intended
 * jurisdiction for the structure definition
* [StructureMap](structuremap.html):
 * Intended jurisdiction for the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction
 * for the terminology capabilities
* [ValueSet](valueset.html): Intended
 * jurisdiction for the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.jurisdiction | CodeSystem.jurisdiction | ConceptMap.jurisdiction | GraphDefinition.jurisdiction | ImplementationGuide.jurisdiction | MessageDefinition.jurisdiction | NamingSystem.jurisdiction | OperationDefinition.jurisdiction | SearchParameter.jurisdiction | StructureDefinition.jurisdiction | StructureMap.jurisdiction | TerminologyCapabilities.jurisdiction | ValueSet.jurisdiction`
 */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Computationally friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): Computationally friendly name of the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): Computationally
 * friendly name of the compartment definition
* [ConceptMap](conceptmap.html):
 * Computationally friendly name of the concept map
*
 * [GraphDefinition](graphdefinition.html): Computationally friendly name of the
 * graph definition
* [ImplementationGuide](implementationguide.html):
 * Computationally friendly name of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Computationally friendly name of
 * the message definition
* [NamingSystem](namingsystem.html): Computationally
 * friendly name of the naming system
*
 * [OperationDefinition](operationdefinition.html): Computationally friendly name
 * of the operation definition
* [SearchParameter](searchparameter.html):
 * Computationally friendly name of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Computationally friendly name
 * of the structure definition
* [StructureMap](structuremap.html):
 * Computationally friendly name of the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Computationally
 * friendly name of the terminology capabilities
* [ValueSet](valueset.html):
 * Computationally friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.name | CodeSystem.name | CompartmentDefinition.name | ConceptMap.name | GraphDefinition.name | ImplementationGuide.name | MessageDefinition.name | NamingSystem.name | OperationDefinition.name | SearchParameter.name | StructureDefinition.name | StructureMap.name | TerminologyCapabilities.name | ValueSet.name`
 */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name
 * of the publisher of the capability statement
* [CodeSystem](codesystem.html):
 * Name of the publisher of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of
 * the compartment definition
* [ConceptMap](conceptmap.html): Name of the
 * publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of
 * the publisher of the graph definition
*
 * [ImplementationGuide](implementationguide.html): Name of the publisher of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): Name of the
 * publisher of the message definition
* [NamingSystem](namingsystem.html): Name
 * of the publisher of the naming system
*
 * [OperationDefinition](operationdefinition.html): Name of the publisher of the
 * operation definition
* [SearchParameter](searchparameter.html): Name of the
 * publisher of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Name of the publisher of the
 * structure definition
* [StructureMap](structuremap.html): Name of the publisher
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * Name of the publisher of the terminology capabilities
*
 * [ValueSet](valueset.html): Name of the publisher of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.publisher | CodeSystem.publisher | CompartmentDefinition.publisher | ConceptMap.publisher | GraphDefinition.publisher | ImplementationGuide.publisher | MessageDefinition.publisher | NamingSystem.publisher | OperationDefinition.publisher | SearchParameter.publisher | StructureDefinition.publisher | StructureMap.publisher | TerminologyCapabilities.publisher | ValueSet.publisher`
 */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * current status of the capability statement
* [CodeSystem](codesystem.html): The
 * current status of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The current status of the
 * compartment definition
* [ConceptMap](conceptmap.html): The current status of
 * the concept map
* [GraphDefinition](graphdefinition.html): The current status
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * current status of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The current status of the message
 * definition
* [NamingSystem](namingsystem.html): The current status of the
 * naming system
* [OperationDefinition](operationdefinition.html): The current
 * status of the operation definition
* [SearchParameter](searchparameter.html):
 * The current status of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The current status of the
 * structure definition
* [StructureMap](structuremap.html): The current status of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The current status of the terminology capabilities
* [ValueSet](valueset.html):
 * The current status of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.status | CodeSystem.status | CompartmentDefinition.status | ConceptMap.status | GraphDefinition.status | ImplementationGuide.status | MessageDefinition.status | NamingSystem.status | OperationDefinition.status | SearchParameter.status | StructureDefinition.status | StructureMap.status | TerminologyCapabilities.status | ValueSet.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * uri that identifies the capability statement
* [CodeSystem](codesystem.html):
 * The uri that identifies the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the
 * compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies
 * the concept map
* [GraphDefinition](graphdefinition.html): The uri that
 * identifies the graph definition
*
 * [ImplementationGuide](implementationguide.html): The uri that identifies the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The uri
 * that identifies the message definition
*
 * [OperationDefinition](operationdefinition.html): The uri that identifies the
 * operation definition
* [SearchParameter](searchparameter.html): The uri that
 * identifies the search parameter
*
 * [StructureDefinition](structuredefinition.html): The uri that identifies the
 * structure definition
* [StructureMap](structuremap.html): The uri that
 * identifies the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies
 * the terminology capabilities
* [ValueSet](valueset.html): The uri that
 * identifies the value set
 * @fhirSearchType `uri`
 * @fhirPath `CapabilityStatement.url | CodeSystem.url | CompartmentDefinition.url | ConceptMap.url | GraphDefinition.url | ImplementationGuide.url | MessageDefinition.url | OperationDefinition.url | SearchParameter.url | StructureDefinition.url | StructureMap.url | TerminologyCapabilities.url | ValueSet.url`
 */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * business version of the capability statement
* [CodeSystem](codesystem.html):
 * The business version of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The business version of the
 * compartment definition
* [ConceptMap](conceptmap.html): The business version of
 * the concept map
* [GraphDefinition](graphdefinition.html): The business version
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * business version of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The business version of the message
 * definition
* [OperationDefinition](operationdefinition.html): The business
 * version of the operation definition
* [SearchParameter](searchparameter.html):
 * The business version of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The business version of the
 * structure definition
* [StructureMap](structuremap.html): The business version
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The business version of the terminology capabilities
*
 * [ValueSet](valueset.html): The business version of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.version | CodeSystem.version | CompartmentDefinition.version | ConceptMap.version | GraphDefinition.version | ImplementationGuide.version | MessageDefinition.version | OperationDefinition.version | SearchParameter.version | StructureDefinition.version | StructureMap.version | TerminologyCapabilities.version | ValueSet.version`
 */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SearchParameterSortOrder
      | SearchParameterSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ServiceRequestSortOrder =
  | DomainResourceSortOrder
  | "authored"
  | "-authored"
  | "based-on"
  | "-based-on"
  | "body-site"
  | "-body-site"
  | "category"
  | "-category"
  | "instantiates-canonical"
  | "-instantiates-canonical"
  | "instantiates-uri"
  | "-instantiates-uri"
  | "intent"
  | "-intent"
  | "occurrence"
  | "-occurrence"
  | "performer-type"
  | "-performer-type"
  | "performer"
  | "-performer"
  | "priority"
  | "-priority"
  | "replaces"
  | "-replaces"
  | "requester"
  | "-requester"
  | "requisition"
  | "-requisition"
  | "specimen"
  | "-specimen"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "code"
  | "-code"
  | "encounter"
  | "-encounter"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class ServiceRequestFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ServiceRequest";

  /**
   * Date request signed
   * @fhirSearchType `date`
   * @fhirPath `ServiceRequest.authoredOn`
   */
  authored(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("authored", ...args);
  }
  /**
   * What request fulfills
   * @fhirSearchType `reference`
   * @fhirPath `ServiceRequest.basedOn`
   */
  basedOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("based-on", ...args);
  }
  /**
   * Where procedure is going to be done
   * @fhirSearchType `token`
   * @fhirPath `ServiceRequest.bodySite`
   */
  bodySite(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("body-site", ...args);
  }
  /**
   * Classification of service
   * @fhirSearchType `token`
   * @fhirPath `ServiceRequest.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * Instantiates FHIR protocol or definition
   * @fhirSearchType `reference`
   * @fhirPath `ServiceRequest.instantiatesCanonical`
   */
  instantiatesCanonical(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("instantiates-canonical", ...args);
  }
  /**
   * Instantiates external protocol or definition
   * @fhirSearchType `uri`
   * @fhirPath `ServiceRequest.instantiatesUri`
   */
  instantiatesUri(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("instantiates-uri", ...args);
  }
  /**
   * proposal | plan | directive | order | original-order | reflex-order |
   * filler-order | instance-order | option
   * @fhirSearchType `token`
   * @fhirPath `ServiceRequest.intent`
   */
  intent(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("intent", ...args);
  }
  /**
   * When service should occur
   * @fhirSearchType `date`
   * @fhirPath `ServiceRequest.occurrence`
   */
  occurrence(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("occurrence", ...args);
  }
  /**
   * Performer role
   * @fhirSearchType `token`
   * @fhirPath `ServiceRequest.performerType`
   */
  performerType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("performer-type", ...args);
  }
  /**
   * Requested performer
   * @fhirSearchType `reference`
   * @fhirPath `ServiceRequest.performer`
   */
  performer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("performer", ...args);
  }
  /**
   * routine | urgent | asap | stat
   * @fhirSearchType `token`
   * @fhirPath `ServiceRequest.priority`
   */
  priority(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("priority", ...args);
  }
  /**
   * What request replaces
   * @fhirSearchType `reference`
   * @fhirPath `ServiceRequest.replaces`
   */
  replaces(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("replaces", ...args);
  }
  /**
   * Who/what is requesting service
   * @fhirSearchType `reference`
   * @fhirPath `ServiceRequest.requester`
   */
  requester(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("requester", ...args);
  }
  /**
   * Composite Request ID
   * @fhirSearchType `token`
   * @fhirPath `ServiceRequest.requisition`
   */
  requisition(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("requisition", ...args);
  }
  /**
   * Specimen to be tested
   * @fhirSearchType `reference`
   * @fhirPath `ServiceRequest.specimen`
   */
  specimen(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("specimen", ...args);
  }
  /**
   * draft | active | on-hold | revoked | completed | entered-in-error | unknown
   * @fhirSearchType `token`
   * @fhirPath `ServiceRequest.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Search by subject
   * @fhirSearchType `reference`
   * @fhirPath `ServiceRequest.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Code
 * that identifies the allergy or intolerance
* [Condition](condition.html): Code
 * for the condition
* [DeviceRequest](devicerequest.html): Code for what is being
 * requested/ordered
* [DiagnosticReport](diagnosticreport.html): The code for the
 * report, as opposed to codes for the atomic results, which are the names on the
 * observation resource referred to from the result
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a condition code
*
 * [List](list.html): What the purpose of this list is
*
 * [Medication](medication.html): Returns medications for a specific code
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations of this medication code
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses of this
 * medicine code
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions of this medication code
*
 * [MedicationStatement](medicationstatement.html): Return statements of this
 * medication code
* [Observation](observation.html): The code of the observation
 * type
* [Procedure](procedure.html): A code to identify a  procedure
*
 * [ServiceRequest](servicerequest.html): What is being requested/ordered
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.code | AllergyIntolerance.reaction.substance | Condition.code | (DeviceRequest.code as CodeableConcept) | DiagnosticReport.code | FamilyMemberHistory.condition.code | List.code | Medication.code | (MedicationAdministration.medication as CodeableConcept) | (MedicationDispense.medication as CodeableConcept) | (MedicationRequest.medication as CodeableConcept) | (MedicationStatement.medication as CodeableConcept) | Observation.code | Procedure.code | ServiceRequest.code`
 */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
 * Multiple Resources: 

* [Composition](composition.html): Context of the
 * Composition
* [DeviceRequest](devicerequest.html): Encounter during which
 * request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter
 * when the order was made
* [DocumentReference](documentreference.html): Context
 * of the document  content
* [Flag](flag.html): Alert relevant during
 * encounter
* [List](list.html): Context in which list created
*
 * [NutritionOrder](nutritionorder.html): Return nutrition orders with this
 * encounter identifier
* [Observation](observation.html): Encounter related to
 * the observation
* [Procedure](procedure.html): Encounter created as part of
*
 * [RiskAssessment](riskassessment.html): Where was assessment performed?
*
 * [ServiceRequest](servicerequest.html): An encounter in which this request is
 * made
* [VisionPrescription](visionprescription.html): Return prescriptions with
 * this encounter identifier
 * @fhirSearchType `reference`
 * @fhirPath `Composition.encounter | DeviceRequest.encounter | DiagnosticReport.encounter | DocumentReference.context.encounter.where(resolve() is Encounter) | Flag.encounter | List.encounter | NutritionOrder.encounter | Observation.encounter | Procedure.encounter | RiskAssessment.encounter | ServiceRequest.encounter | VisionPrescription.encounter`
 */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | ServiceRequestSortOrder
      | ServiceRequestSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type SlotSortOrder =
  | DomainResourceSortOrder
  | "appointment-type"
  | "-appointment-type"
  | "identifier"
  | "-identifier"
  | "schedule"
  | "-schedule"
  | "service-category"
  | "-service-category"
  | "service-type"
  | "-service-type"
  | "specialty"
  | "-specialty"
  | "start"
  | "-start"
  | "status"
  | "-status";

export class SlotFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Slot";

  /**
   * The style of appointment or patient that may be booked in the slot (not service
   * type)
   * @fhirSearchType `token`
   * @fhirPath `Slot.appointmentType`
   */
  appointmentType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("appointment-type", ...args);
  }
  /**
   * A Slot Identifier
   * @fhirSearchType `token`
   * @fhirPath `Slot.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The Schedule Resource that we are seeking a slot within
   * @fhirSearchType `reference`
   * @fhirPath `Slot.schedule`
   */
  schedule(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("schedule", ...args);
  }
  /**
   * A broad categorization of the service that is to be performed during this
   * appointment
   * @fhirSearchType `token`
   * @fhirPath `Slot.serviceCategory`
   */
  serviceCategory(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("service-category", ...args);
  }
  /**
   * The type of appointments that can be booked into the slot
   * @fhirSearchType `token`
   * @fhirPath `Slot.serviceType`
   */
  serviceType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("service-type", ...args);
  }
  /**
   * The specialty of a practitioner that would be required to perform the service
   * requested in this appointment
   * @fhirSearchType `token`
   * @fhirPath `Slot.specialty`
   */
  specialty(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("specialty", ...args);
  }
  /**
   * Appointment date/time.
   * @fhirSearchType `date`
   * @fhirPath `Slot.start`
   */
  start(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("start", ...args);
  }
  /**
   * The free/busy status of the appointment
   * @fhirSearchType `token`
   * @fhirPath `Slot.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(parameters: SlotSortOrder | SlotSortOrder[] | null | undefined): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type SpecimenSortOrder =
  | DomainResourceSortOrder
  | "accession"
  | "-accession"
  | "bodysite"
  | "-bodysite"
  | "collected"
  | "-collected"
  | "collector"
  | "-collector"
  | "container-id"
  | "-container-id"
  | "container"
  | "-container"
  | "identifier"
  | "-identifier"
  | "parent"
  | "-parent"
  | "patient"
  | "-patient"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "type"
  | "-type";

export class SpecimenFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Specimen";

  /**
   * The accession number associated with the specimen
   * @fhirSearchType `token`
   * @fhirPath `Specimen.accessionIdentifier`
   */
  accession(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("accession", ...args);
  }
  /**
   * The code for the body site from where the specimen originated
   * @fhirSearchType `token`
   * @fhirPath `Specimen.collection.bodySite`
   */
  bodysite(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("bodysite", ...args);
  }
  /**
   * The date the specimen was collected
   * @fhirSearchType `date`
   * @fhirPath `Specimen.collection.collected`
   */
  collected(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("collected", ...args);
  }
  /**
   * Who collected the specimen
   * @fhirSearchType `reference`
   * @fhirPath `Specimen.collection.collector`
   */
  collector(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("collector", ...args);
  }
  /**
   * The unique identifier associated with the specimen container
   * @fhirSearchType `token`
   * @fhirPath `Specimen.container.identifier`
   */
  containerId(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("container-id", ...args);
  }
  /**
   * The kind of specimen container
   * @fhirSearchType `token`
   * @fhirPath `Specimen.container.type`
   */
  container(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("container", ...args);
  }
  /**
   * The unique identifier associated with the specimen
   * @fhirSearchType `token`
   * @fhirPath `Specimen.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The parent of the specimen
   * @fhirSearchType `reference`
   * @fhirPath `Specimen.parent`
   */
  parent(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("parent", ...args);
  }
  /**
   * The patient the specimen comes from
   * @fhirSearchType `reference`
   * @fhirPath `Specimen.subject.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * available | unavailable | unsatisfactory | entered-in-error
   * @fhirSearchType `token`
   * @fhirPath `Specimen.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The subject of the specimen
   * @fhirSearchType `reference`
   * @fhirPath `Specimen.subject`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
   * The specimen type
   * @fhirSearchType `token`
   * @fhirPath `Specimen.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SpecimenSortOrder | SpecimenSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type SpecimenDefinitionSortOrder =
  | DomainResourceSortOrder
  | "container"
  | "-container"
  | "identifier"
  | "-identifier"
  | "type"
  | "-type";

export class SpecimenDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "SpecimenDefinition";

  /**
   * The type of specimen conditioned in container expected by the lab
   * @fhirSearchType `token`
   * @fhirPath `SpecimenDefinition.typeTested.container.type`
   */
  container(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("container", ...args);
  }
  /**
   * The unique identifier associated with the specimen
   * @fhirSearchType `token`
   * @fhirPath `SpecimenDefinition.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The type of collected specimen
   * @fhirSearchType `token`
   * @fhirPath `SpecimenDefinition.typeCollected`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SpecimenDefinitionSortOrder
      | SpecimenDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type StructureDefinitionSortOrder =
  | DomainResourceSortOrder
  | "abstract"
  | "-abstract"
  | "base-path"
  | "-base-path"
  | "base"
  | "-base"
  | "derivation"
  | "-derivation"
  | "experimental"
  | "-experimental"
  | "ext-context"
  | "-ext-context"
  | "keyword"
  | "-keyword"
  | "kind"
  | "-kind"
  | "path"
  | "-path"
  | "type"
  | "-type"
  | "valueset"
  | "-valueset"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class StructureDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "StructureDefinition";

  /**
   * Whether the structure is abstract
   * @fhirSearchType `token`
   * @fhirPath `StructureDefinition.abstract`
   */
  abstract(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("abstract", ...args);
  }
  /**
   * Path that identifies the base element
   * @fhirSearchType `token`
   * @fhirPath `StructureDefinition.snapshot.element.base.path | StructureDefinition.differential.element.base.path`
   */
  basePath(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("base-path", ...args);
  }
  /**
   * Definition that this type is constrained/specialized from
   * @fhirSearchType `reference`
   * @fhirPath `StructureDefinition.baseDefinition`
   */
  base(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("base", ...args);
  }
  /**
   * specialization | constraint - How relates to base definition
   * @fhirSearchType `token`
   * @fhirPath `StructureDefinition.derivation`
   */
  derivation(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("derivation", ...args);
  }
  /**
   * For testing purposes, not real usage
   * @fhirSearchType `token`
   * @fhirPath `StructureDefinition.experimental`
   */
  experimental(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("experimental", ...args);
  }
  /**
   * The system is the URL for the context-type: e.g.
   * http://hl7.org/fhir/extension-context-type#element|CodeableConcept.text
   * @fhirSearchType `token`
   * @fhirPath `StructureDefinition.context.type`
   */
  extContext(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("ext-context", ...args);
  }
  /**
   * A code for the StructureDefinition
   * @fhirSearchType `token`
   * @fhirPath `StructureDefinition.keyword`
   */
  keyword(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("keyword", ...args);
  }
  /**
   * primitive-type | complex-type | resource | logical
   * @fhirSearchType `token`
   * @fhirPath `StructureDefinition.kind`
   */
  kind(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("kind", ...args);
  }
  /**
   * A path that is constrained in the StructureDefinition
   * @fhirSearchType `token`
   * @fhirPath `StructureDefinition.snapshot.element.path | StructureDefinition.differential.element.path`
   */
  path(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("path", ...args);
  }
  /**
   * Type defined or constrained by this structure
   * @fhirSearchType `uri`
   * @fhirPath `StructureDefinition.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("type", ...args);
  }
  /**
   * A vocabulary binding reference
   * @fhirSearchType `reference`
   * @fhirPath `StructureDefinition.snapshot.element.binding.valueSet`
   */
  valueset(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("valueset", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * quantity- or range-valued use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned
 * to the code system
* [CompartmentDefinition](compartmentdefinition.html): A
 * quantity- or range-valued use context assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned
 * to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or
 * range-valued use context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use
 * context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A quantity- or range-valued use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use
 * context assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A quantity- or range-valued use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use
 * context assigned to the structure definition
*
 * [StructureMap](structuremap.html): A quantity- or range-valued use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or
 * range-valued use context assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to
 * the value set
 * @fhirSearchType `quantity`
 * @fhirPath `(CapabilityStatement.useContext.value as Quantity) | (CapabilityStatement.useContext.value as Range) | (CodeSystem.useContext.value as Quantity) | (CodeSystem.useContext.value as Range) | (CompartmentDefinition.useContext.value as Quantity) | (CompartmentDefinition.useContext.value as Range) | (ConceptMap.useContext.value as Quantity) | (ConceptMap.useContext.value as Range) | (GraphDefinition.useContext.value as Quantity) | (GraphDefinition.useContext.value as Range) | (ImplementationGuide.useContext.value as Quantity) | (ImplementationGuide.useContext.value as Range) | (MessageDefinition.useContext.value as Quantity) | (MessageDefinition.useContext.value as Range) | (NamingSystem.useContext.value as Quantity) | (NamingSystem.useContext.value as Range) | (OperationDefinition.useContext.value as Quantity) | (OperationDefinition.useContext.value as Range) | (SearchParameter.useContext.value as Quantity) | (SearchParameter.useContext.value as Range) | (StructureDefinition.useContext.value as Quantity) | (StructureDefinition.useContext.value as Range) | (StructureMap.useContext.value as Quantity) | (StructureMap.useContext.value as Range) | (TerminologyCapabilities.useContext.value as Quantity) | (TerminologyCapabilities.useContext.value as Range) | (ValueSet.useContext.value as Quantity) | (ValueSet.useContext.value as Range)`
 */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and quantity- or range-based value assigned to the capability
 * statement
* [CodeSystem](codesystem.html): A use context type and quantity- or
 * range-based value assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context type and
 * quantity- or range-based value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based
 * value assigned to the concept map
* [GraphDefinition](graphdefinition.html): A
 * use context type and quantity- or range-based value assigned to the graph
 * definition
* [ImplementationGuide](implementationguide.html): A use context
 * type and quantity- or range-based value assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and quantity- or
 * range-based value assigned to the message definition
*
 * [NamingSystem](namingsystem.html): A use context type and quantity- or
 * range-based value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and
 * quantity- or range-based value assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A use context type and quantity- or
 * range-based value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and
 * quantity- or range-based value assigned to the structure definition
*
 * [StructureMap](structuremap.html): A use context type and quantity- or
 * range-based value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * quantity- or range-based value assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A use context type and quantity- or range-based value
 * assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and value assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A use context type and value assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A use context
 * type and value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and value assigned to the
 * concept map
* [GraphDefinition](graphdefinition.html): A use context type and
 * value assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context type and value
 * assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and value
 * assigned to the message definition
* [NamingSystem](namingsystem.html): A use
 * context type and value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and value
 * assigned to the operation definition
* [SearchParameter](searchparameter.html):
 * A use context type and value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and value
 * assigned to the structure definition
* [StructureMap](structuremap.html): A use
 * context type and value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * value assigned to the terminology capabilities
* [ValueSet](valueset.html): A
 * use context type and value assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * type of use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A type of use context assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A type of use
 * context assigned to the compartment definition
* [ConceptMap](conceptmap.html):
 * A type of use context assigned to the concept map
*
 * [GraphDefinition](graphdefinition.html): A type of use context assigned to the
 * graph definition
* [ImplementationGuide](implementationguide.html): A type of
 * use context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A type of use context assigned to
 * the message definition
* [NamingSystem](namingsystem.html): A type of use
 * context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A type of use context assigned
 * to the operation definition
* [SearchParameter](searchparameter.html): A type
 * of use context assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A type of use context assigned
 * to the structure definition
* [StructureMap](structuremap.html): A type of use
 * context assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A type of use context
 * assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of
 * use context assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.useContext.code | CodeSystem.useContext.code | CompartmentDefinition.useContext.code | ConceptMap.useContext.code | GraphDefinition.useContext.code | ImplementationGuide.useContext.code | MessageDefinition.useContext.code | NamingSystem.useContext.code | OperationDefinition.useContext.code | SearchParameter.useContext.code | StructureDefinition.useContext.code | StructureMap.useContext.code | TerminologyCapabilities.useContext.code | ValueSet.useContext.code`
 */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context assigned to the capability statement
* [CodeSystem](codesystem.html): A
 * use context assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to
 * the compartment definition
* [ConceptMap](conceptmap.html): A use context
 * assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use
 * context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context assigned to the
 * implementation guide
* [MessageDefinition](messagedefinition.html): A use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context assigned to the
 * operation definition
* [SearchParameter](searchparameter.html): A use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context assigned to the
 * structure definition
* [StructureMap](structuremap.html): A use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned
 * to the terminology capabilities
* [ValueSet](valueset.html): A use context
 * assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `(CapabilityStatement.useContext.value as CodeableConcept) | (CodeSystem.useContext.value as CodeableConcept) | (CompartmentDefinition.useContext.value as CodeableConcept) | (ConceptMap.useContext.value as CodeableConcept) | (GraphDefinition.useContext.value as CodeableConcept) | (ImplementationGuide.useContext.value as CodeableConcept) | (MessageDefinition.useContext.value as CodeableConcept) | (NamingSystem.useContext.value as CodeableConcept) | (OperationDefinition.useContext.value as CodeableConcept) | (SearchParameter.useContext.value as CodeableConcept) | (StructureDefinition.useContext.value as CodeableConcept) | (StructureMap.useContext.value as CodeableConcept) | (TerminologyCapabilities.useContext.value as CodeableConcept) | (ValueSet.useContext.value as CodeableConcept)`
 */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * capability statement publication date
* [CodeSystem](codesystem.html): The code
 * system publication date
* [CompartmentDefinition](compartmentdefinition.html):
 * The compartment definition publication date
* [ConceptMap](conceptmap.html):
 * The concept map publication date
* [GraphDefinition](graphdefinition.html): The
 * graph definition publication date
*
 * [ImplementationGuide](implementationguide.html): The implementation guide
 * publication date
* [MessageDefinition](messagedefinition.html): The message
 * definition publication date
* [NamingSystem](namingsystem.html): The naming
 * system publication date
* [OperationDefinition](operationdefinition.html): The
 * operation definition publication date
*
 * [SearchParameter](searchparameter.html): The search parameter publication
 * date
* [StructureDefinition](structuredefinition.html): The structure
 * definition publication date
* [StructureMap](structuremap.html): The structure
 * map publication date
* [TerminologyCapabilities](terminologycapabilities.html):
 * The terminology capabilities publication date
* [ValueSet](valueset.html): The
 * value set publication date
 * @fhirSearchType `date`
 * @fhirPath `CapabilityStatement.date | CodeSystem.date | CompartmentDefinition.date | ConceptMap.date | GraphDefinition.date | ImplementationGuide.date | MessageDefinition.date | NamingSystem.date | OperationDefinition.date | SearchParameter.date | StructureDefinition.date | StructureMap.date | TerminologyCapabilities.date | ValueSet.date`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * description of the capability statement
* [CodeSystem](codesystem.html): The
 * description of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The description of the
 * compartment definition
* [ConceptMap](conceptmap.html): The description of the
 * concept map
* [GraphDefinition](graphdefinition.html): The description of the
 * graph definition
* [ImplementationGuide](implementationguide.html): The
 * description of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The description of the message
 * definition
* [NamingSystem](namingsystem.html): The description of the naming
 * system
* [OperationDefinition](operationdefinition.html): The description of
 * the operation definition
* [SearchParameter](searchparameter.html): The
 * description of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The description of the
 * structure definition
* [StructureMap](structuremap.html): The description of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The description of the terminology capabilities
* [ValueSet](valueset.html):
 * The description of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.description | CodeSystem.description | CompartmentDefinition.description | ConceptMap.description | GraphDefinition.description | ImplementationGuide.description | MessageDefinition.description | NamingSystem.description | OperationDefinition.description | SearchParameter.description | StructureDefinition.description | StructureMap.description | TerminologyCapabilities.description | ValueSet.description`
 */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
 * Multiple Resources: 

* [CodeSystem](codesystem.html): External identifier for
 * the code system
* [ConceptMap](conceptmap.html): External identifier for the
 * concept map
* [MessageDefinition](messagedefinition.html): External identifier
 * for the message definition
* [StructureDefinition](structuredefinition.html):
 * External identifier for the structure definition
*
 * [StructureMap](structuremap.html): External identifier for the structure map
*
 * [ValueSet](valueset.html): External identifier for the value set
 * @fhirSearchType `token`
 * @fhirPath `CodeSystem.identifier | ConceptMap.identifier | MessageDefinition.identifier | StructureDefinition.identifier | StructureMap.identifier | ValueSet.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Intended jurisdiction for the capability statement
*
 * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
*
 * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
*
 * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph
 * definition
* [ImplementationGuide](implementationguide.html): Intended
 * jurisdiction for the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the
 * message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction
 * for the naming system
* [OperationDefinition](operationdefinition.html):
 * Intended jurisdiction for the operation definition
*
 * [SearchParameter](searchparameter.html): Intended jurisdiction for the search
 * parameter
* [StructureDefinition](structuredefinition.html): Intended
 * jurisdiction for the structure definition
* [StructureMap](structuremap.html):
 * Intended jurisdiction for the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction
 * for the terminology capabilities
* [ValueSet](valueset.html): Intended
 * jurisdiction for the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.jurisdiction | CodeSystem.jurisdiction | ConceptMap.jurisdiction | GraphDefinition.jurisdiction | ImplementationGuide.jurisdiction | MessageDefinition.jurisdiction | NamingSystem.jurisdiction | OperationDefinition.jurisdiction | SearchParameter.jurisdiction | StructureDefinition.jurisdiction | StructureMap.jurisdiction | TerminologyCapabilities.jurisdiction | ValueSet.jurisdiction`
 */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Computationally friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): Computationally friendly name of the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): Computationally
 * friendly name of the compartment definition
* [ConceptMap](conceptmap.html):
 * Computationally friendly name of the concept map
*
 * [GraphDefinition](graphdefinition.html): Computationally friendly name of the
 * graph definition
* [ImplementationGuide](implementationguide.html):
 * Computationally friendly name of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Computationally friendly name of
 * the message definition
* [NamingSystem](namingsystem.html): Computationally
 * friendly name of the naming system
*
 * [OperationDefinition](operationdefinition.html): Computationally friendly name
 * of the operation definition
* [SearchParameter](searchparameter.html):
 * Computationally friendly name of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Computationally friendly name
 * of the structure definition
* [StructureMap](structuremap.html):
 * Computationally friendly name of the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Computationally
 * friendly name of the terminology capabilities
* [ValueSet](valueset.html):
 * Computationally friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.name | CodeSystem.name | CompartmentDefinition.name | ConceptMap.name | GraphDefinition.name | ImplementationGuide.name | MessageDefinition.name | NamingSystem.name | OperationDefinition.name | SearchParameter.name | StructureDefinition.name | StructureMap.name | TerminologyCapabilities.name | ValueSet.name`
 */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name
 * of the publisher of the capability statement
* [CodeSystem](codesystem.html):
 * Name of the publisher of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of
 * the compartment definition
* [ConceptMap](conceptmap.html): Name of the
 * publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of
 * the publisher of the graph definition
*
 * [ImplementationGuide](implementationguide.html): Name of the publisher of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): Name of the
 * publisher of the message definition
* [NamingSystem](namingsystem.html): Name
 * of the publisher of the naming system
*
 * [OperationDefinition](operationdefinition.html): Name of the publisher of the
 * operation definition
* [SearchParameter](searchparameter.html): Name of the
 * publisher of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Name of the publisher of the
 * structure definition
* [StructureMap](structuremap.html): Name of the publisher
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * Name of the publisher of the terminology capabilities
*
 * [ValueSet](valueset.html): Name of the publisher of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.publisher | CodeSystem.publisher | CompartmentDefinition.publisher | ConceptMap.publisher | GraphDefinition.publisher | ImplementationGuide.publisher | MessageDefinition.publisher | NamingSystem.publisher | OperationDefinition.publisher | SearchParameter.publisher | StructureDefinition.publisher | StructureMap.publisher | TerminologyCapabilities.publisher | ValueSet.publisher`
 */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * current status of the capability statement
* [CodeSystem](codesystem.html): The
 * current status of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The current status of the
 * compartment definition
* [ConceptMap](conceptmap.html): The current status of
 * the concept map
* [GraphDefinition](graphdefinition.html): The current status
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * current status of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The current status of the message
 * definition
* [NamingSystem](namingsystem.html): The current status of the
 * naming system
* [OperationDefinition](operationdefinition.html): The current
 * status of the operation definition
* [SearchParameter](searchparameter.html):
 * The current status of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The current status of the
 * structure definition
* [StructureMap](structuremap.html): The current status of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The current status of the terminology capabilities
* [ValueSet](valueset.html):
 * The current status of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.status | CodeSystem.status | CompartmentDefinition.status | ConceptMap.status | GraphDefinition.status | ImplementationGuide.status | MessageDefinition.status | NamingSystem.status | OperationDefinition.status | SearchParameter.status | StructureDefinition.status | StructureMap.status | TerminologyCapabilities.status | ValueSet.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * human-friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): The human-friendly name of the code system
*
 * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
*
 * [ImplementationGuide](implementationguide.html): The human-friendly name of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The
 * human-friendly name of the message definition
*
 * [OperationDefinition](operationdefinition.html): The human-friendly name of the
 * operation definition
* [StructureDefinition](structuredefinition.html): The
 * human-friendly name of the structure definition
*
 * [StructureMap](structuremap.html): The human-friendly name of the structure
 * map
* [TerminologyCapabilities](terminologycapabilities.html): The
 * human-friendly name of the terminology capabilities
*
 * [ValueSet](valueset.html): The human-friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.title | CodeSystem.title | ConceptMap.title | ImplementationGuide.title | MessageDefinition.title | OperationDefinition.title | StructureDefinition.title | StructureMap.title | TerminologyCapabilities.title | ValueSet.title`
 */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * uri that identifies the capability statement
* [CodeSystem](codesystem.html):
 * The uri that identifies the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the
 * compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies
 * the concept map
* [GraphDefinition](graphdefinition.html): The uri that
 * identifies the graph definition
*
 * [ImplementationGuide](implementationguide.html): The uri that identifies the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The uri
 * that identifies the message definition
*
 * [OperationDefinition](operationdefinition.html): The uri that identifies the
 * operation definition
* [SearchParameter](searchparameter.html): The uri that
 * identifies the search parameter
*
 * [StructureDefinition](structuredefinition.html): The uri that identifies the
 * structure definition
* [StructureMap](structuremap.html): The uri that
 * identifies the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies
 * the terminology capabilities
* [ValueSet](valueset.html): The uri that
 * identifies the value set
 * @fhirSearchType `uri`
 * @fhirPath `CapabilityStatement.url | CodeSystem.url | CompartmentDefinition.url | ConceptMap.url | GraphDefinition.url | ImplementationGuide.url | MessageDefinition.url | OperationDefinition.url | SearchParameter.url | StructureDefinition.url | StructureMap.url | TerminologyCapabilities.url | ValueSet.url`
 */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * business version of the capability statement
* [CodeSystem](codesystem.html):
 * The business version of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The business version of the
 * compartment definition
* [ConceptMap](conceptmap.html): The business version of
 * the concept map
* [GraphDefinition](graphdefinition.html): The business version
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * business version of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The business version of the message
 * definition
* [OperationDefinition](operationdefinition.html): The business
 * version of the operation definition
* [SearchParameter](searchparameter.html):
 * The business version of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The business version of the
 * structure definition
* [StructureMap](structuremap.html): The business version
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The business version of the terminology capabilities
*
 * [ValueSet](valueset.html): The business version of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.version | CodeSystem.version | CompartmentDefinition.version | ConceptMap.version | GraphDefinition.version | ImplementationGuide.version | MessageDefinition.version | OperationDefinition.version | SearchParameter.version | StructureDefinition.version | StructureMap.version | TerminologyCapabilities.version | ValueSet.version`
 */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | StructureDefinitionSortOrder
      | StructureDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type StructureMapSortOrder =
  | DomainResourceSortOrder
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class StructureMapFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "StructureMap";

  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * quantity- or range-valued use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned
 * to the code system
* [CompartmentDefinition](compartmentdefinition.html): A
 * quantity- or range-valued use context assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned
 * to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or
 * range-valued use context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use
 * context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A quantity- or range-valued use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use
 * context assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A quantity- or range-valued use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use
 * context assigned to the structure definition
*
 * [StructureMap](structuremap.html): A quantity- or range-valued use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or
 * range-valued use context assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to
 * the value set
 * @fhirSearchType `quantity`
 * @fhirPath `(CapabilityStatement.useContext.value as Quantity) | (CapabilityStatement.useContext.value as Range) | (CodeSystem.useContext.value as Quantity) | (CodeSystem.useContext.value as Range) | (CompartmentDefinition.useContext.value as Quantity) | (CompartmentDefinition.useContext.value as Range) | (ConceptMap.useContext.value as Quantity) | (ConceptMap.useContext.value as Range) | (GraphDefinition.useContext.value as Quantity) | (GraphDefinition.useContext.value as Range) | (ImplementationGuide.useContext.value as Quantity) | (ImplementationGuide.useContext.value as Range) | (MessageDefinition.useContext.value as Quantity) | (MessageDefinition.useContext.value as Range) | (NamingSystem.useContext.value as Quantity) | (NamingSystem.useContext.value as Range) | (OperationDefinition.useContext.value as Quantity) | (OperationDefinition.useContext.value as Range) | (SearchParameter.useContext.value as Quantity) | (SearchParameter.useContext.value as Range) | (StructureDefinition.useContext.value as Quantity) | (StructureDefinition.useContext.value as Range) | (StructureMap.useContext.value as Quantity) | (StructureMap.useContext.value as Range) | (TerminologyCapabilities.useContext.value as Quantity) | (TerminologyCapabilities.useContext.value as Range) | (ValueSet.useContext.value as Quantity) | (ValueSet.useContext.value as Range)`
 */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and quantity- or range-based value assigned to the capability
 * statement
* [CodeSystem](codesystem.html): A use context type and quantity- or
 * range-based value assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context type and
 * quantity- or range-based value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based
 * value assigned to the concept map
* [GraphDefinition](graphdefinition.html): A
 * use context type and quantity- or range-based value assigned to the graph
 * definition
* [ImplementationGuide](implementationguide.html): A use context
 * type and quantity- or range-based value assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and quantity- or
 * range-based value assigned to the message definition
*
 * [NamingSystem](namingsystem.html): A use context type and quantity- or
 * range-based value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and
 * quantity- or range-based value assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A use context type and quantity- or
 * range-based value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and
 * quantity- or range-based value assigned to the structure definition
*
 * [StructureMap](structuremap.html): A use context type and quantity- or
 * range-based value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * quantity- or range-based value assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A use context type and quantity- or range-based value
 * assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and value assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A use context type and value assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A use context
 * type and value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and value assigned to the
 * concept map
* [GraphDefinition](graphdefinition.html): A use context type and
 * value assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context type and value
 * assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and value
 * assigned to the message definition
* [NamingSystem](namingsystem.html): A use
 * context type and value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and value
 * assigned to the operation definition
* [SearchParameter](searchparameter.html):
 * A use context type and value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and value
 * assigned to the structure definition
* [StructureMap](structuremap.html): A use
 * context type and value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * value assigned to the terminology capabilities
* [ValueSet](valueset.html): A
 * use context type and value assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * type of use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A type of use context assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A type of use
 * context assigned to the compartment definition
* [ConceptMap](conceptmap.html):
 * A type of use context assigned to the concept map
*
 * [GraphDefinition](graphdefinition.html): A type of use context assigned to the
 * graph definition
* [ImplementationGuide](implementationguide.html): A type of
 * use context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A type of use context assigned to
 * the message definition
* [NamingSystem](namingsystem.html): A type of use
 * context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A type of use context assigned
 * to the operation definition
* [SearchParameter](searchparameter.html): A type
 * of use context assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A type of use context assigned
 * to the structure definition
* [StructureMap](structuremap.html): A type of use
 * context assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A type of use context
 * assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of
 * use context assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.useContext.code | CodeSystem.useContext.code | CompartmentDefinition.useContext.code | ConceptMap.useContext.code | GraphDefinition.useContext.code | ImplementationGuide.useContext.code | MessageDefinition.useContext.code | NamingSystem.useContext.code | OperationDefinition.useContext.code | SearchParameter.useContext.code | StructureDefinition.useContext.code | StructureMap.useContext.code | TerminologyCapabilities.useContext.code | ValueSet.useContext.code`
 */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context assigned to the capability statement
* [CodeSystem](codesystem.html): A
 * use context assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to
 * the compartment definition
* [ConceptMap](conceptmap.html): A use context
 * assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use
 * context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context assigned to the
 * implementation guide
* [MessageDefinition](messagedefinition.html): A use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context assigned to the
 * operation definition
* [SearchParameter](searchparameter.html): A use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context assigned to the
 * structure definition
* [StructureMap](structuremap.html): A use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned
 * to the terminology capabilities
* [ValueSet](valueset.html): A use context
 * assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `(CapabilityStatement.useContext.value as CodeableConcept) | (CodeSystem.useContext.value as CodeableConcept) | (CompartmentDefinition.useContext.value as CodeableConcept) | (ConceptMap.useContext.value as CodeableConcept) | (GraphDefinition.useContext.value as CodeableConcept) | (ImplementationGuide.useContext.value as CodeableConcept) | (MessageDefinition.useContext.value as CodeableConcept) | (NamingSystem.useContext.value as CodeableConcept) | (OperationDefinition.useContext.value as CodeableConcept) | (SearchParameter.useContext.value as CodeableConcept) | (StructureDefinition.useContext.value as CodeableConcept) | (StructureMap.useContext.value as CodeableConcept) | (TerminologyCapabilities.useContext.value as CodeableConcept) | (ValueSet.useContext.value as CodeableConcept)`
 */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * capability statement publication date
* [CodeSystem](codesystem.html): The code
 * system publication date
* [CompartmentDefinition](compartmentdefinition.html):
 * The compartment definition publication date
* [ConceptMap](conceptmap.html):
 * The concept map publication date
* [GraphDefinition](graphdefinition.html): The
 * graph definition publication date
*
 * [ImplementationGuide](implementationguide.html): The implementation guide
 * publication date
* [MessageDefinition](messagedefinition.html): The message
 * definition publication date
* [NamingSystem](namingsystem.html): The naming
 * system publication date
* [OperationDefinition](operationdefinition.html): The
 * operation definition publication date
*
 * [SearchParameter](searchparameter.html): The search parameter publication
 * date
* [StructureDefinition](structuredefinition.html): The structure
 * definition publication date
* [StructureMap](structuremap.html): The structure
 * map publication date
* [TerminologyCapabilities](terminologycapabilities.html):
 * The terminology capabilities publication date
* [ValueSet](valueset.html): The
 * value set publication date
 * @fhirSearchType `date`
 * @fhirPath `CapabilityStatement.date | CodeSystem.date | CompartmentDefinition.date | ConceptMap.date | GraphDefinition.date | ImplementationGuide.date | MessageDefinition.date | NamingSystem.date | OperationDefinition.date | SearchParameter.date | StructureDefinition.date | StructureMap.date | TerminologyCapabilities.date | ValueSet.date`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * description of the capability statement
* [CodeSystem](codesystem.html): The
 * description of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The description of the
 * compartment definition
* [ConceptMap](conceptmap.html): The description of the
 * concept map
* [GraphDefinition](graphdefinition.html): The description of the
 * graph definition
* [ImplementationGuide](implementationguide.html): The
 * description of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The description of the message
 * definition
* [NamingSystem](namingsystem.html): The description of the naming
 * system
* [OperationDefinition](operationdefinition.html): The description of
 * the operation definition
* [SearchParameter](searchparameter.html): The
 * description of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The description of the
 * structure definition
* [StructureMap](structuremap.html): The description of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The description of the terminology capabilities
* [ValueSet](valueset.html):
 * The description of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.description | CodeSystem.description | CompartmentDefinition.description | ConceptMap.description | GraphDefinition.description | ImplementationGuide.description | MessageDefinition.description | NamingSystem.description | OperationDefinition.description | SearchParameter.description | StructureDefinition.description | StructureMap.description | TerminologyCapabilities.description | ValueSet.description`
 */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
 * Multiple Resources: 

* [CodeSystem](codesystem.html): External identifier for
 * the code system
* [ConceptMap](conceptmap.html): External identifier for the
 * concept map
* [MessageDefinition](messagedefinition.html): External identifier
 * for the message definition
* [StructureDefinition](structuredefinition.html):
 * External identifier for the structure definition
*
 * [StructureMap](structuremap.html): External identifier for the structure map
*
 * [ValueSet](valueset.html): External identifier for the value set
 * @fhirSearchType `token`
 * @fhirPath `CodeSystem.identifier | ConceptMap.identifier | MessageDefinition.identifier | StructureDefinition.identifier | StructureMap.identifier | ValueSet.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Intended jurisdiction for the capability statement
*
 * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
*
 * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
*
 * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph
 * definition
* [ImplementationGuide](implementationguide.html): Intended
 * jurisdiction for the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the
 * message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction
 * for the naming system
* [OperationDefinition](operationdefinition.html):
 * Intended jurisdiction for the operation definition
*
 * [SearchParameter](searchparameter.html): Intended jurisdiction for the search
 * parameter
* [StructureDefinition](structuredefinition.html): Intended
 * jurisdiction for the structure definition
* [StructureMap](structuremap.html):
 * Intended jurisdiction for the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction
 * for the terminology capabilities
* [ValueSet](valueset.html): Intended
 * jurisdiction for the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.jurisdiction | CodeSystem.jurisdiction | ConceptMap.jurisdiction | GraphDefinition.jurisdiction | ImplementationGuide.jurisdiction | MessageDefinition.jurisdiction | NamingSystem.jurisdiction | OperationDefinition.jurisdiction | SearchParameter.jurisdiction | StructureDefinition.jurisdiction | StructureMap.jurisdiction | TerminologyCapabilities.jurisdiction | ValueSet.jurisdiction`
 */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Computationally friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): Computationally friendly name of the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): Computationally
 * friendly name of the compartment definition
* [ConceptMap](conceptmap.html):
 * Computationally friendly name of the concept map
*
 * [GraphDefinition](graphdefinition.html): Computationally friendly name of the
 * graph definition
* [ImplementationGuide](implementationguide.html):
 * Computationally friendly name of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Computationally friendly name of
 * the message definition
* [NamingSystem](namingsystem.html): Computationally
 * friendly name of the naming system
*
 * [OperationDefinition](operationdefinition.html): Computationally friendly name
 * of the operation definition
* [SearchParameter](searchparameter.html):
 * Computationally friendly name of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Computationally friendly name
 * of the structure definition
* [StructureMap](structuremap.html):
 * Computationally friendly name of the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Computationally
 * friendly name of the terminology capabilities
* [ValueSet](valueset.html):
 * Computationally friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.name | CodeSystem.name | CompartmentDefinition.name | ConceptMap.name | GraphDefinition.name | ImplementationGuide.name | MessageDefinition.name | NamingSystem.name | OperationDefinition.name | SearchParameter.name | StructureDefinition.name | StructureMap.name | TerminologyCapabilities.name | ValueSet.name`
 */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name
 * of the publisher of the capability statement
* [CodeSystem](codesystem.html):
 * Name of the publisher of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of
 * the compartment definition
* [ConceptMap](conceptmap.html): Name of the
 * publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of
 * the publisher of the graph definition
*
 * [ImplementationGuide](implementationguide.html): Name of the publisher of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): Name of the
 * publisher of the message definition
* [NamingSystem](namingsystem.html): Name
 * of the publisher of the naming system
*
 * [OperationDefinition](operationdefinition.html): Name of the publisher of the
 * operation definition
* [SearchParameter](searchparameter.html): Name of the
 * publisher of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Name of the publisher of the
 * structure definition
* [StructureMap](structuremap.html): Name of the publisher
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * Name of the publisher of the terminology capabilities
*
 * [ValueSet](valueset.html): Name of the publisher of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.publisher | CodeSystem.publisher | CompartmentDefinition.publisher | ConceptMap.publisher | GraphDefinition.publisher | ImplementationGuide.publisher | MessageDefinition.publisher | NamingSystem.publisher | OperationDefinition.publisher | SearchParameter.publisher | StructureDefinition.publisher | StructureMap.publisher | TerminologyCapabilities.publisher | ValueSet.publisher`
 */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * current status of the capability statement
* [CodeSystem](codesystem.html): The
 * current status of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The current status of the
 * compartment definition
* [ConceptMap](conceptmap.html): The current status of
 * the concept map
* [GraphDefinition](graphdefinition.html): The current status
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * current status of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The current status of the message
 * definition
* [NamingSystem](namingsystem.html): The current status of the
 * naming system
* [OperationDefinition](operationdefinition.html): The current
 * status of the operation definition
* [SearchParameter](searchparameter.html):
 * The current status of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The current status of the
 * structure definition
* [StructureMap](structuremap.html): The current status of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The current status of the terminology capabilities
* [ValueSet](valueset.html):
 * The current status of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.status | CodeSystem.status | CompartmentDefinition.status | ConceptMap.status | GraphDefinition.status | ImplementationGuide.status | MessageDefinition.status | NamingSystem.status | OperationDefinition.status | SearchParameter.status | StructureDefinition.status | StructureMap.status | TerminologyCapabilities.status | ValueSet.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * human-friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): The human-friendly name of the code system
*
 * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
*
 * [ImplementationGuide](implementationguide.html): The human-friendly name of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The
 * human-friendly name of the message definition
*
 * [OperationDefinition](operationdefinition.html): The human-friendly name of the
 * operation definition
* [StructureDefinition](structuredefinition.html): The
 * human-friendly name of the structure definition
*
 * [StructureMap](structuremap.html): The human-friendly name of the structure
 * map
* [TerminologyCapabilities](terminologycapabilities.html): The
 * human-friendly name of the terminology capabilities
*
 * [ValueSet](valueset.html): The human-friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.title | CodeSystem.title | ConceptMap.title | ImplementationGuide.title | MessageDefinition.title | OperationDefinition.title | StructureDefinition.title | StructureMap.title | TerminologyCapabilities.title | ValueSet.title`
 */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * uri that identifies the capability statement
* [CodeSystem](codesystem.html):
 * The uri that identifies the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the
 * compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies
 * the concept map
* [GraphDefinition](graphdefinition.html): The uri that
 * identifies the graph definition
*
 * [ImplementationGuide](implementationguide.html): The uri that identifies the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The uri
 * that identifies the message definition
*
 * [OperationDefinition](operationdefinition.html): The uri that identifies the
 * operation definition
* [SearchParameter](searchparameter.html): The uri that
 * identifies the search parameter
*
 * [StructureDefinition](structuredefinition.html): The uri that identifies the
 * structure definition
* [StructureMap](structuremap.html): The uri that
 * identifies the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies
 * the terminology capabilities
* [ValueSet](valueset.html): The uri that
 * identifies the value set
 * @fhirSearchType `uri`
 * @fhirPath `CapabilityStatement.url | CodeSystem.url | CompartmentDefinition.url | ConceptMap.url | GraphDefinition.url | ImplementationGuide.url | MessageDefinition.url | OperationDefinition.url | SearchParameter.url | StructureDefinition.url | StructureMap.url | TerminologyCapabilities.url | ValueSet.url`
 */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * business version of the capability statement
* [CodeSystem](codesystem.html):
 * The business version of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The business version of the
 * compartment definition
* [ConceptMap](conceptmap.html): The business version of
 * the concept map
* [GraphDefinition](graphdefinition.html): The business version
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * business version of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The business version of the message
 * definition
* [OperationDefinition](operationdefinition.html): The business
 * version of the operation definition
* [SearchParameter](searchparameter.html):
 * The business version of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The business version of the
 * structure definition
* [StructureMap](structuremap.html): The business version
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The business version of the terminology capabilities
*
 * [ValueSet](valueset.html): The business version of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.version | CodeSystem.version | CompartmentDefinition.version | ConceptMap.version | GraphDefinition.version | ImplementationGuide.version | MessageDefinition.version | OperationDefinition.version | SearchParameter.version | StructureDefinition.version | StructureMap.version | TerminologyCapabilities.version | ValueSet.version`
 */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | StructureMapSortOrder
      | StructureMapSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type SubscriptionSortOrder =
  | DomainResourceSortOrder
  | "contact"
  | "-contact"
  | "criteria"
  | "-criteria"
  | "payload"
  | "-payload"
  | "status"
  | "-status"
  | "type"
  | "-type"
  | "url"
  | "-url";

export class SubscriptionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Subscription";

  /**
   * Contact details for the subscription
   * @fhirSearchType `token`
   * @fhirPath `Subscription.contact`
   */
  contact(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("contact", ...args);
  }
  /**
   * The search rules used to determine when to send a notification
   * @fhirSearchType `string`
   * @fhirPath `Subscription.criteria`
   */
  criteria(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("criteria", ...args);
  }
  /**
   * The mime-type of the notification payload
   * @fhirSearchType `token`
   * @fhirPath `Subscription.channel.payload`
   */
  payload(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("payload", ...args);
  }
  /**
   * The current state of the subscription
   * @fhirSearchType `token`
   * @fhirPath `Subscription.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The type of channel for the sent notifications
   * @fhirSearchType `token`
   * @fhirPath `Subscription.channel.type`
   */
  type(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("type", ...args);
  }
  /**
   * The uri that will receive the notifications
   * @fhirSearchType `uri`
   * @fhirPath `Subscription.channel.endpoint`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SubscriptionSortOrder
      | SubscriptionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type SubscriptionStatusSortOrder = DomainResourceSortOrder;

export class SubscriptionStatusFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "SubscriptionStatus";

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SubscriptionStatusSortOrder
      | SubscriptionStatusSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type SubscriptionTopicSortOrder =
  | DomainResourceSortOrder
  | "date"
  | "-date"
  | "derived-or-self"
  | "-derived-or-self"
  | "identifier"
  | "-identifier"
  | "resource"
  | "-resource"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "trigger-description"
  | "-trigger-description"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class SubscriptionTopicFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "SubscriptionTopic";

  /**
   * Date status first applied
   * @fhirSearchType `date`
   * @fhirPath `SubscriptionTopic.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * A server defined search that matches either the url or derivedFrom
   * @fhirSearchType `uri`
   * @fhirPath `SubscriptionTopic.url | SubscriptionTopic.derivedFrom`
   */
  derivedOrSelf(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("derived-or-self", ...args);
  }
  /**
   * Business Identifier for SubscriptionTopic
   * @fhirSearchType `token`
   * @fhirPath `SubscriptionTopic.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Allowed Data type or Resource (reference to definition) for this definition,
   * searches resourceTrigger, eventTrigger, and notificationShape for matches.
   * @fhirSearchType `uri`
   * @fhirPath `SubscriptionTopic.resourceTrigger.resource`
   */
  resource(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("resource", ...args);
  }
  /**
   * draft | active | retired | unknown
   * @fhirSearchType `token`
   * @fhirPath `SubscriptionTopic.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Name for this SubscriptionTopic (Human friendly)
   * @fhirSearchType `string`
   * @fhirPath `SubscriptionTopic.title`
   */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
   * Text representation of the trigger
   * @fhirSearchType `string`
   * @fhirPath `SubscriptionTopic.resourceTrigger.description`
   */
  triggerDescription(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("trigger-description", ...args);
  }
  /**
   * Logical canonical URL to reference this SubscriptionTopic (globally unique)
   * @fhirSearchType `uri`
   * @fhirPath `SubscriptionTopic.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
   * Business version of the SubscriptionTopic
   * @fhirSearchType `token`
   * @fhirPath `SubscriptionTopic.version`
   */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SubscriptionTopicSortOrder
      | SubscriptionTopicSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type SubstanceSortOrder =
  | DomainResourceSortOrder
  | "category"
  | "-category"
  | "code"
  | "-code"
  | "container-identifier"
  | "-container-identifier"
  | "expiry"
  | "-expiry"
  | "identifier"
  | "-identifier"
  | "quantity"
  | "-quantity"
  | "status"
  | "-status"
  | "substance-reference"
  | "-substance-reference";

export class SubstanceFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Substance";

  /**
   * The category of the substance
   * @fhirSearchType `token`
   * @fhirPath `Substance.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * The code of the substance or ingredient
   * @fhirSearchType `token`
   * @fhirPath `Substance.code | (Substance.ingredient.substance as CodeableConcept)`
   */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
   * Identifier of the package/container
   * @fhirSearchType `token`
   * @fhirPath `Substance.instance.identifier`
   */
  containerIdentifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("container-identifier", ...args);
  }
  /**
   * Expiry date of package or container of substance
   * @fhirSearchType `date`
   * @fhirPath `Substance.instance.expiry`
   */
  expiry(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("expiry", ...args);
  }
  /**
   * Unique identifier for the substance
   * @fhirSearchType `token`
   * @fhirPath `Substance.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Amount of substance in the package
   * @fhirSearchType `quantity`
   * @fhirPath `Substance.instance.quantity`
   */
  quantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("quantity", ...args);
  }
  /**
   * active | inactive | entered-in-error
   * @fhirSearchType `token`
   * @fhirPath `Substance.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * A component of the substance
   * @fhirSearchType `reference`
   * @fhirPath `(Substance.ingredient.substance as Reference)`
   */
  substanceReference(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("substance-reference", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: SubstanceSortOrder | SubstanceSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type SubstanceDefinitionSortOrder =
  | DomainResourceSortOrder
  | "classification"
  | "-classification"
  | "code"
  | "-code"
  | "domain"
  | "-domain"
  | "identifier"
  | "-identifier"
  | "name"
  | "-name";

export class SubstanceDefinitionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "SubstanceDefinition";

  /**
   * High or low level categorization, e.g. polymer vs. nucleic acid or linear vs.
   * branch chain
   * @fhirSearchType `token`
   * @fhirPath `SubstanceDefinition.classification`
   */
  classification(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("classification", ...args);
  }
  /**
   * The specific code
   * @fhirSearchType `token`
   * @fhirPath `SubstanceDefinition.code.code`
   */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
   * If the substance applies to only human or veterinary use
   * @fhirSearchType `token`
   * @fhirPath `SubstanceDefinition.domain`
   */
  domain(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("domain", ...args);
  }
  /**
   * Identifier by which this substance is known
   * @fhirSearchType `token`
   * @fhirPath `SubstanceDefinition.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The actual name
   * @fhirSearchType `string`
   * @fhirPath `SubstanceDefinition.name.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SubstanceDefinitionSortOrder
      | SubstanceDefinitionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type SupplyDeliverySortOrder =
  | DomainResourceSortOrder
  | "receiver"
  | "-receiver"
  | "status"
  | "-status"
  | "supplier"
  | "-supplier"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class SupplyDeliveryFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "SupplyDelivery";

  /**
   * Who collected the Supply
   * @fhirSearchType `reference`
   * @fhirPath `SupplyDelivery.receiver`
   */
  receiver(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("receiver", ...args);
  }
  /**
   * in-progress | completed | abandoned | entered-in-error
   * @fhirSearchType `token`
   * @fhirPath `SupplyDelivery.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Dispenser
   * @fhirSearchType `reference`
   * @fhirPath `SupplyDelivery.supplier`
   */
  supplier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("supplier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SupplyDeliverySortOrder
      | SupplyDeliverySortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type SupplyRequestSortOrder =
  | DomainResourceSortOrder
  | "category"
  | "-category"
  | "requester"
  | "-requester"
  | "status"
  | "-status"
  | "subject"
  | "-subject"
  | "supplier"
  | "-supplier"
  | "date"
  | "-date"
  | "identifier"
  | "-identifier";

export class SupplyRequestFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "SupplyRequest";

  /**
   * The kind of supply (central, non-stock, etc.)
   * @fhirSearchType `token`
   * @fhirPath `SupplyRequest.category`
   */
  category(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("category", ...args);
  }
  /**
   * Individual making the request
   * @fhirSearchType `reference`
   * @fhirPath `SupplyRequest.requester`
   */
  requester(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("requester", ...args);
  }
  /**
   * draft | active | suspended +
   * @fhirSearchType `token`
   * @fhirPath `SupplyRequest.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * The destination of the supply
   * @fhirSearchType `reference`
   * @fhirPath `SupplyRequest.deliverTo`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }
  /**
   * Who is intended to fulfill the request
   * @fhirSearchType `reference`
   * @fhirPath `SupplyRequest.supplier`
   */
  supplier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("supplier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Date
 * first version of the resource instance was recorded
*
 * [CarePlan](careplan.html): Time period plan covers
* [CareTeam](careteam.html):
 * Time period team covers
* [ClinicalImpression](clinicalimpression.html): When
 * the assessment was documented
* [Composition](composition.html): Composition
 * editing time
* [Consent](consent.html): When this Consent was created or
 * indexed
* [DiagnosticReport](diagnosticreport.html): The clinically relevant
 * time of the report
* [Encounter](encounter.html): A date within the period the
 * Encounter lasted
* [EpisodeOfCare](episodeofcare.html): The provided date
 * search value falls within the episode of care's period
*
 * [FamilyMemberHistory](familymemberhistory.html): When history was recorded or
 * last updated
* [Flag](flag.html): Time period when flag is active
*
 * [Immunization](immunization.html): Vaccination  (non)-Administration Date
*
 * [List](list.html): When the list was prepared
*
 * [Observation](observation.html): Obtained date/time. If the obtained element is
 * a period, a date that falls in the period
* [Procedure](procedure.html): When
 * the procedure was performed
* [RiskAssessment](riskassessment.html): When was
 * assessment made?
* [SupplyRequest](supplyrequest.html): When the request was
 * made
 * @fhirSearchType `date`
 * @fhirPath `AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | SupplyRequestSortOrder
      | SupplyRequestSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type TaskSortOrder =
  | DomainResourceSortOrder
  | "authored-on"
  | "-authored-on"
  | "based-on"
  | "-based-on"
  | "business-status"
  | "-business-status"
  | "code"
  | "-code"
  | "encounter"
  | "-encounter"
  | "focus"
  | "-focus"
  | "group-identifier"
  | "-group-identifier"
  | "identifier"
  | "-identifier"
  | "intent"
  | "-intent"
  | "modified"
  | "-modified"
  | "owner"
  | "-owner"
  | "part-of"
  | "-part-of"
  | "patient"
  | "-patient"
  | "performer"
  | "-performer"
  | "period"
  | "-period"
  | "priority"
  | "-priority"
  | "requester"
  | "-requester"
  | "status"
  | "-status"
  | "subject"
  | "-subject";

export class TaskFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "Task";

  /**
   * Search by creation date
   * @fhirSearchType `date`
   * @fhirPath `Task.authoredOn`
   */
  authoredOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("authored-on", ...args);
  }
  /**
   * Search by requests this task is based on
   * @fhirSearchType `reference`
   * @fhirPath `Task.basedOn`
   */
  basedOn(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("based-on", ...args);
  }
  /**
   * Search by business status
   * @fhirSearchType `token`
   * @fhirPath `Task.businessStatus`
   */
  businessStatus(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("business-status", ...args);
  }
  /**
   * Search by task code
   * @fhirSearchType `token`
   * @fhirPath `Task.code`
   */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
   * Search by encounter
   * @fhirSearchType `reference`
   * @fhirPath `Task.encounter`
   */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
   * Search by task focus
   * @fhirSearchType `reference`
   * @fhirPath `Task.focus`
   */
  focus(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("focus", ...args);
  }
  /**
   * Search by group identifier
   * @fhirSearchType `token`
   * @fhirPath `Task.groupIdentifier`
   */
  groupIdentifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("group-identifier", ...args);
  }
  /**
   * Search for a task instance by its business identifier
   * @fhirSearchType `token`
   * @fhirPath `Task.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Search by task intent
   * @fhirSearchType `token`
   * @fhirPath `Task.intent`
   */
  intent(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("intent", ...args);
  }
  /**
   * Search by last modification date
   * @fhirSearchType `date`
   * @fhirPath `Task.lastModified`
   */
  modified(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("modified", ...args);
  }
  /**
   * Search by task owner
   * @fhirSearchType `reference`
   * @fhirPath `Task.owner`
   */
  owner(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("owner", ...args);
  }
  /**
   * Search by task this task is part of
   * @fhirSearchType `reference`
   * @fhirPath `Task.partOf`
   */
  partOf(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("part-of", ...args);
  }
  /**
   * Search by patient
   * @fhirSearchType `reference`
   * @fhirPath `Task.for.where(resolve() is Patient)`
   */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }
  /**
   * Search by recommended type of performer (e.g., Requester, Performer, Scheduler).
   * @fhirSearchType `token`
   * @fhirPath `Task.performerType`
   */
  performer(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("performer", ...args);
  }
  /**
   * Search by period Task is/was underway
   * @fhirSearchType `date`
   * @fhirPath `Task.executionPeriod`
   */
  period(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("period", ...args);
  }
  /**
   * Search by task priority
   * @fhirSearchType `token`
   * @fhirPath `Task.priority`
   */
  priority(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("priority", ...args);
  }
  /**
   * Search by task requester
   * @fhirSearchType `reference`
   * @fhirPath `Task.requester`
   */
  requester(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("requester", ...args);
  }
  /**
   * Search by task status
   * @fhirSearchType `token`
   * @fhirPath `Task.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * Search by subject
   * @fhirSearchType `reference`
   * @fhirPath `Task.for`
   */
  subject(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("subject", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(parameters: TaskSortOrder | TaskSortOrder[] | null | undefined): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type TerminologyCapabilitiesSortOrder =
  | DomainResourceSortOrder
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class TerminologyCapabilitiesFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "TerminologyCapabilities";

  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * quantity- or range-valued use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned
 * to the code system
* [CompartmentDefinition](compartmentdefinition.html): A
 * quantity- or range-valued use context assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned
 * to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or
 * range-valued use context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use
 * context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A quantity- or range-valued use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use
 * context assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A quantity- or range-valued use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use
 * context assigned to the structure definition
*
 * [StructureMap](structuremap.html): A quantity- or range-valued use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or
 * range-valued use context assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to
 * the value set
 * @fhirSearchType `quantity`
 * @fhirPath `(CapabilityStatement.useContext.value as Quantity) | (CapabilityStatement.useContext.value as Range) | (CodeSystem.useContext.value as Quantity) | (CodeSystem.useContext.value as Range) | (CompartmentDefinition.useContext.value as Quantity) | (CompartmentDefinition.useContext.value as Range) | (ConceptMap.useContext.value as Quantity) | (ConceptMap.useContext.value as Range) | (GraphDefinition.useContext.value as Quantity) | (GraphDefinition.useContext.value as Range) | (ImplementationGuide.useContext.value as Quantity) | (ImplementationGuide.useContext.value as Range) | (MessageDefinition.useContext.value as Quantity) | (MessageDefinition.useContext.value as Range) | (NamingSystem.useContext.value as Quantity) | (NamingSystem.useContext.value as Range) | (OperationDefinition.useContext.value as Quantity) | (OperationDefinition.useContext.value as Range) | (SearchParameter.useContext.value as Quantity) | (SearchParameter.useContext.value as Range) | (StructureDefinition.useContext.value as Quantity) | (StructureDefinition.useContext.value as Range) | (StructureMap.useContext.value as Quantity) | (StructureMap.useContext.value as Range) | (TerminologyCapabilities.useContext.value as Quantity) | (TerminologyCapabilities.useContext.value as Range) | (ValueSet.useContext.value as Quantity) | (ValueSet.useContext.value as Range)`
 */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and quantity- or range-based value assigned to the capability
 * statement
* [CodeSystem](codesystem.html): A use context type and quantity- or
 * range-based value assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context type and
 * quantity- or range-based value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based
 * value assigned to the concept map
* [GraphDefinition](graphdefinition.html): A
 * use context type and quantity- or range-based value assigned to the graph
 * definition
* [ImplementationGuide](implementationguide.html): A use context
 * type and quantity- or range-based value assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and quantity- or
 * range-based value assigned to the message definition
*
 * [NamingSystem](namingsystem.html): A use context type and quantity- or
 * range-based value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and
 * quantity- or range-based value assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A use context type and quantity- or
 * range-based value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and
 * quantity- or range-based value assigned to the structure definition
*
 * [StructureMap](structuremap.html): A use context type and quantity- or
 * range-based value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * quantity- or range-based value assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A use context type and quantity- or range-based value
 * assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and value assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A use context type and value assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A use context
 * type and value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and value assigned to the
 * concept map
* [GraphDefinition](graphdefinition.html): A use context type and
 * value assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context type and value
 * assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and value
 * assigned to the message definition
* [NamingSystem](namingsystem.html): A use
 * context type and value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and value
 * assigned to the operation definition
* [SearchParameter](searchparameter.html):
 * A use context type and value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and value
 * assigned to the structure definition
* [StructureMap](structuremap.html): A use
 * context type and value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * value assigned to the terminology capabilities
* [ValueSet](valueset.html): A
 * use context type and value assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * type of use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A type of use context assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A type of use
 * context assigned to the compartment definition
* [ConceptMap](conceptmap.html):
 * A type of use context assigned to the concept map
*
 * [GraphDefinition](graphdefinition.html): A type of use context assigned to the
 * graph definition
* [ImplementationGuide](implementationguide.html): A type of
 * use context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A type of use context assigned to
 * the message definition
* [NamingSystem](namingsystem.html): A type of use
 * context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A type of use context assigned
 * to the operation definition
* [SearchParameter](searchparameter.html): A type
 * of use context assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A type of use context assigned
 * to the structure definition
* [StructureMap](structuremap.html): A type of use
 * context assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A type of use context
 * assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of
 * use context assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.useContext.code | CodeSystem.useContext.code | CompartmentDefinition.useContext.code | ConceptMap.useContext.code | GraphDefinition.useContext.code | ImplementationGuide.useContext.code | MessageDefinition.useContext.code | NamingSystem.useContext.code | OperationDefinition.useContext.code | SearchParameter.useContext.code | StructureDefinition.useContext.code | StructureMap.useContext.code | TerminologyCapabilities.useContext.code | ValueSet.useContext.code`
 */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context assigned to the capability statement
* [CodeSystem](codesystem.html): A
 * use context assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to
 * the compartment definition
* [ConceptMap](conceptmap.html): A use context
 * assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use
 * context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context assigned to the
 * implementation guide
* [MessageDefinition](messagedefinition.html): A use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context assigned to the
 * operation definition
* [SearchParameter](searchparameter.html): A use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context assigned to the
 * structure definition
* [StructureMap](structuremap.html): A use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned
 * to the terminology capabilities
* [ValueSet](valueset.html): A use context
 * assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `(CapabilityStatement.useContext.value as CodeableConcept) | (CodeSystem.useContext.value as CodeableConcept) | (CompartmentDefinition.useContext.value as CodeableConcept) | (ConceptMap.useContext.value as CodeableConcept) | (GraphDefinition.useContext.value as CodeableConcept) | (ImplementationGuide.useContext.value as CodeableConcept) | (MessageDefinition.useContext.value as CodeableConcept) | (NamingSystem.useContext.value as CodeableConcept) | (OperationDefinition.useContext.value as CodeableConcept) | (SearchParameter.useContext.value as CodeableConcept) | (StructureDefinition.useContext.value as CodeableConcept) | (StructureMap.useContext.value as CodeableConcept) | (TerminologyCapabilities.useContext.value as CodeableConcept) | (ValueSet.useContext.value as CodeableConcept)`
 */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * capability statement publication date
* [CodeSystem](codesystem.html): The code
 * system publication date
* [CompartmentDefinition](compartmentdefinition.html):
 * The compartment definition publication date
* [ConceptMap](conceptmap.html):
 * The concept map publication date
* [GraphDefinition](graphdefinition.html): The
 * graph definition publication date
*
 * [ImplementationGuide](implementationguide.html): The implementation guide
 * publication date
* [MessageDefinition](messagedefinition.html): The message
 * definition publication date
* [NamingSystem](namingsystem.html): The naming
 * system publication date
* [OperationDefinition](operationdefinition.html): The
 * operation definition publication date
*
 * [SearchParameter](searchparameter.html): The search parameter publication
 * date
* [StructureDefinition](structuredefinition.html): The structure
 * definition publication date
* [StructureMap](structuremap.html): The structure
 * map publication date
* [TerminologyCapabilities](terminologycapabilities.html):
 * The terminology capabilities publication date
* [ValueSet](valueset.html): The
 * value set publication date
 * @fhirSearchType `date`
 * @fhirPath `CapabilityStatement.date | CodeSystem.date | CompartmentDefinition.date | ConceptMap.date | GraphDefinition.date | ImplementationGuide.date | MessageDefinition.date | NamingSystem.date | OperationDefinition.date | SearchParameter.date | StructureDefinition.date | StructureMap.date | TerminologyCapabilities.date | ValueSet.date`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * description of the capability statement
* [CodeSystem](codesystem.html): The
 * description of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The description of the
 * compartment definition
* [ConceptMap](conceptmap.html): The description of the
 * concept map
* [GraphDefinition](graphdefinition.html): The description of the
 * graph definition
* [ImplementationGuide](implementationguide.html): The
 * description of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The description of the message
 * definition
* [NamingSystem](namingsystem.html): The description of the naming
 * system
* [OperationDefinition](operationdefinition.html): The description of
 * the operation definition
* [SearchParameter](searchparameter.html): The
 * description of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The description of the
 * structure definition
* [StructureMap](structuremap.html): The description of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The description of the terminology capabilities
* [ValueSet](valueset.html):
 * The description of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.description | CodeSystem.description | CompartmentDefinition.description | ConceptMap.description | GraphDefinition.description | ImplementationGuide.description | MessageDefinition.description | NamingSystem.description | OperationDefinition.description | SearchParameter.description | StructureDefinition.description | StructureMap.description | TerminologyCapabilities.description | ValueSet.description`
 */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Intended jurisdiction for the capability statement
*
 * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
*
 * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
*
 * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph
 * definition
* [ImplementationGuide](implementationguide.html): Intended
 * jurisdiction for the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the
 * message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction
 * for the naming system
* [OperationDefinition](operationdefinition.html):
 * Intended jurisdiction for the operation definition
*
 * [SearchParameter](searchparameter.html): Intended jurisdiction for the search
 * parameter
* [StructureDefinition](structuredefinition.html): Intended
 * jurisdiction for the structure definition
* [StructureMap](structuremap.html):
 * Intended jurisdiction for the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction
 * for the terminology capabilities
* [ValueSet](valueset.html): Intended
 * jurisdiction for the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.jurisdiction | CodeSystem.jurisdiction | ConceptMap.jurisdiction | GraphDefinition.jurisdiction | ImplementationGuide.jurisdiction | MessageDefinition.jurisdiction | NamingSystem.jurisdiction | OperationDefinition.jurisdiction | SearchParameter.jurisdiction | StructureDefinition.jurisdiction | StructureMap.jurisdiction | TerminologyCapabilities.jurisdiction | ValueSet.jurisdiction`
 */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Computationally friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): Computationally friendly name of the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): Computationally
 * friendly name of the compartment definition
* [ConceptMap](conceptmap.html):
 * Computationally friendly name of the concept map
*
 * [GraphDefinition](graphdefinition.html): Computationally friendly name of the
 * graph definition
* [ImplementationGuide](implementationguide.html):
 * Computationally friendly name of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Computationally friendly name of
 * the message definition
* [NamingSystem](namingsystem.html): Computationally
 * friendly name of the naming system
*
 * [OperationDefinition](operationdefinition.html): Computationally friendly name
 * of the operation definition
* [SearchParameter](searchparameter.html):
 * Computationally friendly name of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Computationally friendly name
 * of the structure definition
* [StructureMap](structuremap.html):
 * Computationally friendly name of the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Computationally
 * friendly name of the terminology capabilities
* [ValueSet](valueset.html):
 * Computationally friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.name | CodeSystem.name | CompartmentDefinition.name | ConceptMap.name | GraphDefinition.name | ImplementationGuide.name | MessageDefinition.name | NamingSystem.name | OperationDefinition.name | SearchParameter.name | StructureDefinition.name | StructureMap.name | TerminologyCapabilities.name | ValueSet.name`
 */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name
 * of the publisher of the capability statement
* [CodeSystem](codesystem.html):
 * Name of the publisher of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of
 * the compartment definition
* [ConceptMap](conceptmap.html): Name of the
 * publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of
 * the publisher of the graph definition
*
 * [ImplementationGuide](implementationguide.html): Name of the publisher of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): Name of the
 * publisher of the message definition
* [NamingSystem](namingsystem.html): Name
 * of the publisher of the naming system
*
 * [OperationDefinition](operationdefinition.html): Name of the publisher of the
 * operation definition
* [SearchParameter](searchparameter.html): Name of the
 * publisher of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Name of the publisher of the
 * structure definition
* [StructureMap](structuremap.html): Name of the publisher
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * Name of the publisher of the terminology capabilities
*
 * [ValueSet](valueset.html): Name of the publisher of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.publisher | CodeSystem.publisher | CompartmentDefinition.publisher | ConceptMap.publisher | GraphDefinition.publisher | ImplementationGuide.publisher | MessageDefinition.publisher | NamingSystem.publisher | OperationDefinition.publisher | SearchParameter.publisher | StructureDefinition.publisher | StructureMap.publisher | TerminologyCapabilities.publisher | ValueSet.publisher`
 */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * current status of the capability statement
* [CodeSystem](codesystem.html): The
 * current status of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The current status of the
 * compartment definition
* [ConceptMap](conceptmap.html): The current status of
 * the concept map
* [GraphDefinition](graphdefinition.html): The current status
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * current status of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The current status of the message
 * definition
* [NamingSystem](namingsystem.html): The current status of the
 * naming system
* [OperationDefinition](operationdefinition.html): The current
 * status of the operation definition
* [SearchParameter](searchparameter.html):
 * The current status of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The current status of the
 * structure definition
* [StructureMap](structuremap.html): The current status of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The current status of the terminology capabilities
* [ValueSet](valueset.html):
 * The current status of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.status | CodeSystem.status | CompartmentDefinition.status | ConceptMap.status | GraphDefinition.status | ImplementationGuide.status | MessageDefinition.status | NamingSystem.status | OperationDefinition.status | SearchParameter.status | StructureDefinition.status | StructureMap.status | TerminologyCapabilities.status | ValueSet.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * human-friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): The human-friendly name of the code system
*
 * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
*
 * [ImplementationGuide](implementationguide.html): The human-friendly name of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The
 * human-friendly name of the message definition
*
 * [OperationDefinition](operationdefinition.html): The human-friendly name of the
 * operation definition
* [StructureDefinition](structuredefinition.html): The
 * human-friendly name of the structure definition
*
 * [StructureMap](structuremap.html): The human-friendly name of the structure
 * map
* [TerminologyCapabilities](terminologycapabilities.html): The
 * human-friendly name of the terminology capabilities
*
 * [ValueSet](valueset.html): The human-friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.title | CodeSystem.title | ConceptMap.title | ImplementationGuide.title | MessageDefinition.title | OperationDefinition.title | StructureDefinition.title | StructureMap.title | TerminologyCapabilities.title | ValueSet.title`
 */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * uri that identifies the capability statement
* [CodeSystem](codesystem.html):
 * The uri that identifies the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the
 * compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies
 * the concept map
* [GraphDefinition](graphdefinition.html): The uri that
 * identifies the graph definition
*
 * [ImplementationGuide](implementationguide.html): The uri that identifies the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The uri
 * that identifies the message definition
*
 * [OperationDefinition](operationdefinition.html): The uri that identifies the
 * operation definition
* [SearchParameter](searchparameter.html): The uri that
 * identifies the search parameter
*
 * [StructureDefinition](structuredefinition.html): The uri that identifies the
 * structure definition
* [StructureMap](structuremap.html): The uri that
 * identifies the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies
 * the terminology capabilities
* [ValueSet](valueset.html): The uri that
 * identifies the value set
 * @fhirSearchType `uri`
 * @fhirPath `CapabilityStatement.url | CodeSystem.url | CompartmentDefinition.url | ConceptMap.url | GraphDefinition.url | ImplementationGuide.url | MessageDefinition.url | OperationDefinition.url | SearchParameter.url | StructureDefinition.url | StructureMap.url | TerminologyCapabilities.url | ValueSet.url`
 */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * business version of the capability statement
* [CodeSystem](codesystem.html):
 * The business version of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The business version of the
 * compartment definition
* [ConceptMap](conceptmap.html): The business version of
 * the concept map
* [GraphDefinition](graphdefinition.html): The business version
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * business version of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The business version of the message
 * definition
* [OperationDefinition](operationdefinition.html): The business
 * version of the operation definition
* [SearchParameter](searchparameter.html):
 * The business version of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The business version of the
 * structure definition
* [StructureMap](structuremap.html): The business version
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The business version of the terminology capabilities
*
 * [ValueSet](valueset.html): The business version of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.version | CodeSystem.version | CompartmentDefinition.version | ConceptMap.version | GraphDefinition.version | ImplementationGuide.version | MessageDefinition.version | OperationDefinition.version | SearchParameter.version | StructureDefinition.version | StructureMap.version | TerminologyCapabilities.version | ValueSet.version`
 */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | TerminologyCapabilitiesSortOrder
      | TerminologyCapabilitiesSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type TestReportSortOrder =
  | DomainResourceSortOrder
  | "identifier"
  | "-identifier"
  | "issued"
  | "-issued"
  | "participant"
  | "-participant"
  | "result"
  | "-result"
  | "tester"
  | "-tester"
  | "testscript"
  | "-testscript";

export class TestReportFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "TestReport";

  /**
   * An external identifier for the test report
   * @fhirSearchType `token`
   * @fhirPath `TestReport.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * The test report generation date
   * @fhirSearchType `date`
   * @fhirPath `TestReport.issued`
   */
  issued(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("issued", ...args);
  }
  /**
   * The reference to a participant in the test execution
   * @fhirSearchType `uri`
   * @fhirPath `TestReport.participant.uri`
   */
  participant(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("participant", ...args);
  }
  /**
   * The result disposition of the test execution
   * @fhirSearchType `token`
   * @fhirPath `TestReport.result`
   */
  result(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("result", ...args);
  }
  /**
   * The name of the testing organization
   * @fhirSearchType `string`
   * @fhirPath `TestReport.tester`
   */
  tester(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("tester", ...args);
  }
  /**
   * The test script executed to produce this report
   * @fhirSearchType `reference`
   * @fhirPath `TestReport.testScript`
   */
  testscript(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("testscript", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: TestReportSortOrder | TestReportSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type TestScriptSortOrder =
  | DomainResourceSortOrder
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "testscript-capability"
  | "-testscript-capability"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class TestScriptFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "TestScript";

  /**
   * A quantity- or range-valued use context assigned to the test script
   * @fhirSearchType `quantity`
   * @fhirPath `(TestScript.useContext.value as Quantity) | (TestScript.useContext.value as Range)`
   */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
   * A use context type and quantity- or range-based value assigned to the test
   * script
   * @fhirSearchType `composite`
   * @fhirPath `TestScript.useContext`
   */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
   * A use context type and value assigned to the test script
   * @fhirSearchType `composite`
   * @fhirPath `TestScript.useContext`
   */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
   * A type of use context assigned to the test script
   * @fhirSearchType `token`
   * @fhirPath `TestScript.useContext.code`
   */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
   * A use context assigned to the test script
   * @fhirSearchType `token`
   * @fhirPath `(TestScript.useContext.value as CodeableConcept)`
   */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
   * The test script publication date
   * @fhirSearchType `date`
   * @fhirPath `TestScript.date`
   */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
   * The description of the test script
   * @fhirSearchType `string`
   * @fhirPath `TestScript.description`
   */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
   * External identifier for the test script
   * @fhirSearchType `token`
   * @fhirPath `TestScript.identifier`
   */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
   * Intended jurisdiction for the test script
   * @fhirSearchType `token`
   * @fhirPath `TestScript.jurisdiction`
   */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
   * Computationally friendly name of the test script
   * @fhirSearchType `string`
   * @fhirPath `TestScript.name`
   */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
   * Name of the publisher of the test script
   * @fhirSearchType `string`
   * @fhirPath `TestScript.publisher`
   */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
   * The current status of the test script
   * @fhirSearchType `token`
   * @fhirPath `TestScript.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
   * TestScript required and validated capability
   * @fhirSearchType `string`
   * @fhirPath `TestScript.metadata.capability.description`
   */
  testscriptCapability(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("testscript-capability", ...args);
  }
  /**
   * The human-friendly name of the test script
   * @fhirSearchType `string`
   * @fhirPath `TestScript.title`
   */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
   * The uri that identifies the test script
   * @fhirSearchType `uri`
   * @fhirPath `TestScript.url`
   */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
   * The business version of the test script
   * @fhirSearchType `token`
   * @fhirPath `TestScript.version`
   */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: TestScriptSortOrder | TestScriptSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type ValueSetSortOrder =
  | DomainResourceSortOrder
  | "code"
  | "-code"
  | "expansion"
  | "-expansion"
  | "reference"
  | "-reference"
  | "context-quantity"
  | "-context-quantity"
  | "context-type-quantity"
  | "-context-type-quantity"
  | "context-type-value"
  | "-context-type-value"
  | "context-type"
  | "-context-type"
  | "context"
  | "-context"
  | "date"
  | "-date"
  | "description"
  | "-description"
  | "identifier"
  | "-identifier"
  | "jurisdiction"
  | "-jurisdiction"
  | "name"
  | "-name"
  | "publisher"
  | "-publisher"
  | "status"
  | "-status"
  | "title"
  | "-title"
  | "url"
  | "-url"
  | "version"
  | "-version";

export class ValueSetFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "ValueSet";

  /**
   * This special parameter searches for codes in the value set. See additional notes
   * on the ValueSet resource
   * @fhirSearchType `token`
   * @fhirPath `ValueSet.expansion.contains.code | ValueSet.compose.include.concept.code`
   */
  code(...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>): this {
    return this.tokenParam("code", ...args);
  }
  /**
   * Identifies the value set expansion (business identifier)
   * @fhirSearchType `uri`
   * @fhirPath `ValueSet.expansion.identifier`
   */
  expansion(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("expansion", ...args);
  }
  /**
   * A code system included or excluded in the value set or an imported value set
   * @fhirSearchType `uri`
   * @fhirPath `ValueSet.compose.include.system`
   */
  reference(
    ...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>
  ): this {
    return this.uriParam("reference", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * quantity- or range-valued use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned
 * to the code system
* [CompartmentDefinition](compartmentdefinition.html): A
 * quantity- or range-valued use context assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned
 * to the concept map
* [GraphDefinition](graphdefinition.html): A quantity- or
 * range-valued use context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use
 * context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A quantity- or range-valued use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use
 * context assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A quantity- or range-valued use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use
 * context assigned to the structure definition
*
 * [StructureMap](structuremap.html): A quantity- or range-valued use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or
 * range-valued use context assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to
 * the value set
 * @fhirSearchType `quantity`
 * @fhirPath `(CapabilityStatement.useContext.value as Quantity) | (CapabilityStatement.useContext.value as Range) | (CodeSystem.useContext.value as Quantity) | (CodeSystem.useContext.value as Range) | (CompartmentDefinition.useContext.value as Quantity) | (CompartmentDefinition.useContext.value as Range) | (ConceptMap.useContext.value as Quantity) | (ConceptMap.useContext.value as Range) | (GraphDefinition.useContext.value as Quantity) | (GraphDefinition.useContext.value as Range) | (ImplementationGuide.useContext.value as Quantity) | (ImplementationGuide.useContext.value as Range) | (MessageDefinition.useContext.value as Quantity) | (MessageDefinition.useContext.value as Range) | (NamingSystem.useContext.value as Quantity) | (NamingSystem.useContext.value as Range) | (OperationDefinition.useContext.value as Quantity) | (OperationDefinition.useContext.value as Range) | (SearchParameter.useContext.value as Quantity) | (SearchParameter.useContext.value as Range) | (StructureDefinition.useContext.value as Quantity) | (StructureDefinition.useContext.value as Range) | (StructureMap.useContext.value as Quantity) | (StructureMap.useContext.value as Range) | (TerminologyCapabilities.useContext.value as Quantity) | (TerminologyCapabilities.useContext.value as Range) | (ValueSet.useContext.value as Quantity) | (ValueSet.useContext.value as Range)`
 */
  contextQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["quantityParam"]>>
  ): this {
    return this.quantityParam("context-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and quantity- or range-based value assigned to the capability
 * statement
* [CodeSystem](codesystem.html): A use context type and quantity- or
 * range-based value assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context type and
 * quantity- or range-based value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based
 * value assigned to the concept map
* [GraphDefinition](graphdefinition.html): A
 * use context type and quantity- or range-based value assigned to the graph
 * definition
* [ImplementationGuide](implementationguide.html): A use context
 * type and quantity- or range-based value assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and quantity- or
 * range-based value assigned to the message definition
*
 * [NamingSystem](namingsystem.html): A use context type and quantity- or
 * range-based value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and
 * quantity- or range-based value assigned to the operation definition
*
 * [SearchParameter](searchparameter.html): A use context type and quantity- or
 * range-based value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and
 * quantity- or range-based value assigned to the structure definition
*
 * [StructureMap](structuremap.html): A use context type and quantity- or
 * range-based value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * quantity- or range-based value assigned to the terminology capabilities
*
 * [ValueSet](valueset.html): A use context type and quantity- or range-based value
 * assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeQuantity(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-quantity", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context type and value assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A use context type and value assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A use context
 * type and value assigned to the compartment definition
*
 * [ConceptMap](conceptmap.html): A use context type and value assigned to the
 * concept map
* [GraphDefinition](graphdefinition.html): A use context type and
 * value assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context type and value
 * assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A use context type and value
 * assigned to the message definition
* [NamingSystem](namingsystem.html): A use
 * context type and value assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context type and value
 * assigned to the operation definition
* [SearchParameter](searchparameter.html):
 * A use context type and value assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context type and value
 * assigned to the structure definition
* [StructureMap](structuremap.html): A use
 * context type and value assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context type and
 * value assigned to the terminology capabilities
* [ValueSet](valueset.html): A
 * use context type and value assigned to the value set
 * @fhirSearchType `composite`
 * @fhirPath `CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext`
 */
  contextTypeValue(
    ...args: DropFirst<Parameters<FhirSearchBuilder["compositeParam"]>>
  ): this {
    return this.compositeParam("context-type-value", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A
 * type of use context assigned to the capability statement
*
 * [CodeSystem](codesystem.html): A type of use context assigned to the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): A type of use
 * context assigned to the compartment definition
* [ConceptMap](conceptmap.html):
 * A type of use context assigned to the concept map
*
 * [GraphDefinition](graphdefinition.html): A type of use context assigned to the
 * graph definition
* [ImplementationGuide](implementationguide.html): A type of
 * use context assigned to the implementation guide
*
 * [MessageDefinition](messagedefinition.html): A type of use context assigned to
 * the message definition
* [NamingSystem](namingsystem.html): A type of use
 * context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A type of use context assigned
 * to the operation definition
* [SearchParameter](searchparameter.html): A type
 * of use context assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A type of use context assigned
 * to the structure definition
* [StructureMap](structuremap.html): A type of use
 * context assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A type of use context
 * assigned to the terminology capabilities
* [ValueSet](valueset.html): A type of
 * use context assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.useContext.code | CodeSystem.useContext.code | CompartmentDefinition.useContext.code | ConceptMap.useContext.code | GraphDefinition.useContext.code | ImplementationGuide.useContext.code | MessageDefinition.useContext.code | NamingSystem.useContext.code | OperationDefinition.useContext.code | SearchParameter.useContext.code | StructureDefinition.useContext.code | StructureMap.useContext.code | TerminologyCapabilities.useContext.code | ValueSet.useContext.code`
 */
  contextType(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context-type", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): A use
 * context assigned to the capability statement
* [CodeSystem](codesystem.html): A
 * use context assigned to the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to
 * the compartment definition
* [ConceptMap](conceptmap.html): A use context
 * assigned to the concept map
* [GraphDefinition](graphdefinition.html): A use
 * context assigned to the graph definition
*
 * [ImplementationGuide](implementationguide.html): A use context assigned to the
 * implementation guide
* [MessageDefinition](messagedefinition.html): A use
 * context assigned to the message definition
* [NamingSystem](namingsystem.html):
 * A use context assigned to the naming system
*
 * [OperationDefinition](operationdefinition.html): A use context assigned to the
 * operation definition
* [SearchParameter](searchparameter.html): A use context
 * assigned to the search parameter
*
 * [StructureDefinition](structuredefinition.html): A use context assigned to the
 * structure definition
* [StructureMap](structuremap.html): A use context
 * assigned to the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned
 * to the terminology capabilities
* [ValueSet](valueset.html): A use context
 * assigned to the value set
 * @fhirSearchType `token`
 * @fhirPath `(CapabilityStatement.useContext.value as CodeableConcept) | (CodeSystem.useContext.value as CodeableConcept) | (CompartmentDefinition.useContext.value as CodeableConcept) | (ConceptMap.useContext.value as CodeableConcept) | (GraphDefinition.useContext.value as CodeableConcept) | (ImplementationGuide.useContext.value as CodeableConcept) | (MessageDefinition.useContext.value as CodeableConcept) | (NamingSystem.useContext.value as CodeableConcept) | (OperationDefinition.useContext.value as CodeableConcept) | (SearchParameter.useContext.value as CodeableConcept) | (StructureDefinition.useContext.value as CodeableConcept) | (StructureMap.useContext.value as CodeableConcept) | (TerminologyCapabilities.useContext.value as CodeableConcept) | (ValueSet.useContext.value as CodeableConcept)`
 */
  context(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("context", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * capability statement publication date
* [CodeSystem](codesystem.html): The code
 * system publication date
* [CompartmentDefinition](compartmentdefinition.html):
 * The compartment definition publication date
* [ConceptMap](conceptmap.html):
 * The concept map publication date
* [GraphDefinition](graphdefinition.html): The
 * graph definition publication date
*
 * [ImplementationGuide](implementationguide.html): The implementation guide
 * publication date
* [MessageDefinition](messagedefinition.html): The message
 * definition publication date
* [NamingSystem](namingsystem.html): The naming
 * system publication date
* [OperationDefinition](operationdefinition.html): The
 * operation definition publication date
*
 * [SearchParameter](searchparameter.html): The search parameter publication
 * date
* [StructureDefinition](structuredefinition.html): The structure
 * definition publication date
* [StructureMap](structuremap.html): The structure
 * map publication date
* [TerminologyCapabilities](terminologycapabilities.html):
 * The terminology capabilities publication date
* [ValueSet](valueset.html): The
 * value set publication date
 * @fhirSearchType `date`
 * @fhirPath `CapabilityStatement.date | CodeSystem.date | CompartmentDefinition.date | ConceptMap.date | GraphDefinition.date | ImplementationGuide.date | MessageDefinition.date | NamingSystem.date | OperationDefinition.date | SearchParameter.date | StructureDefinition.date | StructureMap.date | TerminologyCapabilities.date | ValueSet.date`
 */
  date(...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>): this {
    return this.dateParam("date", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * description of the capability statement
* [CodeSystem](codesystem.html): The
 * description of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The description of the
 * compartment definition
* [ConceptMap](conceptmap.html): The description of the
 * concept map
* [GraphDefinition](graphdefinition.html): The description of the
 * graph definition
* [ImplementationGuide](implementationguide.html): The
 * description of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The description of the message
 * definition
* [NamingSystem](namingsystem.html): The description of the naming
 * system
* [OperationDefinition](operationdefinition.html): The description of
 * the operation definition
* [SearchParameter](searchparameter.html): The
 * description of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The description of the
 * structure definition
* [StructureMap](structuremap.html): The description of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The description of the terminology capabilities
* [ValueSet](valueset.html):
 * The description of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.description | CodeSystem.description | CompartmentDefinition.description | ConceptMap.description | GraphDefinition.description | ImplementationGuide.description | MessageDefinition.description | NamingSystem.description | OperationDefinition.description | SearchParameter.description | StructureDefinition.description | StructureMap.description | TerminologyCapabilities.description | ValueSet.description`
 */
  description(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("description", ...args);
  }
  /**
 * Multiple Resources: 

* [CodeSystem](codesystem.html): External identifier for
 * the code system
* [ConceptMap](conceptmap.html): External identifier for the
 * concept map
* [MessageDefinition](messagedefinition.html): External identifier
 * for the message definition
* [StructureDefinition](structuredefinition.html):
 * External identifier for the structure definition
*
 * [StructureMap](structuremap.html): External identifier for the structure map
*
 * [ValueSet](valueset.html): External identifier for the value set
 * @fhirSearchType `token`
 * @fhirPath `CodeSystem.identifier | ConceptMap.identifier | MessageDefinition.identifier | StructureDefinition.identifier | StructureMap.identifier | ValueSet.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Intended jurisdiction for the capability statement
*
 * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
*
 * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
*
 * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph
 * definition
* [ImplementationGuide](implementationguide.html): Intended
 * jurisdiction for the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the
 * message definition
* [NamingSystem](namingsystem.html): Intended jurisdiction
 * for the naming system
* [OperationDefinition](operationdefinition.html):
 * Intended jurisdiction for the operation definition
*
 * [SearchParameter](searchparameter.html): Intended jurisdiction for the search
 * parameter
* [StructureDefinition](structuredefinition.html): Intended
 * jurisdiction for the structure definition
* [StructureMap](structuremap.html):
 * Intended jurisdiction for the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction
 * for the terminology capabilities
* [ValueSet](valueset.html): Intended
 * jurisdiction for the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.jurisdiction | CodeSystem.jurisdiction | ConceptMap.jurisdiction | GraphDefinition.jurisdiction | ImplementationGuide.jurisdiction | MessageDefinition.jurisdiction | NamingSystem.jurisdiction | OperationDefinition.jurisdiction | SearchParameter.jurisdiction | StructureDefinition.jurisdiction | StructureMap.jurisdiction | TerminologyCapabilities.jurisdiction | ValueSet.jurisdiction`
 */
  jurisdiction(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("jurisdiction", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html):
 * Computationally friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): Computationally friendly name of the code
 * system
* [CompartmentDefinition](compartmentdefinition.html): Computationally
 * friendly name of the compartment definition
* [ConceptMap](conceptmap.html):
 * Computationally friendly name of the concept map
*
 * [GraphDefinition](graphdefinition.html): Computationally friendly name of the
 * graph definition
* [ImplementationGuide](implementationguide.html):
 * Computationally friendly name of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): Computationally friendly name of
 * the message definition
* [NamingSystem](namingsystem.html): Computationally
 * friendly name of the naming system
*
 * [OperationDefinition](operationdefinition.html): Computationally friendly name
 * of the operation definition
* [SearchParameter](searchparameter.html):
 * Computationally friendly name of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Computationally friendly name
 * of the structure definition
* [StructureMap](structuremap.html):
 * Computationally friendly name of the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): Computationally
 * friendly name of the terminology capabilities
* [ValueSet](valueset.html):
 * Computationally friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.name | CodeSystem.name | CompartmentDefinition.name | ConceptMap.name | GraphDefinition.name | ImplementationGuide.name | MessageDefinition.name | NamingSystem.name | OperationDefinition.name | SearchParameter.name | StructureDefinition.name | StructureMap.name | TerminologyCapabilities.name | ValueSet.name`
 */
  name(...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>): this {
    return this.stringParam("name", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): Name
 * of the publisher of the capability statement
* [CodeSystem](codesystem.html):
 * Name of the publisher of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of
 * the compartment definition
* [ConceptMap](conceptmap.html): Name of the
 * publisher of the concept map
* [GraphDefinition](graphdefinition.html): Name of
 * the publisher of the graph definition
*
 * [ImplementationGuide](implementationguide.html): Name of the publisher of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): Name of the
 * publisher of the message definition
* [NamingSystem](namingsystem.html): Name
 * of the publisher of the naming system
*
 * [OperationDefinition](operationdefinition.html): Name of the publisher of the
 * operation definition
* [SearchParameter](searchparameter.html): Name of the
 * publisher of the search parameter
*
 * [StructureDefinition](structuredefinition.html): Name of the publisher of the
 * structure definition
* [StructureMap](structuremap.html): Name of the publisher
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * Name of the publisher of the terminology capabilities
*
 * [ValueSet](valueset.html): Name of the publisher of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.publisher | CodeSystem.publisher | CompartmentDefinition.publisher | ConceptMap.publisher | GraphDefinition.publisher | ImplementationGuide.publisher | MessageDefinition.publisher | NamingSystem.publisher | OperationDefinition.publisher | SearchParameter.publisher | StructureDefinition.publisher | StructureMap.publisher | TerminologyCapabilities.publisher | ValueSet.publisher`
 */
  publisher(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("publisher", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * current status of the capability statement
* [CodeSystem](codesystem.html): The
 * current status of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The current status of the
 * compartment definition
* [ConceptMap](conceptmap.html): The current status of
 * the concept map
* [GraphDefinition](graphdefinition.html): The current status
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * current status of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The current status of the message
 * definition
* [NamingSystem](namingsystem.html): The current status of the
 * naming system
* [OperationDefinition](operationdefinition.html): The current
 * status of the operation definition
* [SearchParameter](searchparameter.html):
 * The current status of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The current status of the
 * structure definition
* [StructureMap](structuremap.html): The current status of
 * the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The current status of the terminology capabilities
* [ValueSet](valueset.html):
 * The current status of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.status | CodeSystem.status | CompartmentDefinition.status | ConceptMap.status | GraphDefinition.status | ImplementationGuide.status | MessageDefinition.status | NamingSystem.status | OperationDefinition.status | SearchParameter.status | StructureDefinition.status | StructureMap.status | TerminologyCapabilities.status | ValueSet.status`
 */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * human-friendly name of the capability statement
*
 * [CodeSystem](codesystem.html): The human-friendly name of the code system
*
 * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
*
 * [ImplementationGuide](implementationguide.html): The human-friendly name of the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The
 * human-friendly name of the message definition
*
 * [OperationDefinition](operationdefinition.html): The human-friendly name of the
 * operation definition
* [StructureDefinition](structuredefinition.html): The
 * human-friendly name of the structure definition
*
 * [StructureMap](structuremap.html): The human-friendly name of the structure
 * map
* [TerminologyCapabilities](terminologycapabilities.html): The
 * human-friendly name of the terminology capabilities
*
 * [ValueSet](valueset.html): The human-friendly name of the value set
 * @fhirSearchType `string`
 * @fhirPath `CapabilityStatement.title | CodeSystem.title | ConceptMap.title | ImplementationGuide.title | MessageDefinition.title | OperationDefinition.title | StructureDefinition.title | StructureMap.title | TerminologyCapabilities.title | ValueSet.title`
 */
  title(
    ...args: DropFirst<Parameters<FhirSearchBuilder["stringParam"]>>
  ): this {
    return this.stringParam("title", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * uri that identifies the capability statement
* [CodeSystem](codesystem.html):
 * The uri that identifies the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the
 * compartment definition
* [ConceptMap](conceptmap.html): The uri that identifies
 * the concept map
* [GraphDefinition](graphdefinition.html): The uri that
 * identifies the graph definition
*
 * [ImplementationGuide](implementationguide.html): The uri that identifies the
 * implementation guide
* [MessageDefinition](messagedefinition.html): The uri
 * that identifies the message definition
*
 * [OperationDefinition](operationdefinition.html): The uri that identifies the
 * operation definition
* [SearchParameter](searchparameter.html): The uri that
 * identifies the search parameter
*
 * [StructureDefinition](structuredefinition.html): The uri that identifies the
 * structure definition
* [StructureMap](structuremap.html): The uri that
 * identifies the structure map
*
 * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies
 * the terminology capabilities
* [ValueSet](valueset.html): The uri that
 * identifies the value set
 * @fhirSearchType `uri`
 * @fhirPath `CapabilityStatement.url | CodeSystem.url | CompartmentDefinition.url | ConceptMap.url | GraphDefinition.url | ImplementationGuide.url | MessageDefinition.url | OperationDefinition.url | SearchParameter.url | StructureDefinition.url | StructureMap.url | TerminologyCapabilities.url | ValueSet.url`
 */
  url(...args: DropFirst<Parameters<FhirSearchBuilder["uriParam"]>>): this {
    return this.uriParam("url", ...args);
  }
  /**
 * Multiple Resources: 

* [CapabilityStatement](capabilitystatement.html): The
 * business version of the capability statement
* [CodeSystem](codesystem.html):
 * The business version of the code system
*
 * [CompartmentDefinition](compartmentdefinition.html): The business version of the
 * compartment definition
* [ConceptMap](conceptmap.html): The business version of
 * the concept map
* [GraphDefinition](graphdefinition.html): The business version
 * of the graph definition
* [ImplementationGuide](implementationguide.html): The
 * business version of the implementation guide
*
 * [MessageDefinition](messagedefinition.html): The business version of the message
 * definition
* [OperationDefinition](operationdefinition.html): The business
 * version of the operation definition
* [SearchParameter](searchparameter.html):
 * The business version of the search parameter
*
 * [StructureDefinition](structuredefinition.html): The business version of the
 * structure definition
* [StructureMap](structuremap.html): The business version
 * of the structure map
* [TerminologyCapabilities](terminologycapabilities.html):
 * The business version of the terminology capabilities
*
 * [ValueSet](valueset.html): The business version of the value set
 * @fhirSearchType `token`
 * @fhirPath `CapabilityStatement.version | CodeSystem.version | CompartmentDefinition.version | ConceptMap.version | GraphDefinition.version | ImplementationGuide.version | MessageDefinition.version | OperationDefinition.version | SearchParameter.version | StructureDefinition.version | StructureMap.version | TerminologyCapabilities.version | ValueSet.version`
 */
  version(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("version", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters: ValueSetSortOrder | ValueSetSortOrder[] | null | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type VerificationResultSortOrder =
  | DomainResourceSortOrder
  | "target"
  | "-target";

export class VerificationResultFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "VerificationResult";

  /**
   * A resource that was validated
   * @fhirSearchType `reference`
   * @fhirPath `VerificationResult.target`
   */
  target(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("target", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | VerificationResultSortOrder
      | VerificationResultSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

export type VisionPrescriptionSortOrder =
  | DomainResourceSortOrder
  | "datewritten"
  | "-datewritten"
  | "prescriber"
  | "-prescriber"
  | "status"
  | "-status"
  | "encounter"
  | "-encounter"
  | "identifier"
  | "-identifier"
  | "patient"
  | "-patient";

export class VisionPrescriptionFhirSearchBuilder extends DomainResourceFhirSearchBuilder {
  readonly resourceType = "VisionPrescription";

  /**
   * Return prescriptions written on this date
   * @fhirSearchType `date`
   * @fhirPath `VisionPrescription.dateWritten`
   */
  datewritten(
    ...args: DropFirst<Parameters<FhirSearchBuilder["dateParam"]>>
  ): this {
    return this.dateParam("datewritten", ...args);
  }
  /**
   * Who authorized the vision prescription
   * @fhirSearchType `reference`
   * @fhirPath `VisionPrescription.prescriber`
   */
  prescriber(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("prescriber", ...args);
  }
  /**
   * The status of the vision prescription
   * @fhirSearchType `token`
   * @fhirPath `VisionPrescription.status`
   */
  status(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("status", ...args);
  }
  /**
 * Multiple Resources: 

* [Composition](composition.html): Context of the
 * Composition
* [DeviceRequest](devicerequest.html): Encounter during which
 * request was created
* [DiagnosticReport](diagnosticreport.html): The Encounter
 * when the order was made
* [DocumentReference](documentreference.html): Context
 * of the document  content
* [Flag](flag.html): Alert relevant during
 * encounter
* [List](list.html): Context in which list created
*
 * [NutritionOrder](nutritionorder.html): Return nutrition orders with this
 * encounter identifier
* [Observation](observation.html): Encounter related to
 * the observation
* [Procedure](procedure.html): Encounter created as part of
*
 * [RiskAssessment](riskassessment.html): Where was assessment performed?
*
 * [ServiceRequest](servicerequest.html): An encounter in which this request is
 * made
* [VisionPrescription](visionprescription.html): Return prescriptions with
 * this encounter identifier
 * @fhirSearchType `reference`
 * @fhirPath `Composition.encounter | DeviceRequest.encounter | DiagnosticReport.encounter | DocumentReference.context.encounter.where(resolve() is Encounter) | Flag.encounter | List.encounter | NutritionOrder.encounter | Observation.encounter | Procedure.encounter | RiskAssessment.encounter | ServiceRequest.encounter | VisionPrescription.encounter`
 */
  encounter(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("encounter", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html):
 * External ids for this item
* [CarePlan](careplan.html): External Ids for this
 * plan
* [CareTeam](careteam.html): External Ids for this team
*
 * [Composition](composition.html): Version-independent identifier for the
 * Composition
* [Condition](condition.html): A unique identifier of the condition
 * record
* [Consent](consent.html): Identifier for this record (external
 * references)
* [DetectedIssue](detectedissue.html): Unique id for the detected
 * issue
* [DeviceRequest](devicerequest.html): Business identifier for
 * request/order
* [DiagnosticReport](diagnosticreport.html): An identifier for
 * the report
* [DocumentManifest](documentmanifest.html): Unique Identifier for
 * the set of documents
* [DocumentReference](documentreference.html): Master
 * Version Specific Identifier
* [Encounter](encounter.html): Identifier(s) by
 * which this encounter is known
* [EpisodeOfCare](episodeofcare.html): Business
 * Identifier(s) relevant for this EpisodeOfCare
*
 * [FamilyMemberHistory](familymemberhistory.html): A search by a record
 * identifier
* [Goal](goal.html): External Ids for this goal
*
 * [ImagingStudy](imagingstudy.html): Identifiers for the Study, such as DICOM
 * Study Instance UID and Accession number
* [Immunization](immunization.html):
 * Business identifier
* [List](list.html): Business identifier
*
 * [MedicationAdministration](medicationadministration.html): Return
 * administrations with this external identifier
*
 * [MedicationDispense](medicationdispense.html): Returns dispenses with this
 * external identifier
* [MedicationRequest](medicationrequest.html): Return
 * prescriptions with this external identifier
*
 * [MedicationStatement](medicationstatement.html): Return statements with this
 * external identifier
* [NutritionOrder](nutritionorder.html): Return nutrition
 * orders with this external identifier
* [Observation](observation.html): The
 * unique id for a particular observation
* [Procedure](procedure.html): A unique
 * identifier for a procedure
* [RiskAssessment](riskassessment.html): Unique
 * identifier for the assessment
* [ServiceRequest](servicerequest.html):
 * Identifiers assigned to this order
* [SupplyDelivery](supplydelivery.html):
 * External identifier
* [SupplyRequest](supplyrequest.html): Business Identifier
 * for SupplyRequest
* [VisionPrescription](visionprescription.html): Return
 * prescriptions with this external identifier
 * @fhirSearchType `token`
 * @fhirPath `AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier`
 */
  identifier(
    ...args: DropFirst<Parameters<FhirSearchBuilder["tokenParam"]>>
  ): this {
    return this.tokenParam("identifier", ...args);
  }
  /**
 * Multiple Resources: 

* [AllergyIntolerance](allergyintolerance.html): Who the
 * sensitivity is for
* [CarePlan](careplan.html): Who the care plan is for
*
 * [CareTeam](careteam.html): Who care team is for
*
 * [ClinicalImpression](clinicalimpression.html): Patient or group assessed
*
 * [Composition](composition.html): Who and/or what the composition is about
*
 * [Condition](condition.html): Who has the condition?
* [Consent](consent.html):
 * Who the consent applies to
* [DetectedIssue](detectedissue.html): Associated
 * patient
* [DeviceRequest](devicerequest.html): Individual the service is
 * ordered for
* [DeviceUseStatement](deviceusestatement.html): Search by subject
 * - a patient
* [DiagnosticReport](diagnosticreport.html): The subject of the
 * report if a patient
* [DocumentManifest](documentmanifest.html): The subject of
 * the set of documents
* [DocumentReference](documentreference.html): Who/what is
 * the subject of the document
* [Encounter](encounter.html): The patient or group
 * present at the encounter
* [EpisodeOfCare](episodeofcare.html): The patient who
 * is the focus of this episode of care
*
 * [FamilyMemberHistory](familymemberhistory.html): The identity of a subject to
 * list family member history items for
* [Flag](flag.html): The identity of a
 * subject to list flags for
* [Goal](goal.html): Who this goal is intended for
*
 * [ImagingStudy](imagingstudy.html): Who the study is about
*
 * [Immunization](immunization.html): The patient for the vaccination record
*
 * [List](list.html): If all resources have the same subject
*
 * [MedicationAdministration](medicationadministration.html): The identity of a
 * patient to list administrations  for
*
 * [MedicationDispense](medicationdispense.html): The identity of a patient to list
 * dispenses  for
* [MedicationRequest](medicationrequest.html): Returns
 * prescriptions for a specific patient
*
 * [MedicationStatement](medicationstatement.html): Returns statements for a
 * specific patient.
* [NutritionOrder](nutritionorder.html): The identity of the
 * person who requires the diet, formula or nutritional supplement
*
 * [Observation](observation.html): The subject that the observation is about (if
 * patient)
* [Procedure](procedure.html): Search by subject - a patient
*
 * [RiskAssessment](riskassessment.html): Who/what does assessment apply to?
*
 * [ServiceRequest](servicerequest.html): Search by subject - a patient
*
 * [SupplyDelivery](supplydelivery.html): Patient for whom the item is supplied
*
 * [VisionPrescription](visionprescription.html): The identity of a patient to list
 * dispenses for
 * @fhirSearchType `reference`
 * @fhirPath `AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient`
 */
  patient(
    ...args: DropFirst<Parameters<FhirSearchBuilder["referenceParam"]>>
  ): this {
    return this.referenceParam("patient", ...args);
  }

  /**
   * Indicate the sort order.
   *
   * @see https://hl7.org/fhir/search.html#sort
   */
  _sort(
    parameters:
      | VisionPrescriptionSortOrder
      | VisionPrescriptionSortOrder[]
      | null
      | undefined,
  ): this {
    return this.stringParam(
      "_sort",
      parameters,
      undefined,
      parameters ? "replace" : "remove",
    );
  }
}

/**
 * Search parameters by their resource type..
 */
export type AllResourcesSearchParameters = {
  Account: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    identifier: "token";
    name: "string";
    owner: "reference";
    patient: "reference";
    period: "date";
    status: "token";
    subject: "reference";
    type: "token";
  };
  ActivityDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "composed-of": "reference";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    "depends-on": "reference";
    "derived-from": "reference";
    description: "string";
    effective: "date";
    identifier: "token";
    jurisdiction: "token";
    name: "string";
    predecessor: "reference";
    publisher: "string";
    status: "token";
    successor: "reference";
    title: "string";
    topic: "token";
    url: "uri";
    version: "token";
  };
  AdministrableProductDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    device: "reference";
    "dose-form": "token";
    "form-of": "reference";
    identifier: "token";
    ingredient: "token";
    "manufactured-item": "reference";
    route: "token";
    "target-species": "token";
  };
  AdverseEvent: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    actuality: "token";
    category: "token";
    date: "date";
    event: "token";
    location: "reference";
    recorder: "reference";
    resultingcondition: "reference";
    seriousness: "token";
    severity: "token";
    study: "reference";
    subject: "reference";
    substance: "reference";
  };
  AllergyIntolerance: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    asserter: "reference";
    category: "token";
    "clinical-status": "token";
    criticality: "token";
    "last-date": "date";
    manifestation: "token";
    onset: "date";
    recorder: "reference";
    route: "token";
    severity: "token";
    "verification-status": "token";
    code: "token";
    date: "date";
    identifier: "token";
    patient: "reference";
    type: "token";
  };
  Appointment: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    actor: "reference";
    "appointment-type": "token";
    "based-on": "reference";
    date: "date";
    identifier: "token";
    location: "reference";
    "part-status": "token";
    patient: "reference";
    practitioner: "reference";
    "reason-code": "token";
    "reason-reference": "reference";
    "service-category": "token";
    "service-type": "token";
    slot: "reference";
    specialty: "token";
    status: "token";
    "supporting-info": "reference";
  };
  AppointmentResponse: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    actor: "reference";
    appointment: "reference";
    identifier: "token";
    location: "reference";
    "part-status": "token";
    patient: "reference";
    practitioner: "reference";
  };
  AuditEvent: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    action: "token";
    address: "string";
    "agent-name": "string";
    "agent-role": "token";
    agent: "reference";
    altid: "token";
    date: "date";
    "entity-name": "string";
    "entity-role": "token";
    "entity-type": "token";
    entity: "reference";
    outcome: "token";
    patient: "reference";
    policy: "uri";
    site: "token";
    source: "reference";
    subtype: "token";
    type: "token";
  };
  Basic: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    author: "reference";
    code: "token";
    created: "date";
    identifier: "token";
    patient: "reference";
    subject: "reference";
  };
  Binary: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
  };
  BiologicallyDerivedProduct: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
  };
  BodyStructure: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    identifier: "token";
    location: "token";
    morphology: "token";
    patient: "reference";
  };
  Bundle: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    composition: "reference";
    identifier: "token";
    message: "reference";
    timestamp: "date";
    type: "token";
  };
  CapabilityStatement: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    fhirversion: "token";
    format: "token";
    guide: "reference";
    mode: "token";
    "resource-profile": "reference";
    resource: "token";
    "security-service": "token";
    software: "string";
    "supported-profile": "reference";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    jurisdiction: "token";
    name: "string";
    publisher: "string";
    status: "token";
    title: "string";
    url: "uri";
    version: "token";
  };
  CarePlan: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "activity-code": "token";
    "activity-date": "date";
    "activity-reference": "reference";
    "based-on": "reference";
    "care-team": "reference";
    category: "token";
    condition: "reference";
    encounter: "reference";
    goal: "reference";
    "instantiates-canonical": "reference";
    "instantiates-uri": "uri";
    intent: "token";
    "part-of": "reference";
    performer: "reference";
    replaces: "reference";
    status: "token";
    subject: "reference";
    date: "date";
    identifier: "token";
    patient: "reference";
  };
  CareTeam: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    category: "token";
    encounter: "reference";
    participant: "reference";
    status: "token";
    subject: "reference";
    date: "date";
    identifier: "token";
    patient: "reference";
  };
  CatalogEntry: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
  };
  ChargeItem: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    account: "reference";
    code: "token";
    context: "reference";
    "entered-date": "date";
    enterer: "reference";
    "factor-override": "number";
    identifier: "token";
    occurrence: "date";
    patient: "reference";
    "performer-actor": "reference";
    "performer-function": "token";
    "performing-organization": "reference";
    "price-override": "quantity";
    quantity: "quantity";
    "requesting-organization": "reference";
    service: "reference";
    subject: "reference";
  };
  ChargeItemDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    effective: "date";
    identifier: "token";
    jurisdiction: "token";
    publisher: "string";
    status: "token";
    title: "string";
    url: "uri";
    version: "token";
  };
  Citation: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    effective: "date";
    identifier: "token";
    jurisdiction: "token";
    name: "string";
    publisher: "string";
    status: "token";
    title: "string";
    url: "uri";
    version: "token";
  };
  Claim: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "care-team": "reference";
    created: "date";
    "detail-udi": "reference";
    encounter: "reference";
    enterer: "reference";
    facility: "reference";
    identifier: "token";
    insurer: "reference";
    "item-udi": "reference";
    patient: "reference";
    payee: "reference";
    priority: "token";
    "procedure-udi": "reference";
    provider: "reference";
    status: "token";
    "subdetail-udi": "reference";
    use: "token";
  };
  ClaimResponse: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    created: "date";
    disposition: "string";
    identifier: "token";
    insurer: "reference";
    outcome: "token";
    patient: "reference";
    "payment-date": "date";
    request: "reference";
    requestor: "reference";
    status: "token";
    use: "token";
  };
  ClinicalImpression: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    assessor: "reference";
    encounter: "reference";
    "finding-code": "token";
    "finding-ref": "reference";
    identifier: "token";
    investigation: "reference";
    previous: "reference";
    problem: "reference";
    status: "token";
    subject: "reference";
    "supporting-info": "reference";
    date: "date";
    patient: "reference";
  };
  ClinicalUseDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "contraindication-reference": "reference";
    contraindication: "token";
    "effect-reference": "reference";
    effect: "token";
    identifier: "token";
    "indication-reference": "reference";
    indication: "token";
    interaction: "token";
    product: "reference";
    subject: "reference";
    type: "token";
  };
  CodeSystem: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    code: "token";
    "content-mode": "token";
    language: "token";
    supplements: "reference";
    system: "uri";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    identifier: "token";
    jurisdiction: "token";
    name: "string";
    publisher: "string";
    status: "token";
    title: "string";
    url: "uri";
    version: "token";
  };
  Communication: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "based-on": "reference";
    category: "token";
    encounter: "reference";
    identifier: "token";
    "instantiates-canonical": "reference";
    "instantiates-uri": "uri";
    medium: "token";
    "part-of": "reference";
    patient: "reference";
    received: "date";
    recipient: "reference";
    sender: "reference";
    sent: "date";
    status: "token";
    subject: "reference";
  };
  CommunicationRequest: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    authored: "date";
    "based-on": "reference";
    category: "token";
    encounter: "reference";
    "group-identifier": "token";
    identifier: "token";
    medium: "token";
    occurrence: "date";
    patient: "reference";
    priority: "token";
    recipient: "reference";
    replaces: "reference";
    requester: "reference";
    sender: "reference";
    status: "token";
    subject: "reference";
  };
  CompartmentDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    code: "token";
    resource: "token";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    name: "string";
    publisher: "string";
    status: "token";
    url: "uri";
    version: "token";
  };
  Composition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    attester: "reference";
    author: "reference";
    category: "token";
    confidentiality: "token";
    context: "token";
    entry: "reference";
    period: "date";
    "related-id": "token";
    "related-ref": "reference";
    section: "token";
    status: "token";
    subject: "reference";
    title: "string";
    date: "date";
    encounter: "reference";
    identifier: "token";
    patient: "reference";
    type: "token";
  };
  ConceptMap: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    dependson: "uri";
    other: "reference";
    product: "uri";
    "source-code": "token";
    "source-system": "uri";
    "source-uri": "reference";
    source: "reference";
    "target-code": "token";
    "target-system": "uri";
    "target-uri": "reference";
    target: "reference";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    identifier: "token";
    jurisdiction: "token";
    name: "string";
    publisher: "string";
    status: "token";
    title: "string";
    url: "uri";
    version: "token";
  };
  Condition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "abatement-age": "quantity";
    "abatement-date": "date";
    "abatement-string": "string";
    asserter: "reference";
    "body-site": "token";
    category: "token";
    "clinical-status": "token";
    encounter: "reference";
    "evidence-detail": "reference";
    evidence: "token";
    "onset-age": "quantity";
    "onset-date": "date";
    "onset-info": "string";
    "recorded-date": "date";
    severity: "token";
    stage: "token";
    subject: "reference";
    "verification-status": "token";
    code: "token";
    identifier: "token";
    patient: "reference";
  };
  Consent: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    action: "token";
    actor: "reference";
    category: "token";
    consentor: "reference";
    data: "reference";
    organization: "reference";
    period: "date";
    purpose: "token";
    scope: "token";
    "security-label": "token";
    "source-reference": "reference";
    status: "token";
    date: "date";
    identifier: "token";
    patient: "reference";
  };
  Contract: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    authority: "reference";
    domain: "reference";
    identifier: "token";
    instantiates: "uri";
    issued: "date";
    patient: "reference";
    signer: "reference";
    status: "token";
    subject: "reference";
    url: "uri";
  };
  Coverage: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    beneficiary: "reference";
    "class-type": "token";
    "class-value": "string";
    dependent: "string";
    identifier: "token";
    patient: "reference";
    payor: "reference";
    "policy-holder": "reference";
    status: "token";
    subscriber: "reference";
    type: "token";
  };
  CoverageEligibilityRequest: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    created: "date";
    enterer: "reference";
    facility: "reference";
    identifier: "token";
    patient: "reference";
    provider: "reference";
    status: "token";
  };
  CoverageEligibilityResponse: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    created: "date";
    disposition: "string";
    identifier: "token";
    insurer: "reference";
    outcome: "token";
    patient: "reference";
    request: "reference";
    requestor: "reference";
    status: "token";
  };
  DetectedIssue: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    author: "reference";
    code: "token";
    identified: "date";
    implicated: "reference";
    identifier: "token";
    patient: "reference";
  };
  Device: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "device-name": "string";
    identifier: "token";
    location: "reference";
    manufacturer: "string";
    model: "string";
    organization: "reference";
    patient: "reference";
    status: "token";
    type: "token";
    "udi-carrier": "string";
    "udi-di": "string";
    url: "uri";
  };
  DeviceDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    identifier: "token";
    parent: "reference";
    type: "token";
  };
  DeviceMetric: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    category: "token";
    identifier: "token";
    parent: "reference";
    source: "reference";
    type: "token";
  };
  DeviceRequest: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "authored-on": "date";
    "based-on": "reference";
    device: "reference";
    "event-date": "date";
    "group-identifier": "token";
    "instantiates-canonical": "reference";
    "instantiates-uri": "uri";
    insurance: "reference";
    intent: "token";
    performer: "reference";
    "prior-request": "reference";
    requester: "reference";
    status: "token";
    subject: "reference";
    code: "token";
    encounter: "reference";
    identifier: "token";
    patient: "reference";
  };
  DeviceUseStatement: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    device: "reference";
    identifier: "token";
    subject: "reference";
    patient: "reference";
  };
  DiagnosticReport: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "based-on": "reference";
    category: "token";
    conclusion: "token";
    issued: "date";
    media: "reference";
    performer: "reference";
    result: "reference";
    "results-interpreter": "reference";
    specimen: "reference";
    status: "token";
    subject: "reference";
    code: "token";
    date: "date";
    encounter: "reference";
    identifier: "token";
    patient: "reference";
  };
  DocumentManifest: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    author: "reference";
    created: "date";
    description: "string";
    item: "reference";
    recipient: "reference";
    "related-id": "token";
    "related-ref": "reference";
    source: "uri";
    status: "token";
    subject: "reference";
    identifier: "token";
    patient: "reference";
    type: "token";
  };
  DocumentReference: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    authenticator: "reference";
    author: "reference";
    category: "token";
    contenttype: "token";
    custodian: "reference";
    date: "date";
    description: "string";
    event: "token";
    facility: "token";
    format: "token";
    language: "token";
    location: "uri";
    period: "date";
    related: "reference";
    relatesto: "reference";
    relation: "token";
    relationship: "composite";
    "security-label": "token";
    setting: "token";
    status: "token";
    subject: "reference";
    encounter: "reference";
    identifier: "token";
    patient: "reference";
    type: "token";
  };
  Encounter: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    account: "reference";
    appointment: "reference";
    "based-on": "reference";
    class: "token";
    diagnosis: "reference";
    "episode-of-care": "reference";
    length: "quantity";
    "location-period": "date";
    location: "reference";
    "part-of": "reference";
    "participant-type": "token";
    participant: "reference";
    practitioner: "reference";
    "reason-code": "token";
    "reason-reference": "reference";
    "service-provider": "reference";
    "special-arrangement": "token";
    status: "token";
    subject: "reference";
    date: "date";
    identifier: "token";
    patient: "reference";
    type: "token";
  };
  Endpoint: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "connection-type": "token";
    identifier: "token";
    name: "string";
    organization: "reference";
    "payload-type": "token";
    status: "token";
  };
  EnrollmentRequest: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    identifier: "token";
    patient: "reference";
    status: "token";
    subject: "reference";
  };
  EnrollmentResponse: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    identifier: "token";
    request: "reference";
    status: "token";
  };
  EpisodeOfCare: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "care-manager": "reference";
    condition: "reference";
    "incoming-referral": "reference";
    organization: "reference";
    status: "token";
    date: "date";
    identifier: "token";
    patient: "reference";
    type: "token";
  };
  EventDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "composed-of": "reference";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    "depends-on": "reference";
    "derived-from": "reference";
    description: "string";
    effective: "date";
    identifier: "token";
    jurisdiction: "token";
    name: "string";
    predecessor: "reference";
    publisher: "string";
    status: "token";
    successor: "reference";
    title: "string";
    topic: "token";
    url: "uri";
    version: "token";
  };
  Evidence: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    identifier: "token";
    publisher: "string";
    status: "token";
    title: "string";
    url: "uri";
    version: "token";
  };
  EvidenceReport: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    identifier: "token";
    publisher: "string";
    status: "token";
    url: "uri";
  };
  EvidenceVariable: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    identifier: "token";
    name: "string";
    publisher: "string";
    status: "token";
    title: "string";
    url: "uri";
    version: "token";
  };
  ExampleScenario: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    identifier: "token";
    jurisdiction: "token";
    name: "string";
    publisher: "string";
    status: "token";
    url: "uri";
    version: "token";
  };
  ExplanationOfBenefit: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "care-team": "reference";
    claim: "reference";
    coverage: "reference";
    created: "date";
    "detail-udi": "reference";
    disposition: "string";
    encounter: "reference";
    enterer: "reference";
    facility: "reference";
    identifier: "token";
    "item-udi": "reference";
    patient: "reference";
    payee: "reference";
    "procedure-udi": "reference";
    provider: "reference";
    status: "token";
    "subdetail-udi": "reference";
  };
  FamilyMemberHistory: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "instantiates-canonical": "reference";
    "instantiates-uri": "uri";
    relationship: "token";
    sex: "token";
    status: "token";
    code: "token";
    date: "date";
    identifier: "token";
    patient: "reference";
  };
  Flag: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    author: "reference";
    identifier: "token";
    subject: "reference";
    date: "date";
    encounter: "reference";
    patient: "reference";
  };
  Goal: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "achievement-status": "token";
    category: "token";
    "lifecycle-status": "token";
    "start-date": "date";
    subject: "reference";
    "target-date": "date";
    identifier: "token";
    patient: "reference";
  };
  GraphDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    start: "token";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    jurisdiction: "token";
    name: "string";
    publisher: "string";
    status: "token";
    url: "uri";
    version: "token";
  };
  Group: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    actual: "token";
    "characteristic-value": "composite";
    characteristic: "token";
    code: "token";
    exclude: "token";
    identifier: "token";
    "managing-entity": "reference";
    member: "reference";
    type: "token";
    value: "token";
  };
  GuidanceResponse: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    identifier: "token";
    patient: "reference";
    request: "token";
    subject: "reference";
  };
  HealthcareService: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    active: "token";
    characteristic: "token";
    "coverage-area": "reference";
    endpoint: "reference";
    identifier: "token";
    location: "reference";
    name: "string";
    organization: "reference";
    program: "token";
    "service-category": "token";
    "service-type": "token";
    specialty: "token";
  };
  ImagingStudy: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    basedon: "reference";
    bodysite: "token";
    "dicom-class": "token";
    encounter: "reference";
    endpoint: "reference";
    instance: "token";
    interpreter: "reference";
    modality: "token";
    performer: "reference";
    reason: "token";
    referrer: "reference";
    series: "token";
    started: "date";
    status: "token";
    subject: "reference";
    identifier: "token";
    patient: "reference";
  };
  Immunization: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    location: "reference";
    "lot-number": "string";
    manufacturer: "reference";
    performer: "reference";
    "reaction-date": "date";
    reaction: "reference";
    "reason-code": "token";
    "reason-reference": "reference";
    series: "string";
    "status-reason": "token";
    status: "token";
    "target-disease": "token";
    "vaccine-code": "token";
    date: "date";
    identifier: "token";
    patient: "reference";
  };
  ImmunizationEvaluation: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    date: "date";
    "dose-status": "token";
    identifier: "token";
    "immunization-event": "reference";
    patient: "reference";
    status: "token";
    "target-disease": "token";
  };
  ImmunizationRecommendation: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    date: "date";
    identifier: "token";
    information: "reference";
    patient: "reference";
    status: "token";
    support: "reference";
    "target-disease": "token";
    "vaccine-type": "token";
  };
  ImplementationGuide: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "depends-on": "reference";
    experimental: "token";
    global: "reference";
    resource: "reference";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    jurisdiction: "token";
    name: "string";
    publisher: "string";
    status: "token";
    title: "string";
    url: "uri";
    version: "token";
  };
  Ingredient: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    for: "reference";
    function: "token";
    identifier: "token";
    manufacturer: "reference";
    role: "token";
    "substance-code": "token";
    "substance-definition": "reference";
    substance: "reference";
  };
  InsurancePlan: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "address-city": "string";
    "address-country": "string";
    "address-postalcode": "string";
    "address-state": "string";
    "address-use": "token";
    address: "string";
    "administered-by": "reference";
    endpoint: "reference";
    identifier: "token";
    name: "string";
    "owned-by": "reference";
    phonetic: "string";
    status: "token";
    type: "token";
  };
  Invoice: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    account: "reference";
    date: "date";
    identifier: "token";
    issuer: "reference";
    "participant-role": "token";
    participant: "reference";
    patient: "reference";
    recipient: "reference";
    status: "token";
    subject: "reference";
    totalgross: "quantity";
    totalnet: "quantity";
    type: "token";
  };
  Library: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "composed-of": "reference";
    "content-type": "token";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    "depends-on": "reference";
    "derived-from": "reference";
    description: "string";
    effective: "date";
    identifier: "token";
    jurisdiction: "token";
    name: "string";
    predecessor: "reference";
    publisher: "string";
    status: "token";
    successor: "reference";
    title: "string";
    topic: "token";
    type: "token";
    url: "uri";
    version: "token";
  };
  Linkage: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    author: "reference";
    item: "reference";
    source: "reference";
  };
  List: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "empty-reason": "token";
    item: "reference";
    notes: "string";
    source: "reference";
    status: "token";
    subject: "reference";
    title: "string";
    code: "token";
    date: "date";
    encounter: "reference";
    identifier: "token";
    patient: "reference";
  };
  Location: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "address-city": "string";
    "address-country": "string";
    "address-postalcode": "string";
    "address-state": "string";
    "address-use": "token";
    address: "string";
    endpoint: "reference";
    identifier: "token";
    name: "string";
    near: "special";
    "operational-status": "token";
    organization: "reference";
    partof: "reference";
    status: "token";
    type: "token";
  };
  ManufacturedItemDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "dose-form": "token";
    identifier: "token";
    ingredient: "token";
  };
  Measure: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "composed-of": "reference";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    "depends-on": "reference";
    "derived-from": "reference";
    description: "string";
    effective: "date";
    identifier: "token";
    jurisdiction: "token";
    name: "string";
    predecessor: "reference";
    publisher: "string";
    status: "token";
    successor: "reference";
    title: "string";
    topic: "token";
    url: "uri";
    version: "token";
  };
  MeasureReport: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    date: "date";
    "evaluated-resource": "reference";
    identifier: "token";
    measure: "reference";
    patient: "reference";
    period: "date";
    reporter: "reference";
    status: "token";
    subject: "reference";
  };
  Media: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "based-on": "reference";
    created: "date";
    device: "reference";
    encounter: "reference";
    identifier: "token";
    modality: "token";
    operator: "reference";
    patient: "reference";
    site: "token";
    status: "token";
    subject: "reference";
    type: "token";
    view: "token";
  };
  Medication: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "expiration-date": "date";
    form: "token";
    identifier: "token";
    "ingredient-code": "token";
    ingredient: "reference";
    "lot-number": "token";
    manufacturer: "reference";
    status: "token";
    code: "token";
  };
  MedicationAdministration: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    context: "reference";
    device: "reference";
    "effective-time": "date";
    performer: "reference";
    "reason-given": "token";
    "reason-not-given": "token";
    request: "reference";
    subject: "reference";
    code: "token";
    identifier: "token";
    patient: "reference";
    medication: "reference";
    status: "token";
  };
  MedicationDispense: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    context: "reference";
    destination: "reference";
    performer: "reference";
    receiver: "reference";
    responsibleparty: "reference";
    subject: "reference";
    type: "token";
    whenhandedover: "date";
    whenprepared: "date";
    code: "token";
    identifier: "token";
    patient: "reference";
    medication: "reference";
    prescription: "reference";
    status: "token";
  };
  MedicationKnowledge: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "classification-type": "token";
    classification: "token";
    code: "token";
    doseform: "token";
    "ingredient-code": "token";
    ingredient: "reference";
    manufacturer: "reference";
    "monitoring-program-name": "token";
    "monitoring-program-type": "token";
    "monograph-type": "token";
    monograph: "reference";
    "source-cost": "token";
    status: "token";
  };
  MedicationRequest: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    authoredon: "date";
    category: "token";
    "intended-dispenser": "reference";
    "intended-performer": "reference";
    "intended-performertype": "token";
    intent: "token";
    priority: "token";
    requester: "reference";
    subject: "reference";
    code: "token";
    identifier: "token";
    patient: "reference";
    date: "date";
    encounter: "reference";
    medication: "reference";
    status: "token";
  };
  MedicationStatement: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    category: "token";
    context: "reference";
    effective: "date";
    "part-of": "reference";
    source: "reference";
    subject: "reference";
    code: "token";
    identifier: "token";
    patient: "reference";
    medication: "reference";
    status: "token";
  };
  MedicinalProductDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "characteristic-type": "token";
    characteristic: "token";
    contact: "reference";
    domain: "token";
    identifier: "token";
    ingredient: "token";
    "master-file": "reference";
    "name-language": "token";
    name: "string";
    "product-classification": "token";
    status: "token";
    type: "token";
  };
  MessageDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    category: "token";
    event: "token";
    focus: "token";
    parent: "reference";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    identifier: "token";
    jurisdiction: "token";
    name: "string";
    publisher: "string";
    status: "token";
    title: "string";
    url: "uri";
    version: "token";
  };
  MessageHeader: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    author: "reference";
    code: "token";
    "destination-uri": "uri";
    destination: "string";
    enterer: "reference";
    event: "token";
    focus: "reference";
    receiver: "reference";
    "response-id": "token";
    responsible: "reference";
    sender: "reference";
    "source-uri": "uri";
    source: "string";
    target: "reference";
  };
  MolecularSequence: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "chromosome-variant-coordinate": "composite";
    "chromosome-window-coordinate": "composite";
    chromosome: "token";
    identifier: "token";
    patient: "reference";
    "referenceseqid-variant-coordinate": "composite";
    "referenceseqid-window-coordinate": "composite";
    referenceseqid: "token";
    type: "token";
    "variant-end": "number";
    "variant-start": "number";
    "window-end": "number";
    "window-start": "number";
  };
  NamingSystem: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    contact: "string";
    "id-type": "token";
    kind: "token";
    period: "date";
    responsible: "string";
    telecom: "token";
    type: "token";
    value: "string";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    jurisdiction: "token";
    name: "string";
    publisher: "string";
    status: "token";
  };
  NutritionOrder: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    additive: "token";
    datetime: "date";
    formula: "token";
    "instantiates-canonical": "reference";
    "instantiates-uri": "uri";
    oraldiet: "token";
    provider: "reference";
    status: "token";
    supplement: "token";
    encounter: "reference";
    identifier: "token";
    patient: "reference";
  };
  NutritionProduct: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    identifier: "token";
    status: "token";
  };
  Observation: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "based-on": "reference";
    category: "token";
    "code-value-concept": "composite";
    "code-value-date": "composite";
    "code-value-quantity": "composite";
    "code-value-string": "composite";
    "combo-code-value-concept": "composite";
    "combo-code-value-quantity": "composite";
    "combo-code": "token";
    "combo-data-absent-reason": "token";
    "combo-value-concept": "token";
    "combo-value-quantity": "quantity";
    "component-code-value-concept": "composite";
    "component-code-value-quantity": "composite";
    "component-code": "token";
    "component-data-absent-reason": "token";
    "component-value-concept": "token";
    "component-value-quantity": "quantity";
    "data-absent-reason": "token";
    "derived-from": "reference";
    device: "reference";
    focus: "reference";
    "has-member": "reference";
    method: "token";
    "part-of": "reference";
    performer: "reference";
    specimen: "reference";
    status: "token";
    subject: "reference";
    "value-concept": "token";
    "value-date": "date";
    "value-quantity": "quantity";
    "value-string": "string";
    code: "token";
    date: "date";
    encounter: "reference";
    identifier: "token";
    patient: "reference";
  };
  ObservationDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
  };
  OperationDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    base: "reference";
    code: "token";
    "input-profile": "reference";
    instance: "token";
    kind: "token";
    "output-profile": "reference";
    system: "token";
    type: "token";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    jurisdiction: "token";
    name: "string";
    publisher: "string";
    status: "token";
    title: "string";
    url: "uri";
    version: "token";
  };
  OperationOutcome: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
  };
  Organization: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    active: "token";
    "address-city": "string";
    "address-country": "string";
    "address-postalcode": "string";
    "address-state": "string";
    "address-use": "token";
    address: "string";
    endpoint: "reference";
    identifier: "token";
    name: "string";
    partof: "reference";
    phonetic: "string";
    type: "token";
  };
  OrganizationAffiliation: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    active: "token";
    date: "date";
    email: "token";
    endpoint: "reference";
    identifier: "token";
    location: "reference";
    network: "reference";
    "participating-organization": "reference";
    phone: "token";
    "primary-organization": "reference";
    role: "token";
    service: "reference";
    specialty: "token";
    telecom: "token";
  };
  PackagedProductDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    biological: "reference";
    "contained-item": "reference";
    device: "reference";
    identifier: "token";
    "manufactured-item": "reference";
    medication: "reference";
    name: "token";
    nutrition: "reference";
    "package-for": "reference";
    package: "reference";
    status: "token";
  };
  Parameters: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
  };
  Patient: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    active: "token";
    "death-date": "date";
    deceased: "token";
    "general-practitioner": "reference";
    identifier: "token";
    language: "token";
    link: "reference";
    name: "string";
    organization: "reference";
    "address-city": "string";
    "address-country": "string";
    "address-postalcode": "string";
    "address-state": "string";
    "address-use": "token";
    address: "string";
    birthdate: "date";
    email: "token";
    family: "string";
    gender: "token";
    given: "string";
    phone: "token";
    phonetic: "string";
    telecom: "token";
  };
  PaymentNotice: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    created: "date";
    identifier: "token";
    "payment-status": "token";
    provider: "reference";
    request: "reference";
    response: "reference";
    status: "token";
  };
  PaymentReconciliation: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    created: "date";
    disposition: "string";
    identifier: "token";
    outcome: "token";
    "payment-issuer": "reference";
    request: "reference";
    requestor: "reference";
    status: "token";
  };
  Person: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    identifier: "token";
    link: "reference";
    name: "string";
    organization: "reference";
    patient: "reference";
    practitioner: "reference";
    relatedperson: "reference";
    "address-city": "string";
    "address-country": "string";
    "address-postalcode": "string";
    "address-state": "string";
    "address-use": "token";
    address: "string";
    birthdate: "date";
    email: "token";
    gender: "token";
    phone: "token";
    phonetic: "string";
    telecom: "token";
  };
  PlanDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "composed-of": "reference";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    definition: "reference";
    "depends-on": "reference";
    "derived-from": "reference";
    description: "string";
    effective: "date";
    identifier: "token";
    jurisdiction: "token";
    name: "string";
    predecessor: "reference";
    publisher: "string";
    status: "token";
    successor: "reference";
    title: "string";
    topic: "token";
    type: "token";
    url: "uri";
    version: "token";
  };
  Practitioner: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    active: "token";
    communication: "token";
    identifier: "token";
    name: "string";
    "address-city": "string";
    "address-country": "string";
    "address-postalcode": "string";
    "address-state": "string";
    "address-use": "token";
    address: "string";
    email: "token";
    family: "string";
    gender: "token";
    given: "string";
    phone: "token";
    phonetic: "string";
    telecom: "token";
  };
  PractitionerRole: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    active: "token";
    date: "date";
    endpoint: "reference";
    identifier: "token";
    location: "reference";
    organization: "reference";
    practitioner: "reference";
    role: "token";
    service: "reference";
    specialty: "token";
    email: "token";
    phone: "token";
    telecom: "token";
  };
  Procedure: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "based-on": "reference";
    category: "token";
    "instantiates-canonical": "reference";
    "instantiates-uri": "uri";
    location: "reference";
    "part-of": "reference";
    performer: "reference";
    "reason-code": "token";
    "reason-reference": "reference";
    status: "token";
    subject: "reference";
    code: "token";
    date: "date";
    encounter: "reference";
    identifier: "token";
    patient: "reference";
  };
  Provenance: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "agent-role": "token";
    "agent-type": "token";
    agent: "reference";
    entity: "reference";
    location: "reference";
    patient: "reference";
    recorded: "date";
    "signature-type": "token";
    target: "reference";
    when: "date";
  };
  Questionnaire: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    code: "token";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    definition: "uri";
    description: "string";
    effective: "date";
    identifier: "token";
    jurisdiction: "token";
    name: "string";
    publisher: "string";
    status: "token";
    "subject-type": "token";
    title: "string";
    url: "uri";
    version: "token";
  };
  QuestionnaireResponse: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    author: "reference";
    authored: "date";
    "based-on": "reference";
    encounter: "reference";
    identifier: "token";
    "part-of": "reference";
    patient: "reference";
    questionnaire: "reference";
    source: "reference";
    status: "token";
    subject: "reference";
  };
  RegulatedAuthorization: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "case-type": "token";
    case: "token";
    holder: "reference";
    identifier: "token";
    region: "token";
    status: "token";
    subject: "reference";
  };
  RelatedPerson: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    active: "token";
    identifier: "token";
    name: "string";
    patient: "reference";
    relationship: "token";
    "address-city": "string";
    "address-country": "string";
    "address-postalcode": "string";
    "address-state": "string";
    "address-use": "token";
    address: "string";
    birthdate: "date";
    email: "token";
    gender: "token";
    phone: "token";
    phonetic: "string";
    telecom: "token";
  };
  RequestGroup: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    author: "reference";
    authored: "date";
    code: "token";
    encounter: "reference";
    "group-identifier": "token";
    identifier: "token";
    "instantiates-canonical": "reference";
    "instantiates-uri": "uri";
    intent: "token";
    participant: "reference";
    patient: "reference";
    priority: "token";
    status: "token";
    subject: "reference";
  };
  ResearchDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "composed-of": "reference";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    "depends-on": "reference";
    "derived-from": "reference";
    description: "string";
    effective: "date";
    identifier: "token";
    jurisdiction: "token";
    name: "string";
    predecessor: "reference";
    publisher: "string";
    status: "token";
    successor: "reference";
    title: "string";
    topic: "token";
    url: "uri";
    version: "token";
  };
  ResearchElementDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "composed-of": "reference";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    "depends-on": "reference";
    "derived-from": "reference";
    description: "string";
    effective: "date";
    identifier: "token";
    jurisdiction: "token";
    name: "string";
    predecessor: "reference";
    publisher: "string";
    status: "token";
    successor: "reference";
    title: "string";
    topic: "token";
    url: "uri";
    version: "token";
  };
  ResearchStudy: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    category: "token";
    date: "date";
    focus: "token";
    identifier: "token";
    keyword: "token";
    location: "token";
    partof: "reference";
    principalinvestigator: "reference";
    protocol: "reference";
    site: "reference";
    sponsor: "reference";
    status: "token";
    title: "string";
  };
  ResearchSubject: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    date: "date";
    identifier: "token";
    individual: "reference";
    patient: "reference";
    status: "token";
    study: "reference";
  };
  RiskAssessment: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    condition: "reference";
    method: "token";
    performer: "reference";
    probability: "number";
    risk: "token";
    subject: "reference";
    date: "date";
    encounter: "reference";
    identifier: "token";
    patient: "reference";
  };
  Schedule: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    active: "token";
    actor: "reference";
    date: "date";
    identifier: "token";
    "service-category": "token";
    "service-type": "token";
    specialty: "token";
  };
  SearchParameter: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    base: "token";
    code: "token";
    component: "reference";
    "derived-from": "reference";
    target: "token";
    type: "token";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    jurisdiction: "token";
    name: "string";
    publisher: "string";
    status: "token";
    url: "uri";
    version: "token";
  };
  ServiceRequest: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    authored: "date";
    "based-on": "reference";
    "body-site": "token";
    category: "token";
    "instantiates-canonical": "reference";
    "instantiates-uri": "uri";
    intent: "token";
    occurrence: "date";
    "performer-type": "token";
    performer: "reference";
    priority: "token";
    replaces: "reference";
    requester: "reference";
    requisition: "token";
    specimen: "reference";
    status: "token";
    subject: "reference";
    code: "token";
    encounter: "reference";
    identifier: "token";
    patient: "reference";
  };
  Slot: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "appointment-type": "token";
    identifier: "token";
    schedule: "reference";
    "service-category": "token";
    "service-type": "token";
    specialty: "token";
    start: "date";
    status: "token";
  };
  Specimen: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    accession: "token";
    bodysite: "token";
    collected: "date";
    collector: "reference";
    "container-id": "token";
    container: "token";
    identifier: "token";
    parent: "reference";
    patient: "reference";
    status: "token";
    subject: "reference";
    type: "token";
  };
  SpecimenDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    container: "token";
    identifier: "token";
    type: "token";
  };
  StructureDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    abstract: "token";
    "base-path": "token";
    base: "reference";
    derivation: "token";
    experimental: "token";
    "ext-context": "token";
    keyword: "token";
    kind: "token";
    path: "token";
    type: "uri";
    valueset: "reference";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    identifier: "token";
    jurisdiction: "token";
    name: "string";
    publisher: "string";
    status: "token";
    title: "string";
    url: "uri";
    version: "token";
  };
  StructureMap: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    identifier: "token";
    jurisdiction: "token";
    name: "string";
    publisher: "string";
    status: "token";
    title: "string";
    url: "uri";
    version: "token";
  };
  Subscription: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    contact: "token";
    criteria: "string";
    payload: "token";
    status: "token";
    type: "token";
    url: "uri";
  };
  SubscriptionStatus: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
  };
  SubscriptionTopic: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    date: "date";
    "derived-or-self": "uri";
    identifier: "token";
    resource: "uri";
    status: "token";
    title: "string";
    "trigger-description": "string";
    url: "uri";
    version: "token";
  };
  Substance: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    category: "token";
    code: "token";
    "container-identifier": "token";
    expiry: "date";
    identifier: "token";
    quantity: "quantity";
    status: "token";
    "substance-reference": "reference";
  };
  SubstanceDefinition: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    classification: "token";
    code: "token";
    domain: "token";
    identifier: "token";
    name: "string";
  };
  SupplyDelivery: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    receiver: "reference";
    status: "token";
    supplier: "reference";
    identifier: "token";
    patient: "reference";
  };
  SupplyRequest: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    category: "token";
    requester: "reference";
    status: "token";
    subject: "reference";
    supplier: "reference";
    date: "date";
    identifier: "token";
  };
  Task: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "authored-on": "date";
    "based-on": "reference";
    "business-status": "token";
    code: "token";
    encounter: "reference";
    focus: "reference";
    "group-identifier": "token";
    identifier: "token";
    intent: "token";
    modified: "date";
    owner: "reference";
    "part-of": "reference";
    patient: "reference";
    performer: "token";
    period: "date";
    priority: "token";
    requester: "reference";
    status: "token";
    subject: "reference";
  };
  TerminologyCapabilities: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    jurisdiction: "token";
    name: "string";
    publisher: "string";
    status: "token";
    title: "string";
    url: "uri";
    version: "token";
  };
  TestReport: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    identifier: "token";
    issued: "date";
    participant: "uri";
    result: "token";
    tester: "string";
    testscript: "reference";
  };
  TestScript: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    identifier: "token";
    jurisdiction: "token";
    name: "string";
    publisher: "string";
    status: "token";
    "testscript-capability": "string";
    title: "string";
    url: "uri";
    version: "token";
  };
  ValueSet: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    code: "token";
    expansion: "uri";
    reference: "uri";
    "context-quantity": "quantity";
    "context-type-quantity": "composite";
    "context-type-value": "composite";
    "context-type": "token";
    context: "token";
    date: "date";
    description: "string";
    identifier: "token";
    jurisdiction: "token";
    name: "string";
    publisher: "string";
    status: "token";
    title: "string";
    url: "uri";
    version: "token";
  };
  VerificationResult: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    target: "reference";
  };
  VisionPrescription: {
    _content: "string";
    _filter: "token";
    _has: "string";
    _id: "token";
    _lastUpdated: "date";
    _list: "string";
    _profile: "uri";
    _query: "token";
    _security: "token";
    _source: "uri";
    _tag: "token";
    _text: "string";
    _type: "token";
    datewritten: "date";
    prescriber: "reference";
    status: "token";
    encounter: "reference";
    identifier: "token";
    patient: "reference";
  };
};

export type AnyFhirSearchBuilder =
  | AccountFhirSearchBuilder
  | ActivityDefinitionFhirSearchBuilder
  | AdministrableProductDefinitionFhirSearchBuilder
  | AdverseEventFhirSearchBuilder
  | AllergyIntoleranceFhirSearchBuilder
  | AppointmentFhirSearchBuilder
  | AppointmentResponseFhirSearchBuilder
  | AuditEventFhirSearchBuilder
  | BasicFhirSearchBuilder
  | BinaryFhirSearchBuilder
  | BiologicallyDerivedProductFhirSearchBuilder
  | BodyStructureFhirSearchBuilder
  | BundleFhirSearchBuilder
  | CapabilityStatementFhirSearchBuilder
  | CarePlanFhirSearchBuilder
  | CareTeamFhirSearchBuilder
  | CatalogEntryFhirSearchBuilder
  | ChargeItemFhirSearchBuilder
  | ChargeItemDefinitionFhirSearchBuilder
  | CitationFhirSearchBuilder
  | ClaimFhirSearchBuilder
  | ClaimResponseFhirSearchBuilder
  | ClinicalImpressionFhirSearchBuilder
  | ClinicalUseDefinitionFhirSearchBuilder
  | CodeSystemFhirSearchBuilder
  | CommunicationFhirSearchBuilder
  | CommunicationRequestFhirSearchBuilder
  | CompartmentDefinitionFhirSearchBuilder
  | CompositionFhirSearchBuilder
  | ConceptMapFhirSearchBuilder
  | ConditionFhirSearchBuilder
  | ConsentFhirSearchBuilder
  | ContractFhirSearchBuilder
  | CoverageFhirSearchBuilder
  | CoverageEligibilityRequestFhirSearchBuilder
  | CoverageEligibilityResponseFhirSearchBuilder
  | DetectedIssueFhirSearchBuilder
  | DeviceFhirSearchBuilder
  | DeviceDefinitionFhirSearchBuilder
  | DeviceMetricFhirSearchBuilder
  | DeviceRequestFhirSearchBuilder
  | DeviceUseStatementFhirSearchBuilder
  | DiagnosticReportFhirSearchBuilder
  | DocumentManifestFhirSearchBuilder
  | DocumentReferenceFhirSearchBuilder
  | EncounterFhirSearchBuilder
  | EndpointFhirSearchBuilder
  | EnrollmentRequestFhirSearchBuilder
  | EnrollmentResponseFhirSearchBuilder
  | EpisodeOfCareFhirSearchBuilder
  | EventDefinitionFhirSearchBuilder
  | EvidenceFhirSearchBuilder
  | EvidenceReportFhirSearchBuilder
  | EvidenceVariableFhirSearchBuilder
  | ExampleScenarioFhirSearchBuilder
  | ExplanationOfBenefitFhirSearchBuilder
  | FamilyMemberHistoryFhirSearchBuilder
  | FlagFhirSearchBuilder
  | GoalFhirSearchBuilder
  | GraphDefinitionFhirSearchBuilder
  | GroupFhirSearchBuilder
  | GuidanceResponseFhirSearchBuilder
  | HealthcareServiceFhirSearchBuilder
  | ImagingStudyFhirSearchBuilder
  | ImmunizationFhirSearchBuilder
  | ImmunizationEvaluationFhirSearchBuilder
  | ImmunizationRecommendationFhirSearchBuilder
  | ImplementationGuideFhirSearchBuilder
  | IngredientFhirSearchBuilder
  | InsurancePlanFhirSearchBuilder
  | InvoiceFhirSearchBuilder
  | LibraryFhirSearchBuilder
  | LinkageFhirSearchBuilder
  | ListFhirSearchBuilder
  | LocationFhirSearchBuilder
  | ManufacturedItemDefinitionFhirSearchBuilder
  | MeasureFhirSearchBuilder
  | MeasureReportFhirSearchBuilder
  | MediaFhirSearchBuilder
  | MedicationFhirSearchBuilder
  | MedicationAdministrationFhirSearchBuilder
  | MedicationDispenseFhirSearchBuilder
  | MedicationKnowledgeFhirSearchBuilder
  | MedicationRequestFhirSearchBuilder
  | MedicationStatementFhirSearchBuilder
  | MedicinalProductDefinitionFhirSearchBuilder
  | MessageDefinitionFhirSearchBuilder
  | MessageHeaderFhirSearchBuilder
  | MolecularSequenceFhirSearchBuilder
  | NamingSystemFhirSearchBuilder
  | NutritionOrderFhirSearchBuilder
  | NutritionProductFhirSearchBuilder
  | ObservationFhirSearchBuilder
  | ObservationDefinitionFhirSearchBuilder
  | OperationDefinitionFhirSearchBuilder
  | OperationOutcomeFhirSearchBuilder
  | OrganizationFhirSearchBuilder
  | OrganizationAffiliationFhirSearchBuilder
  | PackagedProductDefinitionFhirSearchBuilder
  | ParametersFhirSearchBuilder
  | PatientFhirSearchBuilder
  | PaymentNoticeFhirSearchBuilder
  | PaymentReconciliationFhirSearchBuilder
  | PersonFhirSearchBuilder
  | PlanDefinitionFhirSearchBuilder
  | PractitionerFhirSearchBuilder
  | PractitionerRoleFhirSearchBuilder
  | ProcedureFhirSearchBuilder
  | ProvenanceFhirSearchBuilder
  | QuestionnaireFhirSearchBuilder
  | QuestionnaireResponseFhirSearchBuilder
  | RegulatedAuthorizationFhirSearchBuilder
  | RelatedPersonFhirSearchBuilder
  | RequestGroupFhirSearchBuilder
  | ResearchDefinitionFhirSearchBuilder
  | ResearchElementDefinitionFhirSearchBuilder
  | ResearchStudyFhirSearchBuilder
  | ResearchSubjectFhirSearchBuilder
  | RiskAssessmentFhirSearchBuilder
  | ScheduleFhirSearchBuilder
  | SearchParameterFhirSearchBuilder
  | ServiceRequestFhirSearchBuilder
  | SlotFhirSearchBuilder
  | SpecimenFhirSearchBuilder
  | SpecimenDefinitionFhirSearchBuilder
  | StructureDefinitionFhirSearchBuilder
  | StructureMapFhirSearchBuilder
  | SubscriptionFhirSearchBuilder
  | SubscriptionStatusFhirSearchBuilder
  | SubscriptionTopicFhirSearchBuilder
  | SubstanceFhirSearchBuilder
  | SubstanceDefinitionFhirSearchBuilder
  | SupplyDeliveryFhirSearchBuilder
  | SupplyRequestFhirSearchBuilder
  | TaskFhirSearchBuilder
  | TerminologyCapabilitiesFhirSearchBuilder
  | TestReportFhirSearchBuilder
  | TestScriptFhirSearchBuilder
  | ValueSetFhirSearchBuilder
  | VerificationResultFhirSearchBuilder
  | VisionPrescriptionFhirSearchBuilder;

/**
 * Allow referencing a search builder type from its string ResourceType representation.
 */
export type ExtractSearchBuilder<TResourceType extends AnyResourceType> =
  Extract<AnyFhirSearchBuilder, { resourceType: TResourceType }>;
